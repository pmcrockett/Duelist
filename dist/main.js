(()=>{"use strict";var t=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,e=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,s=/[^-+\dA-Z]/g;function i(e,s,i,l){if(1!==arguments.length||"string"!=typeof e||/\d/.test(e)||(s=e,e=void 0),(e=e||0===e?e:new Date)instanceof Date||(e=new Date(e)),isNaN(e))throw TypeError("Invalid date");var h=(s=String(n[s]||s||n.default)).slice(0,4);"UTC:"!==h&&"GMT:"!==h||(s=s.slice(4),i=!0,"GMT:"===h&&(l=!0));var m=function(){return i?"getUTC":"get"},g=function(){return e[m()+"Date"]()},p=function(){return e[m()+"Day"]()},f=function(){return e[m()+"Month"]()},b=function(){return e[m()+"FullYear"]()},k=function(){return e[m()+"Hours"]()},y=function(){return e[m()+"Minutes"]()},v=function(){return e[m()+"Seconds"]()},L=function(){return e[m()+"Milliseconds"]()},S=function(){return i?0:e.getTimezoneOffset()},A=function(){return u(e)},T={d:function(){return g()},dd:function(){return o(g())},ddd:function(){return r.dayNames[p()]},DDD:function(){return a({y:b(),m:f(),d:g(),_:m(),dayName:r.dayNames[p()],short:!0})},dddd:function(){return r.dayNames[p()+7]},DDDD:function(){return a({y:b(),m:f(),d:g(),_:m(),dayName:r.dayNames[p()+7]})},m:function(){return f()+1},mm:function(){return o(f()+1)},mmm:function(){return r.monthNames[f()]},mmmm:function(){return r.monthNames[f()+12]},yy:function(){return String(b()).slice(2)},yyyy:function(){return o(b(),4)},h:function(){return k()%12||12},hh:function(){return o(k()%12||12)},H:function(){return k()},HH:function(){return o(k())},M:function(){return y()},MM:function(){return o(y())},s:function(){return v()},ss:function(){return o(v())},l:function(){return o(L(),3)},L:function(){return o(Math.floor(L()/10))},t:function(){return k()<12?r.timeNames[0]:r.timeNames[1]},tt:function(){return k()<12?r.timeNames[2]:r.timeNames[3]},T:function(){return k()<12?r.timeNames[4]:r.timeNames[5]},TT:function(){return k()<12?r.timeNames[6]:r.timeNames[7]},Z:function(){return l?"GMT":i?"UTC":c(e)},o:function(){return(S()>0?"-":"+")+o(100*Math.floor(Math.abs(S())/60)+Math.abs(S())%60,4)},p:function(){return(S()>0?"-":"+")+o(Math.floor(Math.abs(S())/60),2)+":"+o(Math.floor(Math.abs(S())%60),2)},S:function(){return["th","st","nd","rd"][g()%10>3?0:(g()%100-g()%10!=10)*g()%10]},W:function(){return A()},WW:function(){return o(A())},N:function(){return d(e)}};return s.replace(t,(function(t){return t in T?T[t]():t.slice(1,t.length-1)}))}var n={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},r={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},o=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(t).padStart(e,"0")},a=function(t){var e=t.y,s=t.m,i=t.d,n=t._,r=t.dayName,o=t.short,a=void 0!==o&&o,u=new Date,d=new Date;d.setDate(d[n+"Date"]()-1);var c=new Date;return c.setDate(c[n+"Date"]()+1),u[n+"FullYear"]()===e&&u[n+"Month"]()===s&&u[n+"Date"]()===i?a?"Tdy":"Today":d[n+"FullYear"]()===e&&d[n+"Month"]()===s&&d[n+"Date"]()===i?a?"Ysd":"Yesterday":c[n+"FullYear"]()===e&&c[n+"Month"]()===s&&c[n+"Date"]()===i?a?"Tmw":"Tomorrow":r},u=function(t){var e=new Date(t.getFullYear(),t.getMonth(),t.getDate());e.setDate(e.getDate()-(e.getDay()+6)%7+3);var s=new Date(e.getFullYear(),0,4);s.setDate(s.getDate()-(s.getDay()+6)%7+3);var i=e.getTimezoneOffset()-s.getTimezoneOffset();e.setHours(e.getHours()-i);var n=(e-s)/6048e5;return 1+Math.floor(n)},d=function(t){var e=t.getDay();return 0===e&&(e=7),e},c=function(t){return(String(t).match(e)||[""]).pop().replace(s,"").replace(/GMT\+0000/g,"UTC")};const l=document.querySelector(".task-bin"),h=["N/A","Unimportant","Important","Urgent"],m=["N/A","Not started","In progress","Complete"];function g(){l.querySelector(".instructions").classList.add("hidden")}function p(t,e,s){C(s,e),s.expanded?t.setAttribute("d","M12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22M17,14L12,9L7,14H17Z"):t.setAttribute("d","M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M7,10L12,15L17,10H7Z")}function f(t,e,s,i){const n=e.querySelector(".subtasks-plus-img > path:not(.bg-img)");if(s.subtaskList.expanded=t,C(s.subtaskList,e),s.subtaskList.expanded?n.setAttribute("d","M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"):n.setAttribute("d","M17,13H13V17H11V13H7V11H11V7H13V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"),i)for(const n of s.subtaskList.tasks)f(t,e.querySelector(`.subtasks.id-${n.id}`),n,i)}function b(){l.classList.add("freeze");const t=document.querySelectorAll('[tabindex="0"]:not(body)');for(const e of t)e.setAttribute("tabindex","-1")}function k(){l.classList.remove("freeze");const t=document.querySelectorAll('[tabindex="-1"]:not(body)');for(const e of t)e.setAttribute("tabindex","0")}function y(t){const e=l.querySelector(`.task.id-${t}`);e&&e.classList.remove("selected")}function v(t,e){const s=document.elementsFromPoint(t,e);let i=!1,n=-1;for(const t of s)if(t.classList.contains("task")){const e=t.className.indexOf("id-");let s=t.className.indexOf(" ",e);s<0&&(s=t.className.length),i=!0,n=Number(t.className.slice(e+3,s))}else if(t.classList.contains("task-expand-img"))return-1;return i?n:-1}function L(t){b();const e=document.querySelector("body"),s=e.querySelector(`.task.id-${t.id}`);s.classList.add("editing");const i=S("div","card-input",e),n=x("text",null,"input-title",t.title,i,"field-container","Task name");window.setTimeout((function(){n.focus(),n.setSelectionRange(n.value.length,n.value.length)}),1);const r=S("div",["due-container","input-container"],i),o=x("date",null,"input-date",t.dueDateStr,r,"field-container","Due date"),a=x("time",null,"input-time",t.dueTimeStr,r,"field-container","Due time"),u=x("textarea",null,"input-desc",t.description,i,"field-container","Description"),d=S("div",["radio-container","input-container"],i),c=S("div","field-container",d);S("div","pseudo-label",c,"Priority");const l=S(D("priority-radio",t.priority,h),null,c);w(l,null,"input-priority");const g=S("div","field-container",d);S("div","pseudo-label",g,"Progress");const p=S(D("progress-radio",t.progress,m),null,g);w(p,null,"input-progress");const f=S("div","progress-check-container",g),k=S("input",null,f);w(k,"checkbox","progress-check"),t.useProgressFromSubtasks&&k.setAttribute("checked","checked"),S("label",null,f,"Set progress from subtasks").setAttribute("for","progress-check"),A(k,p);const y=x("textarea",null,"input-note",t.notes,i,"field-container","Notes"),v=S("div","input-buttons",i),L=S("button",["button","confirm-button","input-button"],v);L.setAttribute("tabindex","0"),S(M("M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z","Confirm",!0),"input-button-img",L);const T=S("button",["button","cancel-button","input-button"],v);return T.setAttribute("tabindex","0"),S(M("M9,7L11,12L9,17H11L12,14.5L13,17H15L13,12L15,7H13L12,9.5L11,7H9M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2Z","Cancel",!0),"input-button-img",T),{card:s,cardInput:i,titleInput:n,dateInput:o,timeInput:a,descInput:u,priorityField:l,progressCheck:k,progressField:p,notesInput:y,confirm:L,cancel:T}}function S(t,e,s,i){if("string"==typeof t)var n=document.createElement(t);else n=t;return e&&("string"==typeof e?n.classList.add(e):n.classList.add(...e)),i&&(n.textContent=i),s.appendChild(n),n}function A(t,e){t.checked?e.setAttribute("disabled","disabled"):e.removeAttribute("disabled")}function T(t){const e=t.querySelectorAll("input");for(let t=0;t<e.length;t++)if(e[t].checked)return t;return-1}function x(t,e,s,i,n,r,o,a){const u=S("div",r,n);let d;return S("label",a,u,o).setAttribute("for",s),"textarea"==t?(d=S("textarea",e,u,i),w(d,null,s,null)):(d=S("input",e,u),w(d,t,s,i)),d}function w(t,e,s,i){e&&t.setAttribute("type",e),s&&(t.setAttribute("name",s),t.setAttribute("id",s)),i&&t.setAttribute("value",i)}function C(t,e){if(t.expanded)return e.classList.remove("collapsed"),void e.classList.add("expanded");e.classList.remove("expanded"),e.classList.add("collapsed")}function D(t,e,s){const i=document.createElement("fieldset");i.classList.add(`${t}-fieldset`);const n=[],r=[];for(let e=0;e<s.length;e++)n.push(document.createElement("input")),n[e].setAttribute("type","radio"),n[e].setAttribute("id",`${t}-${e}`),n[e].setAttribute("name",t),n[e].setAttribute("value",s[e]),i.appendChild(n[e]),r.push(document.createElement("label")),r[e].setAttribute("for",`${t}-${e}`),r[e].textContent=s[e],i.appendChild(r[e]);return n[e].setAttribute("checked",""),i}function M(t,e,s,i){const n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("viewBox","0 0 24 24");const r=document.createElementNS("http://www.w3.org/2000/svg","title");if(r.textContent=e,n.appendChild(r),s){var o=document.createElementNS("http://www.w3.org/2000/svg","path");o.setAttribute("d","M12,4A10,10 0 0,0 4,12A10,10 0 0,0 12,20A10,10 0 0,0 20,12A10,10 0 0,0 12,4Z"),o.classList.add("bg-img"),n.appendChild(o)}const a=document.createElementNS("http://www.w3.org/2000/svg","path");return a.setAttribute("d",t),n.appendChild(a),null!=i&&(a.classList.add(i),s&&o.classList.add(i)),n}const E="http://www.w3.org/2000/svg",I=class{clickReleaseWindow;svg;group;menu;border;menuItems=[];buttonDownTime;isVisible=!1;tileGroup=null;functions;itemTexts;borderSize=1;scale=1;fontSize=20;menuMargin=2;menuPosOffset={x:-4,y:-1};menuWidth;menuHeight;initTime;postInitDelay=200;html;constructor(t,e,s){this.html=document.querySelector("html"),this.svg=document.createElementNS(E,"svg"),this.svg.classList.add("menu"),s&&this.svg.classList.add(...s),this.svg.setAttribute("display","none"),this.clickReleaseWindow=500,this.group=document.createElementNS(E,"g"),this.menu=document.createElementNS(E,"rect"),this.border=document.createElementNS(E,"rect"),this.group.appendChild(this.border),this.group.appendChild(this.menu),this.group.setAttribute("id","menuGroup"),this.border.classList.add("menu-border"),this.menu.classList.add("menu-rect"),this.functions=e,this.itemTexts=t,this.svg.addEventListener("mousemove",(t=>{this.updateHighlight(t.clientX,t.clientY)})),window.addEventListener("scroll",(()=>{this.isVisible&&this.erase()})),document.addEventListener("mousedown",(t=>{if(this.isVisible&&(new Date).getTime()-this.initTime>this.postInitDelay){const e=this.getHighlighted(),s=document.elementsFromPoint(t.clientX,t.clientY);this.svg.remove(),e&&s.includes(e.rect)&&this.activateSelection(),this.erase()}}))}init(){const t=window.getComputedStyle(this.svg).getPropertyValue("font-size");if(t){let e="";for(const s of t){const t=s.charCodeAt(0);t>=48&&t<=57&&(e+=s)}this.fontSize=Number(e)}this.svg.setAttribute("display","block"),this.svg.setAttribute("style","position: absolute;");for(let t=0;t<this.itemTexts.length;t++)this.addMenuItem(this.itemTexts[t],this.functions[t]);let e=0,s=0;for(const t of this.menuItems){const e=t.svgText.text.getBBox().width+2*t.svgText.xMargin;e>s&&(s=e)}for(let t=0;t<this.menuItems.length;t++)this.menuItems[t].rect.setAttribute("width",s),this.menuItems[t].group.setAttribute("transform",`translate(0, ${e})`),e+=Number(this.menuItems[t].rect.getAttribute("height"));this.menu.setAttribute("width",`${s}`),this.menu.setAttribute("height",`${e}`),this.border.setAttribute("width",`${s+2*this.borderSize}`),this.border.setAttribute("height",`${e+2*this.borderSize}`),this.border.setAttribute("x",""+-1*this.borderSize),this.border.setAttribute("y",""+-1*this.borderSize),this.svg.setAttribute("width",""+(s*this.scale+this.borderSize*this.scale)),this.svg.setAttribute("height",""+(e*this.scale+this.borderSize*this.scale)),this.svg.setAttribute("viewBox",`${-1*this.borderSize-this.menuMargin} ${-1*this.borderSize-this.menuMargin} ${s+2*this.borderSize+2*this.menuMargin} ${e+2*this.borderSize+2*this.menuMargin}`),this.menuWidth=s+2*this.borderSize-2*this.menuMargin,this.menuHeight=e+2*this.borderSize-2*this.menuMargin,this.initTime=(new Date).getTime()}buttonDown(t,e){this.isVisible&&this.erase(),this.isVisible=!0,this.svg.appendChild(this.group),this.init();const s=this.html.clientWidth,i=this.html.clientHeight;let n=0,r=0;t+this.menuPosOffset.x+this.menuWidth+1>s&&(n=s-(t+this.menuPosOffset.x+this.menuWidth+1)),e+this.menuPosOffset.y+this.menuHeight+1>i&&(r=i-(e+this.menuPosOffset.y+this.menuHeight+1)),this.svg.setAttribute("transform",`translate(${t-this.menuMargin+this.menuPosOffset.x+n+window.scrollX}, ${e-this.menuMargin+this.menuPosOffset.y+r+window.scrollY})`),this.updateHighlight(t,e),this.buttonDownTime=performance.now()}buttonUp(){performance.now()-this.buttonDownTime>this.clickReleaseWindow&&this.erase()}erase(){this.group.remove();for(const t of this.menuItems)t.group.remove();this.svg.setAttribute("display","none"),this.menuItems=[],this.isVisible=!1}addMenuItem(t,e,s){null==s&&(s=this.menuItems.length),this.menuItems.splice(s,0,new N(t,this.fontSize,this.group,s,e))}updateHighlight(t,e){if(this.isVisible){for(const t of this.menuItems)t.unhighlight();const s=document.elementsFromPoint(t,e);for(const t of this.menuItems)if(s.includes(t.rect)){t.highlight();break}}}getHighlighted(){if(this.isVisible)for(const t of this.menuItems)if(t.isHighlighted)return t}getHighlightedText(){const t=this.getHighlighted();return t?t.svgText.text.textContent:void 0}activateSelection(t="highlighted"){"highlighted"===t&&(t=this.getHighlightedText());const e=this.menuItems.find((e=>e.text==t));return e?e.function():null}};class N{rect;group;text;svgText;isHighlighted;functions;constructor(t,e,s,i,n){this.text=t,this.rect=document.createElementNS(E,"rect"),this.group=document.createElementNS(E,"g"),this.group.appendChild(this.rect),s.appendChild(this.group),this.svgText=new H(t,this.group,i,e),this.rect.setAttribute("fill","rgba(0, 0, 0, 0)"),this.rect.setAttribute("height",""+1.2*e),this.rect.classList.add("menu-item"),this.isHighlighted=!1,this.function=n}highlight(){this.rect.classList.add("menu-highlight"),this.isHighlighted=!0}unhighlight(){this.rect.classList.remove("menu-highlight"),this.isHighlighted=!1}}function H(t,e,s=-1,i=10){this.fontSize=i,this.xMargin=.2*this.fontSize,this.text=document.createElementNS(E,"text"),this.text.textContent=t,this.text.setAttribute("cursor","default"),this.text.classList.add(`menu-text-${s}`),this.text.classList.add("menu-text"),e.appendChild(this.text),this.text.setAttribute("x",`${this.xMargin}`),this.text.setAttribute("y",""+.9*this.fontSize),this.text.setAttribute("font-size",`${this.fontSize}px`)}function P(t){let e;try{e=window[t];const s="__storage_test__";return e.setItem(s,s),e.removeItem(s),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}class F{title;dueDate;dueDateStr;dueTime;dueTimeStr;description;priority;progress;notes;id;depth;currentlyEditing;useProgressFromSubtasks;subtaskList;supertaskList;expanded;selected;domDiv;static lastId=-1;constructor(t,e,s,i,n,r,o,a,u){this.title=t||"",this.dueDateStr=e,this.dueTimeStr=s,this.updateDue(),this.description=i||"",this.priority=n||0,this.progress=r||0,this.notes=o||"",this.selected=!1,a?a.add(this):this.supertaskList=null,this.currentlyEditing=!1,this.subtaskList=new $(this),this.expanded=this.hasContent(),this.useProgressFromSubtasks=!1,u?this.id=-1:(this.assignNewId(),this.updateDepth())}clone(t,e,s){var i=new F(this.title,this.dueDateStr,this.dueTimeStr,this.description,this.priority,this.progress,this.notes,null,!0);if(i.expanded=this.expanded,i.selected=!1,i.useProgressFromSubtasks=this.useProgressFromSubtasks,e&&e.add(i,s),t){i.subtaskList.expanded=this.subtaskList.expanded;for(let e=0;e<this.subtaskList.tasks.length;e++)this.subtaskList.tasks[e].clone(t,i.subtaskList)}return i}updateDue(){const t=function(){let t=(new Date).getTimezoneOffset();const e=t<0?-1:1;t=Math.abs(t);let s=`${String(Math.floor(t/60)).padStart(2,"0")}:${String(t%60).padStart(2,"0")}`;return s=1==e?"-"+s:"+"+s,s}();if(this.dueDateStr&&this.dueDateStr.length){const e=`${this.dueDateStr}T00:00:00${t}`;this.dueDate=new Date(e)}if(this.dueTimeStr&&this.dueTimeStr.length){const e=`2000-01-01T${this.dueTimeStr}:00${t}`;this.dueTime=new Date(e)}}updateDepth(){if(this.depth=0,null==this.supertaskList)return;let t=this.supertaskList.owner;for(;null!=t;)this.depth++,t=t.supertaskList?t.supertaskList.owner:null}delete(t){return!!this.supertaskList&&(this.domDiv&&(this.domDiv.task.remove(),t&&this.domDiv.subtasks.remove()),this.supertaskList.removeId(this.id))}hasContent(){return this.description&&""!=this.description||this.priority||this.progress||this.notes&&this.notes.length}log(){z.logTask(this)}assignNewId(){this.id=F.generateId()}assignNewIdRecursive(){this.assignNewId();for(let t=0;t<this.subtaskList.tasks.length;t++)this.subtaskList.tasks[t].assignNewIdRecursive()}refreshDom(t){this.domDiv&&(this.domDiv.task.remove(),t&&this.domDiv.subtasks.remove()),this.useProgressFromSubtasks&&(this.progress=this.getProgressRecursive()),this.domDiv=function(t){let e=null;const s=t.supertask;let n=-1;t.supertaskList&&(n=t.supertaskList.getTaskIdx(t)+1);let r=-1,o=null;n>0&&n<t.supertaskList.tasks.length&&(r=t.supertaskList.tasks[n].id,o=l.querySelector(`.task.id-${r}`)),e=s?l.querySelector(`.subtasks.id-${s.id}`):l;const a=`margin-left: calc(calc(var(--card-indent) * ${t.depth}) + calc(var(--card-margin) * 0.5))`,u=document.createElement("div");u.classList.add("task",`id-${t.id}`),u.setAttribute("style",a),t.selected&&u.classList.add("selected"),o?o.insertAdjacentElement("beforebegin",u):e.appendChild(u);const d=S("div","card-header-div",u),c=S("div","card-title-container",d);t.priority&&c.appendChild(function(t){const e=M(["M12 16C13.66 16 15 14.66 15 13C15 11.88 14.39 10.9 13.5 10.39L3.79 4.77L9.32 14.35C9.82 15.33 10.83 16 12 16M12 3C10.19 3 8.5 3.5 7.03 4.32L9.13 5.53C10 5.19 11 5 12 5C16.42 5 20 8.58 20 13C20 15.21 19.11 17.21 17.66 18.65H17.65C17.26 19.04 17.26 19.67 17.65 20.06C18.04 20.45 18.68 20.45 19.07 20.07C20.88 18.26 22 15.76 22 13C22 7.5 17.5 3 12 3M2 13C2 15.76 3.12 18.26 4.93 20.07C5.32 20.45 5.95 20.45 6.34 20.06C6.73 19.67 6.73 19.04 6.34 18.65C4.89 17.2 4 15.21 4 13C4 12 4.19 11 4.54 10.1L3.33 8C2.5 9.5 2 11.18 2 13Z","M12 1.38L9.14 12.06C8.8 13.1 9.04 14.29 9.86 15.12C11.04 16.29 12.94 16.29 14.11 15.12C14.9 14.33 15.16 13.2 14.89 12.21M14.6 3.35L15.22 5.68C18.04 6.92 20 9.73 20 13C20 15.21 19.11 17.21 17.66 18.65H17.65C17.26 19.04 17.26 19.67 17.65 20.06C18.04 20.45 18.68 20.45 19.07 20.07C20.88 18.26 22 15.76 22 13C22 8.38 18.86 4.5 14.6 3.35M9.4 3.36C5.15 4.5 2 8.4 2 13C2 15.76 3.12 18.26 4.93 20.07C5.32 20.45 5.95 20.45 6.34 20.06C6.73 19.67 6.73 19.04 6.34 18.65C4.89 17.2 4 15.21 4 13C4 9.65 5.94 6.86 8.79 5.65","M12,16A3,3 0 0,1 9,13C9,11.88 9.61,10.9 10.5,10.39L20.21,4.77L14.68,14.35C14.18,15.33 13.17,16 12,16M12,3C13.81,3 15.5,3.5 16.97,4.32L14.87,5.53C14,5.19 13,5 12,5A8,8 0 0,0 4,13C4,15.21 4.89,17.21 6.34,18.65H6.35C6.74,19.04 6.74,19.67 6.35,20.06C5.96,20.45 5.32,20.45 4.93,20.07V20.07C3.12,18.26 2,15.76 2,13A10,10 0 0,1 12,3M22,13C22,15.76 20.88,18.26 19.07,20.07V20.07C18.68,20.45 18.05,20.45 17.66,20.06C17.27,19.67 17.27,19.04 17.66,18.65V18.65C19.11,17.2 20,15.21 20,13C20,12 19.81,11 19.46,10.1L20.67,8C21.5,9.5 22,11.18 22,13Z"][t-1],h[t],!1);return e.classList.add("priority-img",["priority-low","priority-mid","priority-high"][t-1]),e}(t.priority));let g=null;t.progress&&(g=function(t){const e=M(["M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z","M8.46 8.46C9.4 7.53 10.67 7 12 7C13.33 7 14.6 7.53 15.54 8.46L8.46 15.54C7.53 14.6 7 13.33 7 12C7 10.67 7.53 9.4 8.46 8.46M8.17 2.76C9.39 2.26 10.69 2 12 2C13.31 2 14.61 2.26 15.83 2.76C17.04 3.26 18.14 4 19.07 4.93C20 5.86 20.74 6.96 21.24 8.17C21.74 9.39 22 10.69 22 12C22 14.65 20.95 17.2 19.07 19.07C17.2 20.95 14.65 22 12 22C10.69 22 9.39 21.74 8.17 21.24C6.96 20.74 5.86 20 4.93 19.07C3.05 17.2 2 14.65 2 12C2 9.35 3.05 6.8 4.93 4.93C5.86 4 6.96 3.26 8.17 2.76M6.34 17.66C7.84 19.16 9.88 20 12 20C14.12 20 16.16 19.16 17.66 17.66C19.16 16.16 20 14.12 20 12C20 9.88 19.16 7.84 17.66 6.34C16.16 4.84 14.12 4 12 4C9.88 4 7.84 4.84 6.34 6.34C4.84 7.84 4 9.88 4 12C4 14.12 4.84 16.16 6.34 17.66Z","M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z"][t-1],m[t],!1);return e.classList.add("progress-img",["progress-not-started","progress-in-progress","progress-completed"][t-1]),e}(t.progress),c.appendChild(g)),S("h2",["card-title","card-editable"],c,t.title);const b=S("button",["button","edit-task-button"],d);b.setAttribute("tabindex","0"),S(M("M12,2C6.47,2 2,6.47 2,12C2,17.53 6.47,22 12,22C17.53,22 22,17.53 22,12C22,6.47 17.53,2 12,2M15.1,7.07C15.24,7.07 15.38,7.12 15.5,7.23L16.77,8.5C17,8.72 17,9.07 16.77,9.28L15.77,10.28L13.72,8.23L14.72,7.23C14.82,7.12 14.96,7.07 15.1,7.07M13.13,8.81L15.19,10.87L9.13,16.93H7.07V14.87L13.13,8.81Z","Edit task",!0),"edit-task-img",b),t.dueDate&&S("div",["card-due-date","card-editable"],d,`${i(t.dueDate,"dddd, mmmm dS, yyyy")}`),t.dueTime&&S("div",["card-due-time","card-editable"],d,`${i(t.dueTime,"h:MM TT")}`);const k=S("button",["button","task-expand-button"],d);k.setAttribute("tabindex","0");const y=S(M("","Expand",!0),"task-expand-img",k);t.hasContent()||k.classList.add("hidden");const v=y.querySelector("path:not(.bg-img)");if(p(v,u,t),t.priority>0||t.progress>0){const e=S("div","info-container",u);if(t.priority>0){const s=S("div","card-container",e);S("div","card-label",s,"Priority"),S("div",["card-priority","card-editable"],s,h[t.priority])}if(t.progress>0||t.useProgressFromSubtasks){const s=S("div","card-container",e);S("div","card-label",s,"Progress");const i=S("div",["card-progress","card-editable"],s,m[t.progress]);t.useProgressFromSubtasks&&(i.textContent+=" (from subtasks)")}}if(t.description.length){const e=S("div","card-container",u);S("div",["card-description","card-content","card-editable"],e,t.description),S("div","card-label",e,"About")}let L;if(t.notes.length){const e=S("div","card-container",u);S("div",["card-notes","card-content","card-editable"],e,t.notes),S("div","card-label",e,"Notes")}let A=l.querySelector(`.subtasks.id-${t.id}`),T=!1;return A?(A.remove(),u.insertAdjacentElement("afterend",A),L=A.querySelector(".subtasks-button"),t.subtasks.length?L.classList.remove("hidden"):L.classList.add("hidden"),A.querySelector(".subtasks-text").textContent=`${t.subtasks.length} \n            ${1==t.subtasks.length?"subtask":"subtasks"}`):(T=!0,A=document.createElement("div"),u.insertAdjacentElement("afterend",A),A.classList.add("subtasks",`id-${t.id}`),L=S("button",["subtasks-button","button",`id-${t.id}`],A),L.setAttribute("style",a),t.subtasks.length?L.classList.remove("hidden"):L.classList.add("hidden"),S(M("","Subtasks",!0),"subtasks-plus-img",L),f(t.subtaskList.expanded,A,t,!1),S("div",["subtasks-text",`id-${t.id}`],L,`${t.subtasks.length} \n            ${1==t.subtasks.length?"subtask":"subtasks"}`),L.setAttribute("tabindex","0")),{task:u,subtasks:A,subtasksExpand:L,needSubtasksListener:T,taskExpand:k,taskExpandPath:v,header:d,editOpen:b,progressSvg:g}}(this),q.addExpandTask(this.domDiv.taskExpand,this,this.domDiv.task,this.domDiv.taskExpandPath,this.domDiv.header),q.addOpenEdit(this.domDiv.editOpen,this),this.domDiv.progressSvg&&!this.useProgressFromSubtasks&&q.addProgress(this.domDiv.progressSvg,this),this.domDiv.needSubtasksListener&&q.addExpandSubtasks(this.domDiv.subtasksExpand,this,this.domDiv.subtasks),t&&this.subtaskList.refreshDom(t);for(const t of this.chain)t.useProgressFromSubtasks&&t.refreshDom(!1)}addSubtask(t,e){return this.subtaskList.add(t,e)}removeSubtaskId(t){return this.subtaskList.removeId(t)}removeSubtaskIdx(t){return this.subtaskList.removeIdx(t)}getProgressRecursive(t){null==t&&(t=0),!this.useProgressFromSubtasks&&this.progress>0&&(t=1!=this.progress||1!=t&&0!=t?3!=this.progress||3!=t&&0!=t?2:3:1);for(const e of this.subtaskList.tasks)t=e.getProgressRecursive(t);return t}get subtasks(){return this.subtaskList.tasks}get supertask(){return this.supertaskList?this.supertaskList.owner:null}get chain(){let t=this.supertaskList.owner;const e=[];for(;t;)e.push(t),t=t.supertaskList.owner;return e}static generateId(){return F.lastId>=Number.MAX_SAFE_INTEGER&&(F.lastId=-1),++F.lastId}static resetIds(){F.lastId=-1}}class ${tasks;owner;expanded=!1;static writeErrorShown=!1;static DEFAULT_KEY="taskList";constructor(t,e){this.owner=t,this.tasks=[],e&&e.forEach((t=>{this.add(t)}))}createTask(t,e){t||(t=this.tasks.length+1);const s=new F;if(this.add(s,t),this.owner?this.owner.refreshDom(!0):this.refreshDom(!1),this.writeRootToLocalStorage(),e&&!O.currentlyEditing){s.currentlyEditing=!0,O.currentlyEditing=!0;const t=L(s);q.addInputCard(s,t)}}add(t,e){null==e&&(e=this.tasks.length),this.tasks.splice(e,0,t),t.supertaskList=this,t.updateDepth()}getTaskIdx(t){for(let e=0;e<this.tasks.length;e++)if(this.tasks[e].id==t.id)return e;return-1}removeId(t){for(let e=0;e<this.tasks.length;e++)if(this.tasks[e].id==t)return this.removeIdx(e);return!1}removeIdx(t){return this.tasks[t].supertaskList=null,this.tasks.splice(t,1),!0}getTaskById(t,e){let s=null;for(const i of this.tasks){if(i.id==t)return i;if(e&&i.subtaskList.hasTasks()&&(s=i.subtaskList.getTaskById(t,e),s))return s}return s}hasTasks(){return this.tasks.length>=1}getIdOrder(t){const e=[];for(const s of this.tasks)e.push(s.id),t&&e.push(...s.subtaskList.getIdOrder(t));return e}clear(){for(;this.tasks.length;)this.tasks[0].delete(!0)}refreshDom(t){this.tasks.forEach((e=>{e.domDiv&&(e.domDiv.task.remove(),t&&e.domDiv.subtasks.remove())})),this.tasks.forEach((e=>{e.refreshDom(t)}));for(let e=0;e<this.tasks.length;e++)this.tasks[e].refreshDom(t)}cloneJson(){const t=new $(null,null);t.expanded=this.expanded;for(const e of this.tasks){const s=e.clone(!1,null);t.add(s),s.id=e.id,s.depth=e.depth,s.dueDate=null,s.dueTime=null,s.subtaskList=e.subtaskList.cloneJson(),s.supertaskList=null}return t}initFromJson(t,e){this.owner=e,this.expanded=t.expanded,this.clear();for(const e of t.tasks){const t=new F(e.title,e.dueDateStr,e.dueTimeStr,e.description,e.priority,e.progress,e.notes,this,!1);t.expanded=e.expanded,t.useProgressFromSubtasks=e.useProgressFromSubtasks,t.subtaskList.initFromJson(e.subtaskList,t)}}writeToLocalStorage(t){if(P("localStorage")){t||(t=$.DEFAULT_KEY);const e=JSON.stringify(this.cloneJson());return localStorage.setItem(t,e),!0}return $.writeErrorShown||($.writeErrorShown=!0,alert("Your browser either doesn't support local storage or has it disabled, so your tasks will not be saved after leaving this page.")),!1}writeRootToLocalStorage(t){this.owner?this.root.writeToLocalStorage(t):this.writeToLocalStorage(t)}restoreFromLocalStorage(t){if(P("localStorage")){t||(t=$.DEFAULT_KEY);const e=localStorage.getItem(t);if(e){F.resetIds();const t=JSON.parse(e);return this.initFromJson(t),this.refreshDom(!0),this.hasTasks()&&g(),!0}}return!1}clearLocalStorage(t){P("localStorage")&&(t||(t=$.DEFAULT_KEY),localStorage.removeItem(t))}get root(){return this.owner?this.owner.chain.length?this.owner.chain[this.owner.chain.length-1].supertaskList:this.owner.supertaskList:this}}const O={currentlyEditing:!1,selectionAddTo:!1,selectionMass:!1,setSelectionAddTo:function(t,e){"Control"==e.key&&(O.selectionAddTo=t)},setSelectionMass:function(t,e){"Shift"==e.key&&(O.selectionMass=t)},touch:{time:[null,null],pos:[null,null],touchedId:[null,null]}},z=function(){const t=function(e,s){s||(s=""),console.log(s+"----------------"),console.log(s+"Title: "+e.title),console.log(s+"Due date: "+e.dueDate),console.log(s+"Due time: "+e.dueTime),console.log(s+"Description: "+e.description),console.log(s+"Progress: "+e.progress),console.log(s+"Notes:  "+e.notes),console.log(s+"ID: "+e.id),console.log(s+"Depth: "+e.depth),e.supertaskList&&e.supertaskList.owner?console.log(s+"Supertask: ("+e.supertaskList.owner.id+") "+e.supertaskList.owner.title):console.log(s+"No supertask"),e.subtaskList.hasTasks()&&(console.log(s+e.subtaskList.tasks.length+" subtask"+(1!=e.subtaskList.tasks.length?"s:":":")),e.subtaskList.tasks.forEach((e=>{t(e,s+"*   ")})))};return{logTask:t}}(),R=function(){const t=[],e=function(t){const e=[];for(const s of t){const i=s.chain;let n=!1;for(const e of t)if(i.includes(e)){n=!0;break}n||e.push(s)}return e},s=function(){t.splice(0,t.length)};return{buffer:t,remove:function(t,s,i){t instanceof Array||(t=[t]),s&&(t=e(t));const n=t[0].supertaskList.root;for(const e of t){let t=e.supertaskList.getTaskIdx(e);const n=e.supertaskList,r=e.subtaskList;if(e.delete(!0),!s)for(let e=0;e<r.tasks.length;e++)n.add(r.tasks[e],t++);i&&(n.owner?n.owner.refreshDom(!0):n.refreshDom(!0))}n.writeToLocalStorage()},copy:function(i,n,r){i instanceof Array||(i=[i]),s(),n&&(i=e(i));const o=r.getIdOrder(!0);i.sort((function(t,e){return o.indexOf(t.id)<o.indexOf(e.id)?-1:1}));for(const e of i)t.push(e.clone(n))},cut:function(t,e,s,i){t instanceof Array||(t=[t]),this.copy(t,e,i),this.remove(t,e,s)},paste:function(e,s){if(e instanceof F&&(e=e.subtaskList),s||(s=e.tasks.length),t.length){for(const i of t){const t=i.clone(!0,e,s++);t.assignNewIdRecursive(),t.updateDepth()}return e.owner?e.owner.refreshDom(!0):e.refreshDom(!0),e.writeRootToLocalStorage(),!0}return!1},clearBuffer:s}}(),Y=function(){const t=[],e=function(e){i(e)||(e.selected=!0,t.push(e),function(t){const e=l.querySelector(`.task.id-${t}`);e&&e.classList.add("selected")}(e.id))},s=function(){for(const e of t)e.selected=!1,y(e.id);t.splice(0,t.length)},i=function(e){return t.indexOf(e)>=0},n=function(t){if(O.selectionMass)if(Y.selected.length){const e=Z.getIdOrder(!0);let s=e.indexOf(Y.selected[0].id),i=e.indexOf(t.id);if(i<s){const t=s;s=i,i=t}Y.addExclusive(Y.selected[0]);for(let t=s;t<=i;t++)e[t]!=Y.selected[0].id&&Y.add(Z.getTaskById(e[t],!0))}else Y.addExclusive(t);else O.selectionAddTo?Y.contains(t)?Y.remove(t):Y.add(t):Y.addExclusive(t)},r=function(){Z.hasTasks()||l.querySelector(".instructions").classList.remove("hidden")},o=function(){Z.hasTasks()||g()};return{selected:t,add:e,addExclusive:function(t){s(),t.selected=!0,e(t)},remove:function(e){const s=t.indexOf(e);return s>=0&&(t.splice(s,1),e.selected=!1,y(e.id),!0)},clear:s,contains:i,updateSelection:n,triggerMenu:function(e,s,i,a){const u=Z.getTaskById(v(e,s),!0);u&&!t.includes(u)&&n(u);let d,c=null;a&&(c=["touch-menu"]),d=u&&Y.selected.length?function(t,e){b();const s=["New task (above)","New task (below)","New task (as subtask)","Copy (with subtasks)","Copy (without subtasks)","Cut (with subtasks)","Cut (without subtasks)"],i=[function(){t.supertaskList.createTask(t.supertaskList.getTaskIdx(t),!0)},function(){t.supertaskList.createTask(t.supertaskList.getTaskIdx(t)+1,!0)},function(){t.subtaskList.createTask(null,!0)},function(){R.copy(Y.selected,!0,Z)},function(){R.copy(Y.selected,!1,Z)},function(){R.cut(Y.selected,!0,!0,Z),Z.hasTasks()||r()},function(){R.cut(Y.selected,!1,!0,Z),Z.hasTasks()||r()}];return R.buffer.length&&(s.push("Paste (above)","Paste (below)","Paste (as subtask)"),i.push((function(){R.paste(t.supertaskList,t.supertaskList.getTaskIdx(t))}),(function(){R.paste(t.supertaskList,t.supertaskList.getTaskIdx(t)+1)}),(function(){R.paste(t.subtaskList)}))),s.push("Delete (with subtasks)","Delete (without subtasks)"),i.push((function(){R.remove(Y.selected,!0,!0),Z.hasTasks()||r()}),(function(){R.remove(Y.selected,!1,!0),Z.hasTasks()||r()})),new I(s,i,e)}(u,c):function(t){b();const e=["New task"],s=[function(){Z.hasTasks()||o(),Z.createTask(Z.tasks.length,!0)}];return R.buffer.length&&(e.push("Paste"),s.push((function(){Z.hasTasks()||o(),R.paste(Z,Z.tasks.length)}))),new I(e,s,t)}(c),document.querySelector("body").appendChild(d.svg),d.buttonDown(e,s)}}}(),q=function(){const t=function(t,e){e.progressCheck.addEventListener("change",(()=>{A(e.progressCheck,e.progressField)})),e.confirm.addEventListener("click",(()=>{t.currentlyEditing=!1,O.currentlyEditing=!1,t.title=e.titleInput.value,t.dueDateStr=e.dateInput.value,t.dueTimeStr=e.timeInput.value,t.updateDue(),t.description=e.descInput.value,t.priority=T(e.priorityField),t.useProgressFromSubtasks=e.progressCheck.checked,t.useProgressFromSubtasks?t.progress=t.getProgressRecursive():t.progress=T(e.progressField),t.notes=e.notesInput.value,e.cardInput.remove(),e.card.classList.remove("editing"),t.supertaskList.writeRootToLocalStorage(),t.refreshDom(!1),k()})),e.cancel.addEventListener("click",(()=>{t.currentlyEditing=!1,O.currentlyEditing=!1,e.cardInput.remove(),e.card.classList.remove("editing"),k()}))};return{addLeftClick:function(){document.addEventListener("click",(t=>{const e=Z.getTaskById(v(t.clientX,t.clientY),!0),s=document.elementsFromPoint(t.clientX,t.clientY);if(!O.currentlyEditing&&!t.target.classList.contains("input-button"))if(e)Y.updateSelection(e);else{let t=!0;for(const e of s)if(e.classList.contains("task-expand-img")||e.classList.contains("subtasks-plus-img")){t=!1;break}t&&Y.clear()}})),document.addEventListener("mouseup",(t=>{0!=t.button||O.currentlyEditing||k()})),document.addEventListener("touchstart",(t=>{O.touch.time.splice(0,1),O.touch.time.push((new Date).getTime()),O.touch.pos.splice(0,1),O.touch.pos.push({x:t.touches[0].clientX,y:t.touches[0].clientY}),!O.currentlyEditing&&O.touch.time[0]&&O.touch.time[1]-O.touch.time[0]<300&&Math.abs(O.touch.pos[1].x-O.touch.pos[0].x)<40&&Math.abs(O.touch.pos[1].y-O.touch.pos[0].y)<40&&Y.triggerMenu(O.touch.pos[1].x,O.touch.pos[1].y,O.selectionAddTo,!0),O.touch.touchedId.splice(0,1),O.touch.touchedId.push(v(t.touches[0].clientX,t.touches[0].clientY))}))},addRightClick:function(){document.addEventListener("contextmenu",(t=>{t.preventDefault()})),document.addEventListener("mousedown",(t=>{t.stopPropagation(),2!=t.button||O.currentlyEditing||Y.triggerMenu(t.clientX,t.clientY,O.selectionAddTo)}))},addModifierKeys:function(){document.addEventListener("keydown",(t=>{O.setSelectionAddTo.bind(O,!0,t)(),O.setSelectionMass.bind(O,!0,t)()})),document.addEventListener("keyup",(t=>{O.setSelectionAddTo.bind(O,!1,t)(),O.setSelectionMass.bind(O,!1,t)()}))},addClearData:function(){document.querySelector(".clear-data").addEventListener("click",(()=>{O.currentlyEditing||confirm("This will delete all saved data. Continue?")&&(Z.clear(),Z.clearLocalStorage())}))},addExpandSubtasks:function(t,e,s){t.addEventListener("click",(()=>{O.currentlyEditing||(e.subtaskList.expanded=!e.subtaskList.expanded,f(e.subtaskList.expanded,s,e,O.selectionAddTo))}))},addExpandTask:function(t,e,s,i,n){t.addEventListener("click",(()=>{O.currentlyEditing||(e.expanded=!e.expanded,p(i,s,e))})),n.addEventListener("mouseover",(t=>{const e=document.elementsFromPoint(t.clientX,t.clientY);for(const t of e)if(t.classList.contains("task-expand-img"))return n.classList.remove("hover-possible"),!1;return n.classList.add("hover-possible"),!0}))},addProgress:function(t,e){t.addEventListener("click",(()=>{O.currentlyEditing||(e.progress=Math.max((e.progress+1)%4,1),e.refreshDom(!1))}))},addOpenEdit:function(e,s){e.addEventListener("click",(e=>{if(!O.currentlyEditing)if("touch"==e.pointerType){if(s.selected&&O.touch.touchedId[0]==s.id){s.currentlyEditing=!0,O.currentlyEditing=!0;const e=L(s);t(s,e)}}else{s.currentlyEditing=!0,O.currentlyEditing=!0;const e=L(s);t(s,e)}}))},addInputCard:t}}(),Z=new $;Z.restoreFromLocalStorage(),q.addLeftClick(),q.addRightClick(),q.addModifierKeys(),q.addClearData()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bUwsRUFBT0csYUFDVCxHQUFJelksRUFBTXFOLFVBQVlrRixFQUFhb0MsTUFBTUcsVUFBVSxJQUFNOVUsRUFBTVcsR0FBSSxDQUNqRVgsRUFBTW1OLGtCQUFtQixFQUN6Qm9GLEVBQWFwRixrQkFBbUIsRUFDaEMsTUFBTXFGLEVBQVcsRUFBbUJ4UyxHQUNwQ3lTLEVBQWF6UyxFQUFPd1MsRUFDdEIsTUFDSyxDQUNMeFMsRUFBTW1OLGtCQUFtQixFQUN6Qm9GLEVBQWFwRixrQkFBbUIsRUFDaEMsTUFBTXFGLEVBQVcsRUFBbUJ4UyxHQUNwQ3lTLEVBQWF6UyxFQUFPd1MsRUFDdEIsQ0FDRixHQUVKLEVBb0RFQyxlQUVILENBL1BnQixHQWlRWDhELEVBQVcsSUFBSXRJLEVBQ3JCc0ksRUFBU3ZDLDBCQUVUN0MsRUFBU29HLGVBQ1RwRyxFQUFTeUcsZ0JBQ1R6RyxFQUFTNEcsa0JBQ1Q1RyxFQUFTOEcsYyIsInNvdXJjZXMiOlsid2VicGFjazovL2R1ZWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZWZvcm1hdC9saWIvZGF0ZWZvcm1hdC5qcyIsIndlYnBhY2s6Ly9kdWVsaXN0Ly4vc3JjL2RvbS5qcyIsIndlYnBhY2s6Ly9kdWVsaXN0Ly4vc3JjL3JpZ2h0LWNsaWNrLW1lbnUuanMiLCJ3ZWJwYWNrOi8vZHVlbGlzdC8uL3NyYy9zdG9yYWdlLWF2YWlsYWJsZS5qcyIsIndlYnBhY2s6Ly9kdWVsaXN0Ly4vc3JjL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly9kdWVsaXN0Ly4vc3JjL3RpbWV6b25lLXN0cmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9rZW49L2R7MSw0fXxEezMsNH18bXsxLDR9fHl5KD86eXkpP3woW0hoTXNUdF0pXFwxP3xXezEsMn18W0xsb3BTWk5dfFwiW15cIl0qXCJ8J1teJ10qJy9nO3ZhciB0aW1lem9uZT0vXFxiKD86W0EtWl17MSwzfVtBLVpdW1RDXSkoPzpbLStdXFxkezR9KT98KCg/OkF1c3RyYWxpYW4gKT8oPzpQYWNpZmljfE1vdW50YWlufENlbnRyYWx8RWFzdGVybnxBdGxhbnRpYykgKD86U3RhbmRhcmR8RGF5bGlnaHR8UHJldmFpbGluZykgVGltZSlcXGIvZzt2YXIgdGltZXpvbmVDbGlwPS9bXi0rXFxkQS1aXS9nO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGVGb3JtYXQoZGF0ZSxtYXNrLHV0YyxnbXQpe2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0xJiZ0eXBlb2YgZGF0ZT09PVwic3RyaW5nXCImJiEvXFxkLy50ZXN0KGRhdGUpKXttYXNrPWRhdGU7ZGF0ZT11bmRlZmluZWR9ZGF0ZT1kYXRlfHxkYXRlPT09MD9kYXRlOm5ldyBEYXRlO2lmKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKXtkYXRlPW5ldyBEYXRlKGRhdGUpfWlmKGlzTmFOKGRhdGUpKXt0aHJvdyBUeXBlRXJyb3IoXCJJbnZhbGlkIGRhdGVcIil9bWFzaz1TdHJpbmcobWFza3NbbWFza118fG1hc2t8fG1hc2tzW1wiZGVmYXVsdFwiXSk7dmFyIG1hc2tTbGljZT1tYXNrLnNsaWNlKDAsNCk7aWYobWFza1NsaWNlPT09XCJVVEM6XCJ8fG1hc2tTbGljZT09PVwiR01UOlwiKXttYXNrPW1hc2suc2xpY2UoNCk7dXRjPXRydWU7aWYobWFza1NsaWNlPT09XCJHTVQ6XCIpe2dtdD10cnVlfX12YXIgXz1mdW5jdGlvbiBfKCl7cmV0dXJuIHV0Yz9cImdldFVUQ1wiOlwiZ2V0XCJ9O3ZhciBfZD1mdW5jdGlvbiBkKCl7cmV0dXJuIGRhdGVbXygpK1wiRGF0ZVwiXSgpfTt2YXIgRD1mdW5jdGlvbiBEKCl7cmV0dXJuIGRhdGVbXygpK1wiRGF5XCJdKCl9O3ZhciBfbT1mdW5jdGlvbiBtKCl7cmV0dXJuIGRhdGVbXygpK1wiTW9udGhcIl0oKX07dmFyIHk9ZnVuY3Rpb24geSgpe3JldHVybiBkYXRlW18oKStcIkZ1bGxZZWFyXCJdKCl9O3ZhciBfSD1mdW5jdGlvbiBIKCl7cmV0dXJuIGRhdGVbXygpK1wiSG91cnNcIl0oKX07dmFyIF9NPWZ1bmN0aW9uIE0oKXtyZXR1cm4gZGF0ZVtfKCkrXCJNaW51dGVzXCJdKCl9O3ZhciBfcz1mdW5jdGlvbiBzKCl7cmV0dXJuIGRhdGVbXygpK1wiU2Vjb25kc1wiXSgpfTt2YXIgX0w9ZnVuY3Rpb24gTCgpe3JldHVybiBkYXRlW18oKStcIk1pbGxpc2Vjb25kc1wiXSgpfTt2YXIgX289ZnVuY3Rpb24gbygpe3JldHVybiB1dGM/MDpkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCl9O3ZhciBfVz1mdW5jdGlvbiBXKCl7cmV0dXJuIGdldFdlZWsoZGF0ZSl9O3ZhciBfTj1mdW5jdGlvbiBOKCl7cmV0dXJuIGdldERheU9mV2VlayhkYXRlKX07dmFyIGZsYWdzPXtkOmZ1bmN0aW9uIGQoKXtyZXR1cm4gX2QoKX0sZGQ6ZnVuY3Rpb24gZGQoKXtyZXR1cm4gcGFkKF9kKCkpfSxkZGQ6ZnVuY3Rpb24gZGRkKCl7cmV0dXJuIGkxOG4uZGF5TmFtZXNbRCgpXX0sREREOmZ1bmN0aW9uIERERCgpe3JldHVybiBnZXREYXlOYW1lKHt5OnkoKSxtOl9tKCksZDpfZCgpLF86XygpLGRheU5hbWU6aTE4bi5kYXlOYW1lc1tEKCldLHNob3J0OnRydWV9KX0sZGRkZDpmdW5jdGlvbiBkZGRkKCl7cmV0dXJuIGkxOG4uZGF5TmFtZXNbRCgpKzddfSxEREREOmZ1bmN0aW9uIEREREQoKXtyZXR1cm4gZ2V0RGF5TmFtZSh7eTp5KCksbTpfbSgpLGQ6X2QoKSxfOl8oKSxkYXlOYW1lOmkxOG4uZGF5TmFtZXNbRCgpKzddfSl9LG06ZnVuY3Rpb24gbSgpe3JldHVybiBfbSgpKzF9LG1tOmZ1bmN0aW9uIG1tKCl7cmV0dXJuIHBhZChfbSgpKzEpfSxtbW06ZnVuY3Rpb24gbW1tKCl7cmV0dXJuIGkxOG4ubW9udGhOYW1lc1tfbSgpXX0sbW1tbTpmdW5jdGlvbiBtbW1tKCl7cmV0dXJuIGkxOG4ubW9udGhOYW1lc1tfbSgpKzEyXX0seXk6ZnVuY3Rpb24geXkoKXtyZXR1cm4gU3RyaW5nKHkoKSkuc2xpY2UoMil9LHl5eXk6ZnVuY3Rpb24geXl5eSgpe3JldHVybiBwYWQoeSgpLDQpfSxoOmZ1bmN0aW9uIGgoKXtyZXR1cm4gX0goKSUxMnx8MTJ9LGhoOmZ1bmN0aW9uIGhoKCl7cmV0dXJuIHBhZChfSCgpJTEyfHwxMil9LEg6ZnVuY3Rpb24gSCgpe3JldHVybiBfSCgpfSxISDpmdW5jdGlvbiBISCgpe3JldHVybiBwYWQoX0goKSl9LE06ZnVuY3Rpb24gTSgpe3JldHVybiBfTSgpfSxNTTpmdW5jdGlvbiBNTSgpe3JldHVybiBwYWQoX00oKSl9LHM6ZnVuY3Rpb24gcygpe3JldHVybiBfcygpfSxzczpmdW5jdGlvbiBzcygpe3JldHVybiBwYWQoX3MoKSl9LGw6ZnVuY3Rpb24gbCgpe3JldHVybiBwYWQoX0woKSwzKX0sTDpmdW5jdGlvbiBMKCl7cmV0dXJuIHBhZChNYXRoLmZsb29yKF9MKCkvMTApKX0sdDpmdW5jdGlvbiB0KCl7cmV0dXJuIF9IKCk8MTI/aTE4bi50aW1lTmFtZXNbMF06aTE4bi50aW1lTmFtZXNbMV19LHR0OmZ1bmN0aW9uIHR0KCl7cmV0dXJuIF9IKCk8MTI/aTE4bi50aW1lTmFtZXNbMl06aTE4bi50aW1lTmFtZXNbM119LFQ6ZnVuY3Rpb24gVCgpe3JldHVybiBfSCgpPDEyP2kxOG4udGltZU5hbWVzWzRdOmkxOG4udGltZU5hbWVzWzVdfSxUVDpmdW5jdGlvbiBUVCgpe3JldHVybiBfSCgpPDEyP2kxOG4udGltZU5hbWVzWzZdOmkxOG4udGltZU5hbWVzWzddfSxaOmZ1bmN0aW9uIFooKXtyZXR1cm4gZ210P1wiR01UXCI6dXRjP1wiVVRDXCI6Zm9ybWF0VGltZXpvbmUoZGF0ZSl9LG86ZnVuY3Rpb24gbygpe3JldHVybihfbygpPjA/XCItXCI6XCIrXCIpK3BhZChNYXRoLmZsb29yKE1hdGguYWJzKF9vKCkpLzYwKSoxMDArTWF0aC5hYnMoX28oKSklNjAsNCl9LHA6ZnVuY3Rpb24gcCgpe3JldHVybihfbygpPjA/XCItXCI6XCIrXCIpK3BhZChNYXRoLmZsb29yKE1hdGguYWJzKF9vKCkpLzYwKSwyKStcIjpcIitwYWQoTWF0aC5mbG9vcihNYXRoLmFicyhfbygpKSU2MCksMil9LFM6ZnVuY3Rpb24gUygpe3JldHVybltcInRoXCIsXCJzdFwiLFwibmRcIixcInJkXCJdW19kKCklMTA+Mz8wOihfZCgpJTEwMC1fZCgpJTEwIT0xMCkqX2QoKSUxMF19LFc6ZnVuY3Rpb24gVygpe3JldHVybiBfVygpfSxXVzpmdW5jdGlvbiBXVygpe3JldHVybiBwYWQoX1coKSl9LE46ZnVuY3Rpb24gTigpe3JldHVybiBfTigpfX07cmV0dXJuIG1hc2sucmVwbGFjZSh0b2tlbixmdW5jdGlvbihtYXRjaCl7aWYobWF0Y2ggaW4gZmxhZ3Mpe3JldHVybiBmbGFnc1ttYXRjaF0oKX1yZXR1cm4gbWF0Y2guc2xpY2UoMSxtYXRjaC5sZW5ndGgtMSl9KX1leHBvcnQgdmFyIG1hc2tzPXtkZWZhdWx0OlwiZGRkIG1tbSBkZCB5eXl5IEhIOk1NOnNzXCIsc2hvcnREYXRlOlwibS9kL3l5XCIscGFkZGVkU2hvcnREYXRlOlwibW0vZGQveXl5eVwiLG1lZGl1bURhdGU6XCJtbW0gZCwgeXl5eVwiLGxvbmdEYXRlOlwibW1tbSBkLCB5eXl5XCIsZnVsbERhdGU6XCJkZGRkLCBtbW1tIGQsIHl5eXlcIixzaG9ydFRpbWU6XCJoOk1NIFRUXCIsbWVkaXVtVGltZTpcImg6TU06c3MgVFRcIixsb25nVGltZTpcImg6TU06c3MgVFQgWlwiLGlzb0RhdGU6XCJ5eXl5LW1tLWRkXCIsaXNvVGltZTpcIkhIOk1NOnNzXCIsaXNvRGF0ZVRpbWU6XCJ5eXl5LW1tLWRkJ1QnSEg6TU06c3NvXCIsaXNvVXRjRGF0ZVRpbWU6XCJVVEM6eXl5eS1tbS1kZCdUJ0hIOk1NOnNzJ1onXCIsZXhwaXJlc0hlYWRlckZvcm1hdDpcImRkZCwgZGQgbW1tIHl5eXkgSEg6TU06c3MgWlwifTtleHBvcnQgdmFyIGkxOG49e2RheU5hbWVzOltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiLFwiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl0sbW9udGhOYW1lczpbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCIsXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl0sdGltZU5hbWVzOltcImFcIixcInBcIixcImFtXCIsXCJwbVwiLFwiQVwiLFwiUFwiLFwiQU1cIixcIlBNXCJdfTt2YXIgcGFkPWZ1bmN0aW9uIHBhZCh2YWwpe3ZhciBsZW49YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOjI7cmV0dXJuIFN0cmluZyh2YWwpLnBhZFN0YXJ0KGxlbixcIjBcIil9O3ZhciBnZXREYXlOYW1lPWZ1bmN0aW9uIGdldERheU5hbWUoX3JlZil7dmFyIHk9X3JlZi55LG09X3JlZi5tLGQ9X3JlZi5kLF89X3JlZi5fLGRheU5hbWU9X3JlZi5kYXlOYW1lLF9yZWYkc2hvcnQ9X3JlZltcInNob3J0XCJdLF9zaG9ydD1fcmVmJHNob3J0PT09dm9pZCAwP2ZhbHNlOl9yZWYkc2hvcnQ7dmFyIHRvZGF5PW5ldyBEYXRlO3ZhciB5ZXN0ZXJkYXk9bmV3IERhdGU7eWVzdGVyZGF5LnNldERhdGUoeWVzdGVyZGF5W18rXCJEYXRlXCJdKCktMSk7dmFyIHRvbW9ycm93PW5ldyBEYXRlO3RvbW9ycm93LnNldERhdGUodG9tb3Jyb3dbXytcIkRhdGVcIl0oKSsxKTt2YXIgdG9kYXlfZD1mdW5jdGlvbiB0b2RheV9kKCl7cmV0dXJuIHRvZGF5W18rXCJEYXRlXCJdKCl9O3ZhciB0b2RheV9tPWZ1bmN0aW9uIHRvZGF5X20oKXtyZXR1cm4gdG9kYXlbXytcIk1vbnRoXCJdKCl9O3ZhciB0b2RheV95PWZ1bmN0aW9uIHRvZGF5X3koKXtyZXR1cm4gdG9kYXlbXytcIkZ1bGxZZWFyXCJdKCl9O3ZhciB5ZXN0ZXJkYXlfZD1mdW5jdGlvbiB5ZXN0ZXJkYXlfZCgpe3JldHVybiB5ZXN0ZXJkYXlbXytcIkRhdGVcIl0oKX07dmFyIHllc3RlcmRheV9tPWZ1bmN0aW9uIHllc3RlcmRheV9tKCl7cmV0dXJuIHllc3RlcmRheVtfK1wiTW9udGhcIl0oKX07dmFyIHllc3RlcmRheV95PWZ1bmN0aW9uIHllc3RlcmRheV95KCl7cmV0dXJuIHllc3RlcmRheVtfK1wiRnVsbFllYXJcIl0oKX07dmFyIHRvbW9ycm93X2Q9ZnVuY3Rpb24gdG9tb3Jyb3dfZCgpe3JldHVybiB0b21vcnJvd1tfK1wiRGF0ZVwiXSgpfTt2YXIgdG9tb3Jyb3dfbT1mdW5jdGlvbiB0b21vcnJvd19tKCl7cmV0dXJuIHRvbW9ycm93W18rXCJNb250aFwiXSgpfTt2YXIgdG9tb3Jyb3dfeT1mdW5jdGlvbiB0b21vcnJvd195KCl7cmV0dXJuIHRvbW9ycm93W18rXCJGdWxsWWVhclwiXSgpfTtpZih0b2RheV95KCk9PT15JiZ0b2RheV9tKCk9PT1tJiZ0b2RheV9kKCk9PT1kKXtyZXR1cm4gX3Nob3J0P1wiVGR5XCI6XCJUb2RheVwifWVsc2UgaWYoeWVzdGVyZGF5X3koKT09PXkmJnllc3RlcmRheV9tKCk9PT1tJiZ5ZXN0ZXJkYXlfZCgpPT09ZCl7cmV0dXJuIF9zaG9ydD9cIllzZFwiOlwiWWVzdGVyZGF5XCJ9ZWxzZSBpZih0b21vcnJvd195KCk9PT15JiZ0b21vcnJvd19tKCk9PT1tJiZ0b21vcnJvd19kKCk9PT1kKXtyZXR1cm4gX3Nob3J0P1wiVG13XCI6XCJUb21vcnJvd1wifXJldHVybiBkYXlOYW1lfTt2YXIgZ2V0V2Vlaz1mdW5jdGlvbiBnZXRXZWVrKGRhdGUpe3ZhciB0YXJnZXRUaHVyc2RheT1uZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksZGF0ZS5nZXRNb250aCgpLGRhdGUuZ2V0RGF0ZSgpKTt0YXJnZXRUaHVyc2RheS5zZXREYXRlKHRhcmdldFRodXJzZGF5LmdldERhdGUoKS0odGFyZ2V0VGh1cnNkYXkuZ2V0RGF5KCkrNiklNyszKTt2YXIgZmlyc3RUaHVyc2RheT1uZXcgRGF0ZSh0YXJnZXRUaHVyc2RheS5nZXRGdWxsWWVhcigpLDAsNCk7Zmlyc3RUaHVyc2RheS5zZXREYXRlKGZpcnN0VGh1cnNkYXkuZ2V0RGF0ZSgpLShmaXJzdFRodXJzZGF5LmdldERheSgpKzYpJTcrMyk7dmFyIGRzPXRhcmdldFRodXJzZGF5LmdldFRpbWV6b25lT2Zmc2V0KCktZmlyc3RUaHVyc2RheS5nZXRUaW1lem9uZU9mZnNldCgpO3RhcmdldFRodXJzZGF5LnNldEhvdXJzKHRhcmdldFRodXJzZGF5LmdldEhvdXJzKCktZHMpO3ZhciB3ZWVrRGlmZj0odGFyZ2V0VGh1cnNkYXktZmlyc3RUaHVyc2RheSkvKDg2NGU1KjcpO3JldHVybiAxK01hdGguZmxvb3Iod2Vla0RpZmYpfTt2YXIgZ2V0RGF5T2ZXZWVrPWZ1bmN0aW9uIGdldERheU9mV2VlayhkYXRlKXt2YXIgZG93PWRhdGUuZ2V0RGF5KCk7aWYoZG93PT09MCl7ZG93PTd9cmV0dXJuIGRvd307ZXhwb3J0IHZhciBmb3JtYXRUaW1lem9uZT1mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShkYXRlKXtyZXR1cm4oU3RyaW5nKGRhdGUpLm1hdGNoKHRpbWV6b25lKXx8W1wiXCJdKS5wb3AoKS5yZXBsYWNlKHRpbWV6b25lQ2xpcCxcIlwiKS5yZXBsYWNlKC9HTVRcXCswMDAwL2csXCJVVENcIil9OyIsImltcG9ydCBkYXRlRm9ybWF0IGZyb20gXCJkYXRlZm9ybWF0XCI7XG5cbmNvbnN0IHRhc2tCaW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stYmluXCIpO1xuY29uc3QgcHJpb3JpdHlMaXN0ID0gW1wiTi9BXCIsIFwiVW5pbXBvcnRhbnRcIiwgXCJJbXBvcnRhbnRcIiwgXCJVcmdlbnRcIl07XG5jb25zdCBwcm9ncmVzc0xpc3QgPSBbXCJOL0FcIiwgXCJOb3Qgc3RhcnRlZFwiLCBcIkluIHByb2dyZXNzXCIsIFwiQ29tcGxldGVcIl07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYXJkKF90YXNrKSB7XG4gIGxldCBzdXBlcnRhc2tEaXYgPSBudWxsO1xuICBjb25zdCBzdXBlcnRhc2sgPSBfdGFzay5zdXBlcnRhc2s7XG4gIGxldCBuZWlnaGJvcklkeCA9IC0xO1xuXG4gIGlmIChfdGFzay5zdXBlcnRhc2tMaXN0KSB7XG4gICAgbmVpZ2hib3JJZHggPSBfdGFzay5zdXBlcnRhc2tMaXN0LmdldFRhc2tJZHgoX3Rhc2spICsgMTtcbiAgfVxuXG4gIGxldCBuZWlnaGJvcklkID0gLTE7XG4gIGxldCBuZWlnaGJvckRpdiA9IG51bGw7XG5cbiAgaWYgKG5laWdoYm9ySWR4ID4gMCAmJiBuZWlnaGJvcklkeCA8IF90YXNrLnN1cGVydGFza0xpc3QudGFza3MubGVuZ3RoKSB7XG4gICAgbmVpZ2hib3JJZCA9IF90YXNrLnN1cGVydGFza0xpc3QudGFza3NbbmVpZ2hib3JJZHhdLmlkO1xuICAgIG5laWdoYm9yRGl2ID0gdGFza0Jpbi5xdWVyeVNlbGVjdG9yKGAudGFzay5pZC0ke25laWdoYm9ySWR9YCk7XG4gIH1cblxuICBpZiAoc3VwZXJ0YXNrKSB7XG4gICAgc3VwZXJ0YXNrRGl2ID0gdGFza0Jpbi5xdWVyeVNlbGVjdG9yKGAuc3VidGFza3MuaWQtJHtzdXBlcnRhc2suaWR9YCk7XG4gIH0gZWxzZSB7XG4gICAgc3VwZXJ0YXNrRGl2ID0gdGFza0JpbjtcbiAgfVxuXG4gIGNvbnN0IGluZGVudFN0ciA9IGBtYXJnaW4tbGVmdDogY2FsYyhjYWxjKHZhcigtLWNhcmQtaW5kZW50KSAqICR7X3Rhc2suZGVwdGh9KSArIGNhbGModmFyKC0tY2FyZC1tYXJnaW4pICogMC41KSlgO1xuICBjb25zdCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY2FyZC5jbGFzc0xpc3QuYWRkKFwidGFza1wiLCBgaWQtJHtfdGFzay5pZH1gKTtcbiAgY2FyZC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBpbmRlbnRTdHIpO1xuXG4gIGlmIChfdGFzay5zZWxlY3RlZCkge1xuICAgIGNhcmQuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuICB9XG5cbiAgaWYgKG5laWdoYm9yRGl2KSB7XG4gICAgbmVpZ2hib3JEaXYuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlYmVnaW5cIiwgY2FyZCk7XG4gIH0gZWxzZSB7XG4gICAgc3VwZXJ0YXNrRGl2LmFwcGVuZENoaWxkKGNhcmQpO1xuICB9XG5cbiAgY29uc3QgaERpdiA9IGNyZWF0ZUFwcGVuZChcImRpdlwiLCBcImNhcmQtaGVhZGVyLWRpdlwiLCBjYXJkKTtcbiAgY29uc3QgdGl0bGVDb250YWluZXIgPSBjcmVhdGVBcHBlbmQoXCJkaXZcIiwgXCJjYXJkLXRpdGxlLWNvbnRhaW5lclwiLCBoRGl2KTtcblxuICBpZiAoX3Rhc2sucHJpb3JpdHkpIHtcbiAgICB0aXRsZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVQcmlvcml0eVN2ZyhfdGFzay5wcmlvcml0eSkpO1xuICB9XG5cbiAgbGV0IHByb2dyZXNzU3ZnID0gbnVsbDtcbiAgaWYgKF90YXNrLnByb2dyZXNzKSB7XG4gICAgcHJvZ3Jlc3NTdmcgPSBjcmVhdGVQcm9ncmVzc1N2ZyhfdGFzay5wcm9ncmVzcyk7XG4gICAgdGl0bGVDb250YWluZXIuYXBwZW5kQ2hpbGQocHJvZ3Jlc3NTdmcpO1xuICB9XG5cbiAgY3JlYXRlQXBwZW5kKFxuICAgIFwiaDJcIixcbiAgICBbXCJjYXJkLXRpdGxlXCIsIFwiY2FyZC1lZGl0YWJsZVwiXSxcbiAgICB0aXRsZUNvbnRhaW5lcixcbiAgICBfdGFzay50aXRsZVxuICApO1xuICBjb25zdCBlZGl0QnV0dG9uID0gY3JlYXRlQXBwZW5kKFxuICAgIFwiYnV0dG9uXCIsXG4gICAgW1wiYnV0dG9uXCIsIFwiZWRpdC10YXNrLWJ1dHRvblwiXSxcbiAgICBoRGl2XG4gICk7XG4gIGVkaXRCdXR0b24uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICBjcmVhdGVBcHBlbmQoXG4gICAgY3JlYXRlU3ZnKFxuICAgICAgXCJNMTIsMkM2LjQ3LDIgMiw2LjQ3IDIsMTJDMiwxNy41MyA2LjQ3LDIyIDEyLDIyQzE3LjUzLDIyIDIyLDE3LjUzIDIyLDEyQzIyLDYuNDcgMTcuNTMsMiAxMiwyTTE1LjEsNy4wN0MxNS4yNCw3LjA3IDE1LjM4LDcuMTIgMTUuNSw3LjIzTDE2Ljc3LDguNUMxNyw4LjcyIDE3LDkuMDcgMTYuNzcsOS4yOEwxNS43NywxMC4yOEwxMy43Miw4LjIzTDE0LjcyLDcuMjNDMTQuODIsNy4xMiAxNC45Niw3LjA3IDE1LjEsNy4wN00xMy4xMyw4LjgxTDE1LjE5LDEwLjg3TDkuMTMsMTYuOTNINy4wN1YxNC44N0wxMy4xMyw4LjgxWlwiLFxuICAgICAgXCJFZGl0IHRhc2tcIixcbiAgICAgIHRydWVcbiAgICApLFxuICAgIFwiZWRpdC10YXNrLWltZ1wiLFxuICAgIGVkaXRCdXR0b25cbiAgKTtcblxuICBpZiAoX3Rhc2suZHVlRGF0ZSkge1xuICAgIGNyZWF0ZUFwcGVuZChcbiAgICAgIFwiZGl2XCIsXG4gICAgICBbXCJjYXJkLWR1ZS1kYXRlXCIsIFwiY2FyZC1lZGl0YWJsZVwiXSxcbiAgICAgIGhEaXYsXG4gICAgICBgJHtkYXRlRm9ybWF0KF90YXNrLmR1ZURhdGUsIFwiZGRkZCwgbW1tbSBkUywgeXl5eVwiKX1gXG4gICAgKTtcbiAgfVxuXG4gIGlmIChfdGFzay5kdWVUaW1lKSB7XG4gICAgY3JlYXRlQXBwZW5kKFxuICAgICAgXCJkaXZcIixcbiAgICAgIFtcImNhcmQtZHVlLXRpbWVcIiwgXCJjYXJkLWVkaXRhYmxlXCJdLFxuICAgICAgaERpdixcbiAgICAgIGAke2RhdGVGb3JtYXQoX3Rhc2suZHVlVGltZSwgXCJoOk1NIFRUXCIpfWBcbiAgICApO1xuICB9XG5cbiAgY29uc3QgZXhwYW5kQnV0dG9uID0gY3JlYXRlQXBwZW5kKFxuICAgIFwiYnV0dG9uXCIsXG4gICAgW1wiYnV0dG9uXCIsIFwidGFzay1leHBhbmQtYnV0dG9uXCJdLFxuICAgIGhEaXZcbiAgKTtcbiAgZXhwYW5kQnV0dG9uLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgY29uc3QgdGFza0V4cGFuZFN2ZyA9IGNyZWF0ZUFwcGVuZChcbiAgICBjcmVhdGVTdmcoXCJcIiwgXCJFeHBhbmRcIiwgdHJ1ZSksXG4gICAgXCJ0YXNrLWV4cGFuZC1pbWdcIixcbiAgICBleHBhbmRCdXR0b25cbiAgKTtcblxuICBpZiAoIV90YXNrLmhhc0NvbnRlbnQoKSkge1xuICAgIGV4cGFuZEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICB9XG5cbiAgY29uc3QgdGFza0V4cGFuZFBhdGggPSB0YXNrRXhwYW5kU3ZnLnF1ZXJ5U2VsZWN0b3IoXCJwYXRoOm5vdCguYmctaW1nKVwiKTtcbiAgdXBkYXRlVGFza0V4cGFuZFZpZXcodGFza0V4cGFuZFBhdGgsIGNhcmQsIF90YXNrKTtcblxuICBpZiAoX3Rhc2sucHJpb3JpdHkgPiAwIHx8IF90YXNrLnByb2dyZXNzID4gMCkge1xuICAgIGNvbnN0IGluZm9Db250YWluZXIgPSBjcmVhdGVBcHBlbmQoXCJkaXZcIiwgXCJpbmZvLWNvbnRhaW5lclwiLCBjYXJkKTtcblxuICAgIGlmIChfdGFzay5wcmlvcml0eSA+IDApIHtcbiAgICAgIGNvbnN0IHByaW9yaXR5Q29udGFpbmVyID0gY3JlYXRlQXBwZW5kKFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICBcImNhcmQtY29udGFpbmVyXCIsXG4gICAgICAgIGluZm9Db250YWluZXJcbiAgICAgICk7XG4gICAgICBjcmVhdGVBcHBlbmQoXCJkaXZcIiwgXCJjYXJkLWxhYmVsXCIsIHByaW9yaXR5Q29udGFpbmVyLCBcIlByaW9yaXR5XCIpO1xuICAgICAgY3JlYXRlQXBwZW5kKFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICBbXCJjYXJkLXByaW9yaXR5XCIsIFwiY2FyZC1lZGl0YWJsZVwiXSxcbiAgICAgICAgcHJpb3JpdHlDb250YWluZXIsXG4gICAgICAgIHByaW9yaXR5TGlzdFtfdGFzay5wcmlvcml0eV1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKF90YXNrLnByb2dyZXNzID4gMCB8fCBfdGFzay51c2VQcm9ncmVzc0Zyb21TdWJ0YXNrcykge1xuICAgICAgY29uc3QgcHJvZ3Jlc3NDb250YWluZXIgPSBjcmVhdGVBcHBlbmQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIFwiY2FyZC1jb250YWluZXJcIixcbiAgICAgICAgaW5mb0NvbnRhaW5lclxuICAgICAgKTtcbiAgICAgIGNyZWF0ZUFwcGVuZChcImRpdlwiLCBcImNhcmQtbGFiZWxcIiwgcHJvZ3Jlc3NDb250YWluZXIsIFwiUHJvZ3Jlc3NcIik7XG4gICAgICBjb25zdCBwcm9nID0gY3JlYXRlQXBwZW5kKFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICBbXCJjYXJkLXByb2dyZXNzXCIsIFwiY2FyZC1lZGl0YWJsZVwiXSxcbiAgICAgICAgcHJvZ3Jlc3NDb250YWluZXIsXG4gICAgICAgIHByb2dyZXNzTGlzdFtfdGFzay5wcm9ncmVzc11cbiAgICAgICk7XG5cbiAgICAgIGlmIChfdGFzay51c2VQcm9ncmVzc0Zyb21TdWJ0YXNrcykge1xuICAgICAgICBwcm9nLnRleHRDb250ZW50ICs9IFwiIChmcm9tIHN1YnRhc2tzKVwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChfdGFzay5kZXNjcmlwdGlvbi5sZW5ndGgpIHtcbiAgICBjb25zdCBkZXNjQ29udGFpbmVyID0gY3JlYXRlQXBwZW5kKFwiZGl2XCIsIFwiY2FyZC1jb250YWluZXJcIiwgY2FyZCk7XG4gICAgY3JlYXRlQXBwZW5kKFxuICAgICAgXCJkaXZcIixcbiAgICAgIFtcImNhcmQtZGVzY3JpcHRpb25cIiwgXCJjYXJkLWNvbnRlbnRcIiwgXCJjYXJkLWVkaXRhYmxlXCJdLFxuICAgICAgZGVzY0NvbnRhaW5lcixcbiAgICAgIF90YXNrLmRlc2NyaXB0aW9uXG4gICAgKTtcbiAgICBjcmVhdGVBcHBlbmQoXCJkaXZcIiwgXCJjYXJkLWxhYmVsXCIsIGRlc2NDb250YWluZXIsIFwiQWJvdXRcIik7XG4gIH1cblxuICBsZXQgc3VidGFza3NCdXR0b247XG5cbiAgaWYgKF90YXNrLm5vdGVzLmxlbmd0aCkge1xuICAgIGNvbnN0IG5vdGVzQ29udGFpbmVyID0gY3JlYXRlQXBwZW5kKFwiZGl2XCIsIFwiY2FyZC1jb250YWluZXJcIiwgY2FyZCk7XG4gICAgY3JlYXRlQXBwZW5kKFxuICAgICAgXCJkaXZcIixcbiAgICAgIFtcImNhcmQtbm90ZXNcIiwgXCJjYXJkLWNvbnRlbnRcIiwgXCJjYXJkLWVkaXRhYmxlXCJdLFxuICAgICAgbm90ZXNDb250YWluZXIsXG4gICAgICBfdGFzay5ub3Rlc1xuICAgICk7XG4gICAgY3JlYXRlQXBwZW5kKFwiZGl2XCIsIFwiY2FyZC1sYWJlbFwiLCBub3Rlc0NvbnRhaW5lciwgXCJOb3Rlc1wiKTtcbiAgfVxuXG4gIGxldCBzdWJ0YXNrcyA9IHRhc2tCaW4ucXVlcnlTZWxlY3RvcihgLnN1YnRhc2tzLmlkLSR7X3Rhc2suaWR9YCk7XG4gIGxldCBuZWVkU3VidGFza3NMaXN0ZW5lciA9IGZhbHNlO1xuXG4gIGlmICghc3VidGFza3MpIHtcbiAgICBuZWVkU3VidGFza3NMaXN0ZW5lciA9IHRydWU7XG4gICAgc3VidGFza3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNhcmQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJlbmRcIiwgc3VidGFza3MpO1xuICAgIHN1YnRhc2tzLmNsYXNzTGlzdC5hZGQoXCJzdWJ0YXNrc1wiLCBgaWQtJHtfdGFzay5pZH1gKTtcblxuICAgIHN1YnRhc2tzQnV0dG9uID0gY3JlYXRlQXBwZW5kKFxuICAgICAgXCJidXR0b25cIixcbiAgICAgIFtcInN1YnRhc2tzLWJ1dHRvblwiLCBcImJ1dHRvblwiLCBgaWQtJHtfdGFzay5pZH1gXSxcbiAgICAgIHN1YnRhc2tzXG4gICAgKTtcbiAgICBzdWJ0YXNrc0J1dHRvbi5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBpbmRlbnRTdHIpO1xuXG4gICAgaWYgKCFfdGFzay5zdWJ0YXNrcy5sZW5ndGgpIHtcbiAgICAgIHN1YnRhc2tzQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YnRhc2tzQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgfVxuXG4gICAgY3JlYXRlQXBwZW5kKFxuICAgICAgY3JlYXRlU3ZnKFwiXCIsIFwiU3VidGFza3NcIiwgdHJ1ZSksXG4gICAgICBcInN1YnRhc2tzLXBsdXMtaW1nXCIsXG4gICAgICBzdWJ0YXNrc0J1dHRvblxuICAgICk7XG5cbiAgICBzZXRTdWJ0YXNrRXhwYW5kVmlldyhfdGFzay5zdWJ0YXNrTGlzdC5leHBhbmRlZCwgc3VidGFza3MsIF90YXNrLCBmYWxzZSk7XG5cbiAgICBjcmVhdGVBcHBlbmQoXG4gICAgICBcImRpdlwiLFxuICAgICAgW1wic3VidGFza3MtdGV4dFwiLCBgaWQtJHtfdGFzay5pZH1gXSxcbiAgICAgIHN1YnRhc2tzQnV0dG9uLFxuICAgICAgYCR7X3Rhc2suc3VidGFza3MubGVuZ3RofSBcbiAgICAgICAgICAgICR7X3Rhc2suc3VidGFza3MubGVuZ3RoID09IDEgPyBcInN1YnRhc2tcIiA6IFwic3VidGFza3NcIn1gXG4gICAgKTtcbiAgICBzdWJ0YXNrc0J1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gIH0gZWxzZSB7XG4gICAgc3VidGFza3MucmVtb3ZlKCk7XG4gICAgY2FyZC5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmVuZFwiLCBzdWJ0YXNrcyk7XG4gICAgc3VidGFza3NCdXR0b24gPSBzdWJ0YXNrcy5xdWVyeVNlbGVjdG9yKFwiLnN1YnRhc2tzLWJ1dHRvblwiKTtcblxuICAgIGlmICghX3Rhc2suc3VidGFza3MubGVuZ3RoKSB7XG4gICAgICBzdWJ0YXNrc0J1dHRvbi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJ0YXNrc0J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHN1YnRhc2tzVGV4dCA9IHN1YnRhc2tzLnF1ZXJ5U2VsZWN0b3IoXCIuc3VidGFza3MtdGV4dFwiKTtcbiAgICBzdWJ0YXNrc1RleHQudGV4dENvbnRlbnQgPSBgJHtfdGFzay5zdWJ0YXNrcy5sZW5ndGh9IFxuICAgICAgICAgICAgJHtfdGFzay5zdWJ0YXNrcy5sZW5ndGggPT0gMSA/IFwic3VidGFza1wiIDogXCJzdWJ0YXNrc1wifWA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRhc2s6IGNhcmQsXG4gICAgc3VidGFza3M6IHN1YnRhc2tzLFxuICAgIHN1YnRhc2tzRXhwYW5kOiBzdWJ0YXNrc0J1dHRvbixcbiAgICBuZWVkU3VidGFza3NMaXN0ZW5lcixcbiAgICB0YXNrRXhwYW5kOiBleHBhbmRCdXR0b24sXG4gICAgdGFza0V4cGFuZFBhdGg6IHRhc2tFeHBhbmRQYXRoLFxuICAgIGhlYWRlcjogaERpdixcbiAgICBlZGl0T3BlbjogZWRpdEJ1dHRvbixcbiAgICBwcm9ncmVzc1N2ZyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dJbnN0cnVjdGlvbnMoKSB7XG4gIGNvbnN0IGluc3QgPSB0YXNrQmluLnF1ZXJ5U2VsZWN0b3IoXCIuaW5zdHJ1Y3Rpb25zXCIpO1xuICBpbnN0LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoaWRlSW5zdHJ1Y3Rpb25zKCkge1xuICBjb25zdCBpbnN0ID0gdGFza0Jpbi5xdWVyeVNlbGVjdG9yKFwiLmluc3RydWN0aW9uc1wiKTtcbiAgaW5zdC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVGFza0V4cGFuZFZpZXcoX3N2Z1BhdGgsIF9jYXJkLCBfdGFzaykge1xuICBleHBhbmRDYXJkKF90YXNrLCBfY2FyZCk7XG5cbiAgaWYgKF90YXNrLmV4cGFuZGVkKSB7XG4gICAgX3N2Z1BhdGguc2V0QXR0cmlidXRlKFxuICAgICAgXCJkXCIsXG4gICAgICBcIk0xMiwyMkExMCwxMCAwIDAsMSAyLDEyQTEwLDEwIDAgMCwxIDEyLDJBMTAsMTAgMCAwLDEgMjIsMTJBMTAsMTAgMCAwLDEgMTIsMjJNMTcsMTRMMTIsOUw3LDE0SDE3WlwiXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBfc3ZnUGF0aC5zZXRBdHRyaWJ1dGUoXG4gICAgICBcImRcIixcbiAgICAgIFwiTTEyLDJBMTAsMTAgMCAwLDEgMjIsMTJBMTAsMTAgMCAwLDEgMTIsMjJBMTAsMTAgMCAwLDEgMiwxMkExMCwxMCAwIDAsMSAxMiwyTTcsMTBMMTIsMTVMMTcsMTBIN1pcIlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFN1YnRhc2tFeHBhbmRWaWV3KF9leHBhbmRlZCwgX2NhcmQsIF90YXNrLCBfcmVjdXJzaXZlKSB7XG4gIGNvbnN0IHN1YnRhc2tzUGx1c1BhdGggPSBfY2FyZC5xdWVyeVNlbGVjdG9yKFxuICAgIFwiLnN1YnRhc2tzLXBsdXMtaW1nID4gcGF0aDpub3QoLmJnLWltZylcIlxuICApO1xuICBfdGFzay5zdWJ0YXNrTGlzdC5leHBhbmRlZCA9IF9leHBhbmRlZDtcbiAgZXhwYW5kQ2FyZChfdGFzay5zdWJ0YXNrTGlzdCwgX2NhcmQpO1xuXG4gIGlmIChfdGFzay5zdWJ0YXNrTGlzdC5leHBhbmRlZCkge1xuICAgIHN1YnRhc2tzUGx1c1BhdGguc2V0QXR0cmlidXRlKFxuICAgICAgXCJkXCIsXG4gICAgICBcIk0xNywxM0g3VjExSDE3TTEyLDJBMTAsMTAgMCAwLDAgMiwxMkExMCwxMCAwIDAsMCAxMiwyMkExMCwxMCAwIDAsMCAyMiwxMkExMCwxMCAwIDAsMCAxMiwyWlwiXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBzdWJ0YXNrc1BsdXNQYXRoLnNldEF0dHJpYnV0ZShcbiAgICAgIFwiZFwiLFxuICAgICAgXCJNMTcsMTNIMTNWMTdIMTFWMTNIN1YxMUgxMVY3SDEzVjExSDE3TTEyLDJBMTAsMTAgMCAwLDAgMiwxMkExMCwxMCAwIDAsMCAxMiwyMkExMCwxMCAwIDAsMCAyMiwxMkExMCwxMCAwIDAsMCAxMiwyWlwiXG4gICAgKTtcbiAgfVxuXG4gIGlmIChfcmVjdXJzaXZlKSB7XG4gICAgZm9yIChjb25zdCB0YXNrIG9mIF90YXNrLnN1YnRhc2tMaXN0LnRhc2tzKSB7XG4gICAgICBjb25zdCBzdWJjYXJkID0gX2NhcmQucXVlcnlTZWxlY3RvcihgLnN1YnRhc2tzLmlkLSR7dGFzay5pZH1gKTtcbiAgICAgIHNldFN1YnRhc2tFeHBhbmRWaWV3KF9leHBhbmRlZCwgc3ViY2FyZCwgdGFzaywgX3JlY3Vyc2l2ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcmVlemUoKSB7XG4gIHRhc2tCaW4uY2xhc3NMaXN0LmFkZChcImZyZWV6ZVwiKTtcbiAgY29uc3QgZm9jdXNhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW3RhYmluZGV4PVwiMFwiXTpub3QoYm9keSknKTtcbiAgZm9yIChjb25zdCBlbGVtIG9mIGZvY3VzYWJsZSkge1xuICAgIGVsZW0uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCItMVwiKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhhdygpIHtcbiAgdGFza0Jpbi5jbGFzc0xpc3QucmVtb3ZlKFwiZnJlZXplXCIpO1xuICBjb25zdCBmb2N1c2FibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbdGFiaW5kZXg9XCItMVwiXTpub3QoYm9keSknKTtcbiAgZm9yIChjb25zdCBlbGVtIG9mIGZvY3VzYWJsZSkge1xuICAgIGVsZW0uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3QoX3Rhc2tJZCkge1xuICBjb25zdCBjYXJkID0gdGFza0Jpbi5xdWVyeVNlbGVjdG9yKGAudGFzay5pZC0ke190YXNrSWR9YCk7XG5cbiAgaWYgKGNhcmQpIHtcbiAgICBjYXJkLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zZWxlY3QoX3Rhc2tJZCkge1xuICBjb25zdCBjYXJkID0gdGFza0Jpbi5xdWVyeVNlbGVjdG9yKGAudGFzay5pZC0ke190YXNrSWR9YCk7XG5cbiAgaWYgKGNhcmQpIHtcbiAgICBjYXJkLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFza0lkQXRQb3MoX2NsaWVudFgsIF9jbGllbnRZKSB7XG4gIGNvbnN0IHVuZGVyTW91c2UgPSBkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludChfY2xpZW50WCwgX2NsaWVudFkpO1xuICBsZXQgdGFza0ZvdW5kID0gZmFsc2U7XG4gIGxldCBpZCA9IC0xO1xuXG4gIGZvciAoY29uc3QgX2VsZW0gb2YgdW5kZXJNb3VzZSkge1xuICAgIC8vIERpc3JlZ2FyZCBwb3NpdGlvbnMgdGhhdCBhbHNvIGludGVyc2VjdCB0aGUgZXhwYW5kIGJ1dHRvbi5cbiAgICBpZiAoX2VsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFza1wiKSkge1xuICAgICAgY29uc3QgaWRQb3MgPSBfZWxlbS5jbGFzc05hbWUuaW5kZXhPZihcImlkLVwiKTtcbiAgICAgIGxldCBpZEVuZCA9IF9lbGVtLmNsYXNzTmFtZS5pbmRleE9mKFwiIFwiLCBpZFBvcyk7XG4gICAgICBpZiAoaWRFbmQgPCAwKSBpZEVuZCA9IF9lbGVtLmNsYXNzTmFtZS5sZW5ndGg7XG4gICAgICB0YXNrRm91bmQgPSB0cnVlO1xuICAgICAgaWQgPSBOdW1iZXIoX2VsZW0uY2xhc3NOYW1lLnNsaWNlKGlkUG9zICsgMywgaWRFbmQpKTtcbiAgICB9IGVsc2UgaWYgKF9lbGVtLmNsYXNzTGlzdC5jb250YWlucyhcInRhc2stZXhwYW5kLWltZ1wiKSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0YXNrRm91bmQpIHtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5wdXRCb3goX3Rhc2spIHtcbiAgZnJlZXplKCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcbiAgY29uc3QgY2FyZCA9IGJvZHkucXVlcnlTZWxlY3RvcihgLnRhc2suaWQtJHtfdGFzay5pZH1gKTtcbiAgY2FyZC5jbGFzc0xpc3QuYWRkKFwiZWRpdGluZ1wiKTtcbiAgY29uc3QgY2FyZElucHV0ID0gY3JlYXRlQXBwZW5kKFwiZGl2XCIsIFwiY2FyZC1pbnB1dFwiLCBib2R5KTtcblxuICBjb25zdCB0aXRsZUlucHV0ID0gY3JlYXRlSW5wdXQoXG4gICAgXCJ0ZXh0XCIsXG4gICAgbnVsbCxcbiAgICBcImlucHV0LXRpdGxlXCIsXG4gICAgX3Rhc2sudGl0bGUsXG4gICAgY2FyZElucHV0LFxuICAgIFwiZmllbGQtY29udGFpbmVyXCIsXG4gICAgXCJUYXNrIG5hbWVcIlxuICApO1xuICAvLyBTZXR0aW5nIHRpbWVvdXQgaGVyZSBpcyBhIHdvcmthcm91bmQgZm9yIHRoZSBib2R5IG15c3RlcmlvdXNseSBnZXR0aW5nXG4gIC8vIGZvY3VzZWQgaW4gc29tZSBjb250ZXh0cyBhZnRlciB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRpdGxlSW5wdXQuZm9jdXMoKTtcbiAgICB0aXRsZUlucHV0LnNldFNlbGVjdGlvblJhbmdlKFxuICAgICAgdGl0bGVJbnB1dC52YWx1ZS5sZW5ndGgsXG4gICAgICB0aXRsZUlucHV0LnZhbHVlLmxlbmd0aFxuICAgICk7XG4gIH0sIDEpO1xuXG4gIGNvbnN0IGR1ZUNvbnRhaW5lciA9IGNyZWF0ZUFwcGVuZChcbiAgICBcImRpdlwiLFxuICAgIFtcImR1ZS1jb250YWluZXJcIiwgXCJpbnB1dC1jb250YWluZXJcIl0sXG4gICAgY2FyZElucHV0XG4gICk7XG4gIGNvbnN0IGRhdGVJbnB1dCA9IGNyZWF0ZUlucHV0KFxuICAgIFwiZGF0ZVwiLFxuICAgIG51bGwsXG4gICAgXCJpbnB1dC1kYXRlXCIsXG4gICAgX3Rhc2suZHVlRGF0ZVN0cixcbiAgICBkdWVDb250YWluZXIsXG4gICAgXCJmaWVsZC1jb250YWluZXJcIixcbiAgICBcIkR1ZSBkYXRlXCJcbiAgKTtcbiAgY29uc3QgdGltZUlucHV0ID0gY3JlYXRlSW5wdXQoXG4gICAgXCJ0aW1lXCIsXG4gICAgbnVsbCxcbiAgICBcImlucHV0LXRpbWVcIixcbiAgICBfdGFzay5kdWVUaW1lU3RyLFxuICAgIGR1ZUNvbnRhaW5lcixcbiAgICBcImZpZWxkLWNvbnRhaW5lclwiLFxuICAgIFwiRHVlIHRpbWVcIlxuICApO1xuXG4gIGNvbnN0IGRlc2NJbnB1dCA9IGNyZWF0ZUlucHV0KFxuICAgIFwidGV4dGFyZWFcIixcbiAgICBudWxsLFxuICAgIFwiaW5wdXQtZGVzY1wiLFxuICAgIF90YXNrLmRlc2NyaXB0aW9uLFxuICAgIGNhcmRJbnB1dCxcbiAgICBcImZpZWxkLWNvbnRhaW5lclwiLFxuICAgIFwiRGVzY3JpcHRpb25cIlxuICApO1xuXG4gIGNvbnN0IHJhZGlvQ29udGFpbmVyID0gY3JlYXRlQXBwZW5kKFxuICAgIFwiZGl2XCIsXG4gICAgW1wicmFkaW8tY29udGFpbmVyXCIsIFwiaW5wdXQtY29udGFpbmVyXCJdLFxuICAgIGNhcmRJbnB1dFxuICApO1xuXG4gIGNvbnN0IHByaW9yaXR5RmllbGRDb250YWluZXIgPSBjcmVhdGVBcHBlbmQoXG4gICAgXCJkaXZcIixcbiAgICBcImZpZWxkLWNvbnRhaW5lclwiLFxuICAgIHJhZGlvQ29udGFpbmVyXG4gICk7XG4gIGNyZWF0ZUFwcGVuZChcImRpdlwiLCBcInBzZXVkby1sYWJlbFwiLCBwcmlvcml0eUZpZWxkQ29udGFpbmVyLCBcIlByaW9yaXR5XCIpO1xuICBjb25zdCBwcmlvcml0eUZpZWxkID0gY3JlYXRlQXBwZW5kKFxuICAgIGNyZWF0ZVJhZGlvRmllbGQoXCJwcmlvcml0eS1yYWRpb1wiLCBfdGFzay5wcmlvcml0eSwgcHJpb3JpdHlMaXN0KSxcbiAgICBudWxsLFxuICAgIHByaW9yaXR5RmllbGRDb250YWluZXJcbiAgKTtcbiAgc2V0SW5wdXRBdHRyaWJ1dGVzKHByaW9yaXR5RmllbGQsIG51bGwsIFwiaW5wdXQtcHJpb3JpdHlcIik7XG5cbiAgY29uc3QgcHJvZ3Jlc3NGaWVsZENvbnRhaW5lciA9IGNyZWF0ZUFwcGVuZChcbiAgICBcImRpdlwiLFxuICAgIFwiZmllbGQtY29udGFpbmVyXCIsXG4gICAgcmFkaW9Db250YWluZXJcbiAgKTtcbiAgY3JlYXRlQXBwZW5kKFwiZGl2XCIsIFwicHNldWRvLWxhYmVsXCIsIHByb2dyZXNzRmllbGRDb250YWluZXIsIFwiUHJvZ3Jlc3NcIik7XG4gIGNvbnN0IHByb2dyZXNzRmllbGQgPSBjcmVhdGVBcHBlbmQoXG4gICAgY3JlYXRlUmFkaW9GaWVsZChcInByb2dyZXNzLXJhZGlvXCIsIF90YXNrLnByb2dyZXNzLCBwcm9ncmVzc0xpc3QpLFxuICAgIG51bGwsXG4gICAgcHJvZ3Jlc3NGaWVsZENvbnRhaW5lclxuICApO1xuICBzZXRJbnB1dEF0dHJpYnV0ZXMocHJvZ3Jlc3NGaWVsZCwgbnVsbCwgXCJpbnB1dC1wcm9ncmVzc1wiKTtcbiAgY29uc3QgcHJvZ3Jlc3NDaGVja0NvbnRhaW5lciA9IGNyZWF0ZUFwcGVuZChcbiAgICBcImRpdlwiLFxuICAgIFwicHJvZ3Jlc3MtY2hlY2stY29udGFpbmVyXCIsXG4gICAgcHJvZ3Jlc3NGaWVsZENvbnRhaW5lclxuICApO1xuICBjb25zdCBwcm9ncmVzc0NoZWNrID0gY3JlYXRlQXBwZW5kKFwiaW5wdXRcIiwgbnVsbCwgcHJvZ3Jlc3NDaGVja0NvbnRhaW5lcik7XG4gIHNldElucHV0QXR0cmlidXRlcyhwcm9ncmVzc0NoZWNrLCBcImNoZWNrYm94XCIsIFwicHJvZ3Jlc3MtY2hlY2tcIik7XG5cbiAgaWYgKF90YXNrLnVzZVByb2dyZXNzRnJvbVN1YnRhc2tzKSB7XG4gICAgcHJvZ3Jlc3NDaGVjay5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKTtcbiAgfVxuXG4gIGNvbnN0IHByb2dyZXNzQ2hlY2tMYWJlbCA9IGNyZWF0ZUFwcGVuZChcbiAgICBcImxhYmVsXCIsXG4gICAgbnVsbCxcbiAgICBwcm9ncmVzc0NoZWNrQ29udGFpbmVyLFxuICAgIFwiU2V0IHByb2dyZXNzIGZyb20gc3VidGFza3NcIlxuICApO1xuICBwcm9ncmVzc0NoZWNrTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwicHJvZ3Jlc3MtY2hlY2tcIik7XG4gIHVwZGF0ZVByb2dyZXNzRmllbGQocHJvZ3Jlc3NDaGVjaywgcHJvZ3Jlc3NGaWVsZCk7XG5cbiAgY29uc3Qgbm90ZXNJbnB1dCA9IGNyZWF0ZUlucHV0KFxuICAgIFwidGV4dGFyZWFcIixcbiAgICBudWxsLFxuICAgIFwiaW5wdXQtbm90ZVwiLFxuICAgIF90YXNrLm5vdGVzLFxuICAgIGNhcmRJbnB1dCxcbiAgICBcImZpZWxkLWNvbnRhaW5lclwiLFxuICAgIFwiTm90ZXNcIlxuICApO1xuXG4gIGNvbnN0IGJ1dHRvbkRpdiA9IGNyZWF0ZUFwcGVuZChcImRpdlwiLCBcImlucHV0LWJ1dHRvbnNcIiwgY2FyZElucHV0KTtcbiAgY29uc3QgY29uZmlybUJ1dHRvbiA9IGNyZWF0ZUFwcGVuZChcbiAgICBcImJ1dHRvblwiLFxuICAgIFtcImJ1dHRvblwiLCBcImNvbmZpcm0tYnV0dG9uXCIsIFwiaW5wdXQtYnV0dG9uXCJdLFxuICAgIGJ1dHRvbkRpdlxuICApO1xuICBjb25maXJtQnV0dG9uLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgY3JlYXRlQXBwZW5kKFxuICAgIGNyZWF0ZVN2ZyhcbiAgICAgIFwiTTEyIDJDNi41IDIgMiA2LjUgMiAxMlM2LjUgMjIgMTIgMjIgMjIgMTcuNSAyMiAxMiAxNy41IDIgMTIgMk0xMCAxN0w1IDEyTDYuNDEgMTAuNTlMMTAgMTQuMTdMMTcuNTkgNi41OEwxOSA4TDEwIDE3WlwiLFxuICAgICAgXCJDb25maXJtXCIsXG4gICAgICB0cnVlXG4gICAgKSxcbiAgICBcImlucHV0LWJ1dHRvbi1pbWdcIixcbiAgICBjb25maXJtQnV0dG9uXG4gICk7XG4gIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGNyZWF0ZUFwcGVuZChcbiAgICBcImJ1dHRvblwiLFxuICAgIFtcImJ1dHRvblwiLCBcImNhbmNlbC1idXR0b25cIiwgXCJpbnB1dC1idXR0b25cIl0sXG4gICAgYnV0dG9uRGl2XG4gICk7XG4gIGNhbmNlbEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gIGNyZWF0ZUFwcGVuZChcbiAgICBjcmVhdGVTdmcoXG4gICAgICBcIk05LDdMMTEsMTJMOSwxN0gxMUwxMiwxNC41TDEzLDE3SDE1TDEzLDEyTDE1LDdIMTNMMTIsOS41TDExLDdIOU0xMiwyQTEwLDEwIDAgMCwxIDIyLDEyQTEwLDEwIDAgMCwxIDEyLDIyQTEwLDEwIDAgMCwxIDIsMTJBMTAsMTAgMCAwLDEgMTIsMlpcIixcbiAgICAgIFwiQ2FuY2VsXCIsXG4gICAgICB0cnVlXG4gICAgKSxcbiAgICBcImlucHV0LWJ1dHRvbi1pbWdcIixcbiAgICBjYW5jZWxCdXR0b25cbiAgKTtcblxuICByZXR1cm4ge1xuICAgIGNhcmQsXG4gICAgY2FyZElucHV0LFxuICAgIHRpdGxlSW5wdXQsXG4gICAgZGF0ZUlucHV0LFxuICAgIHRpbWVJbnB1dCxcbiAgICBkZXNjSW5wdXQsXG4gICAgcHJpb3JpdHlGaWVsZCxcbiAgICBwcm9ncmVzc0NoZWNrLFxuICAgIHByb2dyZXNzRmllbGQsXG4gICAgbm90ZXNJbnB1dCxcbiAgICBjb25maXJtOiBjb25maXJtQnV0dG9uLFxuICAgIGNhbmNlbDogY2FuY2VsQnV0dG9uLFxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBcHBlbmQoX2VsZW1UeXBlLCBfY2xhc3NlcywgX3BhcmVudEVsZW0sIF90ZXh0Q29udGVudCkge1xuICAvLyBJZiBfZWxlbVR5cGUgaXMgYSBzdHJpbmcsIGNyZWF0ZSBpdDsgb3RoZXJ3aXNlIGFzc3VtZSBpdCdzIGFuIGV4aXN0aW5nXG4gIC8vIGVsZW1lbnQgYW5kIHVzZSBpdCBhcyBwYXNzZWQuXG4gIGlmICh0eXBlb2YgX2VsZW1UeXBlID09IFwic3RyaW5nXCIpIHtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoX2VsZW1UeXBlKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtID0gX2VsZW1UeXBlO1xuICB9XG5cbiAgaWYgKF9jbGFzc2VzKSB7XG4gICAgLy8gQ2FuIHBhc3MgYXJyYXkgb2Ygc3RyaW5ncyBvciBzaW5nbGUgc3RyaW5nLlxuICAgIGlmICh0eXBlb2YgX2NsYXNzZXMgPT0gXCJzdHJpbmdcIikge1xuICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKF9jbGFzc2VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKC4uLl9jbGFzc2VzKTtcbiAgICB9XG4gIH1cblxuICBpZiAoX3RleHRDb250ZW50KSB7XG4gICAgZWxlbS50ZXh0Q29udGVudCA9IF90ZXh0Q29udGVudDtcbiAgfVxuXG4gIF9wYXJlbnRFbGVtLmFwcGVuZENoaWxkKGVsZW0pO1xuXG4gIHJldHVybiBlbGVtO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3NGaWVsZChfY2hlY2ssIF9maWVsZCkge1xuICBpZiAoX2NoZWNrLmNoZWNrZWQpIHtcbiAgICBfZmllbGQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgfSBlbHNlIHtcbiAgICBfZmllbGQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhZGlvVmFsdWUoX2ZpZWxkc2V0KSB7XG4gIGNvbnN0IHJhZGlvcyA9IF9maWVsZHNldC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRcIik7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYWRpb3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmFkaW9zW2ldLmNoZWNrZWQpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5wdXQoXG4gIF90eXBlLFxuICBfY2xhc3NlcyxcbiAgX25hbWUsXG4gIF92YWx1ZSxcbiAgX2NvbnRhaW5lclBhcmVudCxcbiAgX2NvbnRhaW5lckNsYXNzZXMsXG4gIF9sYWJlbFRleHQsXG4gIF9sYWJlbENsYXNzZXNcbikge1xuICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVBcHBlbmQoXCJkaXZcIiwgX2NvbnRhaW5lckNsYXNzZXMsIF9jb250YWluZXJQYXJlbnQpO1xuICBjb25zdCBlbGVtTGFiZWwgPSBjcmVhdGVBcHBlbmQoXCJsYWJlbFwiLCBfbGFiZWxDbGFzc2VzLCBjb250YWluZXIsIF9sYWJlbFRleHQpO1xuICBlbGVtTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIF9uYW1lKTtcbiAgbGV0IGVsZW07XG5cbiAgaWYgKF90eXBlID09IFwidGV4dGFyZWFcIikge1xuICAgIGVsZW0gPSBjcmVhdGVBcHBlbmQoXCJ0ZXh0YXJlYVwiLCBfY2xhc3NlcywgY29udGFpbmVyLCBfdmFsdWUpO1xuICAgIHNldElucHV0QXR0cmlidXRlcyhlbGVtLCBudWxsLCBfbmFtZSwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbSA9IGNyZWF0ZUFwcGVuZChcImlucHV0XCIsIF9jbGFzc2VzLCBjb250YWluZXIpO1xuICAgIHNldElucHV0QXR0cmlidXRlcyhlbGVtLCBfdHlwZSwgX25hbWUsIF92YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gc2V0SW5wdXRBdHRyaWJ1dGVzKF9lbGVtLCBfdHlwZSwgX25hbWVJZCwgX3ZhbHVlKSB7XG4gIGlmIChfdHlwZSkgX2VsZW0uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBfdHlwZSk7XG5cbiAgaWYgKF9uYW1lSWQpIHtcbiAgICBfZWxlbS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIF9uYW1lSWQpO1xuICAgIF9lbGVtLnNldEF0dHJpYnV0ZShcImlkXCIsIF9uYW1lSWQpO1xuICB9XG5cbiAgaWYgKF92YWx1ZSkgX2VsZW0uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgX3ZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZXhwYW5kQ2FyZChfdGFzaywgX2Rpdikge1xuICBpZiAoX3Rhc2suZXhwYW5kZWQpIHtcbiAgICBfZGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsYXBzZWRcIik7XG4gICAgX2Rpdi5jbGFzc0xpc3QuYWRkKFwiZXhwYW5kZWRcIik7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBfZGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJleHBhbmRlZFwiKTtcbiAgX2Rpdi5jbGFzc0xpc3QuYWRkKFwiY29sbGFwc2VkXCIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSYWRpb0ZpZWxkKF9uYW1lLCBfZGVmYXVsdFZhbHVlLCBfbGFiZWxBcnIpIHtcbiAgY29uc3QgZmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG4gIGZpZWxkLmNsYXNzTGlzdC5hZGQoYCR7X25hbWV9LWZpZWxkc2V0YCk7XG5cbiAgY29uc3QgcmFkaW9zID0gW107XG4gIGNvbnN0IGxhYmVscyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgX2xhYmVsQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgcmFkaW9zLnB1c2goZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKTtcbiAgICByYWRpb3NbaV0uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInJhZGlvXCIpO1xuICAgIHJhZGlvc1tpXS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBgJHtfbmFtZX0tJHtpfWApO1xuICAgIHJhZGlvc1tpXS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIF9uYW1lKTtcbiAgICByYWRpb3NbaV0uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgX2xhYmVsQXJyW2ldKTtcbiAgICBmaWVsZC5hcHBlbmRDaGlsZChyYWRpb3NbaV0pO1xuXG4gICAgbGFiZWxzLnB1c2goZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpKTtcbiAgICBsYWJlbHNbaV0uc2V0QXR0cmlidXRlKFwiZm9yXCIsIGAke19uYW1lfS0ke2l9YCk7XG4gICAgbGFiZWxzW2ldLnRleHRDb250ZW50ID0gX2xhYmVsQXJyW2ldO1xuICAgIGZpZWxkLmFwcGVuZENoaWxkKGxhYmVsc1tpXSk7XG4gIH1cblxuICByYWRpb3NbX2RlZmF1bHRWYWx1ZV0uc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCBcIlwiKTtcblxuICByZXR1cm4gZmllbGQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN2ZyhfcGF0aCwgX3RpdGxlLCBfdXNlQmcsIF9wYXRoQ2xhc3MpIHtcbiAgY29uc3Qgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJzdmdcIik7XG4gIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIDI0IDI0XCIpO1xuXG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ0aXRsZVwiKTtcbiAgdGl0bGUudGV4dENvbnRlbnQgPSBfdGl0bGU7XG4gIHN2Zy5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gIGlmIChfdXNlQmcpIHtcbiAgICB2YXIgYmdQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJwYXRoXCIpO1xuICAgIGJnUGF0aC5zZXRBdHRyaWJ1dGUoXG4gICAgICBcImRcIixcbiAgICAgIFwiTTEyLDRBMTAsMTAgMCAwLDAgNCwxMkExMCwxMCAwIDAsMCAxMiwyMEExMCwxMCAwIDAsMCAyMCwxMkExMCwxMCAwIDAsMCAxMiw0WlwiXG4gICAgKTtcbiAgICBiZ1BhdGguY2xhc3NMaXN0LmFkZChcImJnLWltZ1wiKTtcbiAgICBzdmcuYXBwZW5kQ2hpbGQoYmdQYXRoKTtcbiAgfVxuICBjb25zdCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJwYXRoXCIpO1xuICBwYXRoLnNldEF0dHJpYnV0ZShcImRcIiwgX3BhdGgpO1xuICBzdmcuYXBwZW5kQ2hpbGQocGF0aCk7XG5cbiAgaWYgKF9wYXRoQ2xhc3MgIT0gbnVsbCkge1xuICAgIHBhdGguY2xhc3NMaXN0LmFkZChfcGF0aENsYXNzKTtcblxuICAgIGlmIChfdXNlQmcpIHtcbiAgICAgIGJnUGF0aC5jbGFzc0xpc3QuYWRkKF9wYXRoQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdmc7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByaW9yaXR5U3ZnKF9wcmlvcml0eSkge1xuICBjb25zdCBwcmlvcml0eVBhdGggPSBbXG4gICAgXCJNMTIgMTZDMTMuNjYgMTYgMTUgMTQuNjYgMTUgMTNDMTUgMTEuODggMTQuMzkgMTAuOSAxMy41IDEwLjM5TDMuNzkgNC43N0w5LjMyIDE0LjM1QzkuODIgMTUuMzMgMTAuODMgMTYgMTIgMTZNMTIgM0MxMC4xOSAzIDguNSAzLjUgNy4wMyA0LjMyTDkuMTMgNS41M0MxMCA1LjE5IDExIDUgMTIgNUMxNi40MiA1IDIwIDguNTggMjAgMTNDMjAgMTUuMjEgMTkuMTEgMTcuMjEgMTcuNjYgMTguNjVIMTcuNjVDMTcuMjYgMTkuMDQgMTcuMjYgMTkuNjcgMTcuNjUgMjAuMDZDMTguMDQgMjAuNDUgMTguNjggMjAuNDUgMTkuMDcgMjAuMDdDMjAuODggMTguMjYgMjIgMTUuNzYgMjIgMTNDMjIgNy41IDE3LjUgMyAxMiAzTTIgMTNDMiAxNS43NiAzLjEyIDE4LjI2IDQuOTMgMjAuMDdDNS4zMiAyMC40NSA1Ljk1IDIwLjQ1IDYuMzQgMjAuMDZDNi43MyAxOS42NyA2LjczIDE5LjA0IDYuMzQgMTguNjVDNC44OSAxNy4yIDQgMTUuMjEgNCAxM0M0IDEyIDQuMTkgMTEgNC41NCAxMC4xTDMuMzMgOEMyLjUgOS41IDIgMTEuMTggMiAxM1pcIixcbiAgICBcIk0xMiAxLjM4TDkuMTQgMTIuMDZDOC44IDEzLjEgOS4wNCAxNC4yOSA5Ljg2IDE1LjEyQzExLjA0IDE2LjI5IDEyLjk0IDE2LjI5IDE0LjExIDE1LjEyQzE0LjkgMTQuMzMgMTUuMTYgMTMuMiAxNC44OSAxMi4yMU0xNC42IDMuMzVMMTUuMjIgNS42OEMxOC4wNCA2LjkyIDIwIDkuNzMgMjAgMTNDMjAgMTUuMjEgMTkuMTEgMTcuMjEgMTcuNjYgMTguNjVIMTcuNjVDMTcuMjYgMTkuMDQgMTcuMjYgMTkuNjcgMTcuNjUgMjAuMDZDMTguMDQgMjAuNDUgMTguNjggMjAuNDUgMTkuMDcgMjAuMDdDMjAuODggMTguMjYgMjIgMTUuNzYgMjIgMTNDMjIgOC4zOCAxOC44NiA0LjUgMTQuNiAzLjM1TTkuNCAzLjM2QzUuMTUgNC41IDIgOC40IDIgMTNDMiAxNS43NiAzLjEyIDE4LjI2IDQuOTMgMjAuMDdDNS4zMiAyMC40NSA1Ljk1IDIwLjQ1IDYuMzQgMjAuMDZDNi43MyAxOS42NyA2LjczIDE5LjA0IDYuMzQgMTguNjVDNC44OSAxNy4yIDQgMTUuMjEgNCAxM0M0IDkuNjUgNS45NCA2Ljg2IDguNzkgNS42NVwiLFxuICAgIFwiTTEyLDE2QTMsMyAwIDAsMSA5LDEzQzksMTEuODggOS42MSwxMC45IDEwLjUsMTAuMzlMMjAuMjEsNC43N0wxNC42OCwxNC4zNUMxNC4xOCwxNS4zMyAxMy4xNywxNiAxMiwxNk0xMiwzQzEzLjgxLDMgMTUuNSwzLjUgMTYuOTcsNC4zMkwxNC44Nyw1LjUzQzE0LDUuMTkgMTMsNSAxMiw1QTgsOCAwIDAsMCA0LDEzQzQsMTUuMjEgNC44OSwxNy4yMSA2LjM0LDE4LjY1SDYuMzVDNi43NCwxOS4wNCA2Ljc0LDE5LjY3IDYuMzUsMjAuMDZDNS45NiwyMC40NSA1LjMyLDIwLjQ1IDQuOTMsMjAuMDdWMjAuMDdDMy4xMiwxOC4yNiAyLDE1Ljc2IDIsMTNBMTAsMTAgMCAwLDEgMTIsM00yMiwxM0MyMiwxNS43NiAyMC44OCwxOC4yNiAxOS4wNywyMC4wN1YyMC4wN0MxOC42OCwyMC40NSAxOC4wNSwyMC40NSAxNy42NiwyMC4wNkMxNy4yNywxOS42NyAxNy4yNywxOS4wNCAxNy42NiwxOC42NVYxOC42NUMxOS4xMSwxNy4yIDIwLDE1LjIxIDIwLDEzQzIwLDEyIDE5LjgxLDExIDE5LjQ2LDEwLjFMMjAuNjcsOEMyMS41LDkuNSAyMiwxMS4xOCAyMiwxM1pcIixcbiAgXTtcblxuICBjb25zdCBwcmlvcml0eUNsYXNzID0gW1wicHJpb3JpdHktbG93XCIsIFwicHJpb3JpdHktbWlkXCIsIFwicHJpb3JpdHktaGlnaFwiXTtcblxuICBjb25zdCBwcmlvcml0eVN2ZyA9IGNyZWF0ZVN2ZyhcbiAgICBwcmlvcml0eVBhdGhbX3ByaW9yaXR5IC0gMV0sXG4gICAgcHJpb3JpdHlMaXN0W19wcmlvcml0eV0sXG4gICAgZmFsc2VcbiAgKTtcbiAgcHJpb3JpdHlTdmcuY2xhc3NMaXN0LmFkZChcInByaW9yaXR5LWltZ1wiLCBwcmlvcml0eUNsYXNzW19wcmlvcml0eSAtIDFdKTtcblxuICByZXR1cm4gcHJpb3JpdHlTdmc7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2dyZXNzU3ZnKF9wcm9ncmVzcykge1xuICBjb25zdCBwcm9ncmVzc1BhdGggPSBbXG4gICAgXCJNMTIsMjBBOCw4IDAgMCwxIDQsMTJBOCw4IDAgMCwxIDEyLDRBOCw4IDAgMCwxIDIwLDEyQTgsOCAwIDAsMSAxMiwyME0xMiwyQTEwLDEwIDAgMCwwIDIsMTJBMTAsMTAgMCAwLDAgMTIsMjJBMTAsMTAgMCAwLDAgMjIsMTJBMTAsMTAgMCAwLDAgMTIsMlpcIixcbiAgICBcIk04LjQ2IDguNDZDOS40IDcuNTMgMTAuNjcgNyAxMiA3QzEzLjMzIDcgMTQuNiA3LjUzIDE1LjU0IDguNDZMOC40NiAxNS41NEM3LjUzIDE0LjYgNyAxMy4zMyA3IDEyQzcgMTAuNjcgNy41MyA5LjQgOC40NiA4LjQ2TTguMTcgMi43NkM5LjM5IDIuMjYgMTAuNjkgMiAxMiAyQzEzLjMxIDIgMTQuNjEgMi4yNiAxNS44MyAyLjc2QzE3LjA0IDMuMjYgMTguMTQgNCAxOS4wNyA0LjkzQzIwIDUuODYgMjAuNzQgNi45NiAyMS4yNCA4LjE3QzIxLjc0IDkuMzkgMjIgMTAuNjkgMjIgMTJDMjIgMTQuNjUgMjAuOTUgMTcuMiAxOS4wNyAxOS4wN0MxNy4yIDIwLjk1IDE0LjY1IDIyIDEyIDIyQzEwLjY5IDIyIDkuMzkgMjEuNzQgOC4xNyAyMS4yNEM2Ljk2IDIwLjc0IDUuODYgMjAgNC45MyAxOS4wN0MzLjA1IDE3LjIgMiAxNC42NSAyIDEyQzIgOS4zNSAzLjA1IDYuOCA0LjkzIDQuOTNDNS44NiA0IDYuOTYgMy4yNiA4LjE3IDIuNzZNNi4zNCAxNy42NkM3Ljg0IDE5LjE2IDkuODggMjAgMTIgMjBDMTQuMTIgMjAgMTYuMTYgMTkuMTYgMTcuNjYgMTcuNjZDMTkuMTYgMTYuMTYgMjAgMTQuMTIgMjAgMTJDMjAgOS44OCAxOS4xNiA3Ljg0IDE3LjY2IDYuMzRDMTYuMTYgNC44NCAxNC4xMiA0IDEyIDRDOS44OCA0IDcuODQgNC44NCA2LjM0IDYuMzRDNC44NCA3Ljg0IDQgOS44OCA0IDEyQzQgMTQuMTIgNC44NCAxNi4xNiA2LjM0IDE3LjY2WlwiLFxuICAgIFwiTTEyLDIwQTgsOCAwIDAsMSA0LDEyQTgsOCAwIDAsMSAxMiw0QTgsOCAwIDAsMSAyMCwxMkE4LDggMCAwLDEgMTIsMjBNMTIsMkExMCwxMCAwIDAsMCAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwwIDIyLDEyQTEwLDEwIDAgMCwwIDEyLDJNMTIsN0E1LDUgMCAwLDAgNywxMkE1LDUgMCAwLDAgMTIsMTdBNSw1IDAgMCwwIDE3LDEyQTUsNSAwIDAsMCAxMiw3WlwiLFxuICBdO1xuXG4gIGNvbnN0IHByb2dyZXNzQ2xhc3MgPSBbXG4gICAgXCJwcm9ncmVzcy1ub3Qtc3RhcnRlZFwiLFxuICAgIFwicHJvZ3Jlc3MtaW4tcHJvZ3Jlc3NcIixcbiAgICBcInByb2dyZXNzLWNvbXBsZXRlZFwiLFxuICBdO1xuXG4gIGNvbnN0IHByb2dyZXNzU3ZnID0gY3JlYXRlU3ZnKFxuICAgIHByb2dyZXNzUGF0aFtfcHJvZ3Jlc3MgLSAxXSxcbiAgICBwcm9ncmVzc0xpc3RbX3Byb2dyZXNzXSxcbiAgICBmYWxzZVxuICApO1xuICBwcm9ncmVzc1N2Zy5jbGFzc0xpc3QuYWRkKFwicHJvZ3Jlc3MtaW1nXCIsIHByb2dyZXNzQ2xhc3NbX3Byb2dyZXNzIC0gMV0pO1xuXG4gIHJldHVybiBwcm9ncmVzc1N2Zztcbn1cbi8vIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge25ld1Rhc2suZG9tRGl2LmVkaXRPcGVuLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiY2xpY2tcIikpfSwgMSk7XG4iLCIvLyBTdHlsZSBtZW51IHByb3BlcnRpZXMgdmlhIENTUy4gRm9udCBzaXplIG11c3QgYmUgZ2l2ZW4gaW4gcHguXG4vL1xuLy8gLm1lbnUge1xuLy8gICAgIGZvbnQtc2l6ZTogMjRweDtcbi8vIH1cbi8vIC5tZW51LXJlY3Qge1xuLy8gICAgIGZpbGw6IGNvbG9yO1xuLy8gfVxuLy8gLm1lbnUtYm9yZGVyIHtcbi8vICAgICBmaWxsOiBjb2xvcjtcbi8vIH1cbi8vIC5tZW51LXRleHQge1xuLy8gICAgIGZpbGw6IGNvbG9yO1xuLy8gfVxuLy8gLm1lbnUtaGlnaGxpZ2h0IHtcbi8vICAgICBmaWxsOiBjb2xvcjtcbi8vIH1cblxuY29uc3QgbmFtZXNwYWNlID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gIGNsaWNrUmVsZWFzZVdpbmRvdztcbiAgc3ZnO1xuICBncm91cDtcbiAgbWVudTtcbiAgYm9yZGVyO1xuICBtZW51SXRlbXMgPSBbXTtcbiAgYnV0dG9uRG93blRpbWU7XG4gIGlzVmlzaWJsZSA9IGZhbHNlO1xuICB0aWxlR3JvdXAgPSBudWxsO1xuICBmdW5jdGlvbnM7XG4gIGl0ZW1UZXh0cztcbiAgYm9yZGVyU2l6ZSA9IDE7XG4gIHNjYWxlID0gMTtcbiAgZm9udFNpemUgPSAyMDtcbiAgLy8gbWVudU1hcmdpbiBjcmVhdGVzIGFuIGludmlzaWJsZSwgbm9uLXNlbGVjdGFibGUgYnVmZmVyIHpvbmUgYXJvdW5kIHRoZVxuICAvLyBtZW51IHNvIHdlIGNhbiBsaXN0ZW4gZm9yIHRoZSBtb3VzZSBsZWF2aW5nIHRoZSBtZW51IGFuZCBkaXNhYmxlIHRoZVxuICAvLyBoaWdobGlnaHQgd2l0aG91dCBoYXZpbmcgdG8gbGlzdGVuIG92ZXIgdGhlIGVudGlyZSBkb2N1bWVudC5cbiAgbWVudU1hcmdpbiA9IDI7XG4gIG1lbnVQb3NPZmZzZXQgPSB7IHg6IC00LCB5OiAtMSB9O1xuICBtZW51V2lkdGg7XG4gIG1lbnVIZWlnaHQ7XG4gIGluaXRUaW1lO1xuICAvLyBwb3N0SW5pdERlbGF5IHNldHMgYSBkZWxheSBvbiB3aGVuIG1lbnUgaXRlbXMgY2FuIGJlIHRyaWdnZXJlZCBhZnRlciBtZW51XG4gIC8vIGluaXQuIFRoaXMgcHJvdmlkZXMgYSBzYWZlZ3VhcmQgYWdhaW5zdCBhY2NpZGVudGFsbHkgY2F0Y2hpbmcgYSBjbGljayB0aGF0XG4gIC8vIG9wZW5lZCB0aGUgbWVudS5cbiAgcG9zdEluaXREZWxheSA9IDIwMDtcbiAgaHRtbDtcblxuICBjb25zdHJ1Y3RvcihfaXRlbVRleHRzLCBfZnVuY3Rpb25zLCBfY3NzQ2xhc3Nlcykge1xuICAgIHRoaXMuaHRtbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJodG1sXCIpO1xuICAgIHRoaXMuc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgXCJzdmdcIik7XG4gICAgdGhpcy5zdmcuY2xhc3NMaXN0LmFkZChcIm1lbnVcIik7XG5cbiAgICBpZiAoX2Nzc0NsYXNzZXMpIHtcbiAgICAgIHRoaXMuc3ZnLmNsYXNzTGlzdC5hZGQoLi4uX2Nzc0NsYXNzZXMpO1xuICAgIH1cblxuICAgIHRoaXMuc3ZnLnNldEF0dHJpYnV0ZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgIHRoaXMuY2xpY2tSZWxlYXNlV2luZG93ID0gNTAwO1xuICAgIHRoaXMuZ3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCBcImdcIik7XG4gICAgdGhpcy5tZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgXCJyZWN0XCIpO1xuICAgIHRoaXMuYm9yZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgXCJyZWN0XCIpO1xuXG4gICAgdGhpcy5ncm91cC5hcHBlbmRDaGlsZCh0aGlzLmJvcmRlcik7XG4gICAgdGhpcy5ncm91cC5hcHBlbmRDaGlsZCh0aGlzLm1lbnUpO1xuICAgIHRoaXMuZ3JvdXAuc2V0QXR0cmlidXRlKFwiaWRcIiwgYG1lbnVHcm91cGApO1xuXG4gICAgdGhpcy5ib3JkZXIuY2xhc3NMaXN0LmFkZChcIm1lbnUtYm9yZGVyXCIpO1xuICAgIHRoaXMubWVudS5jbGFzc0xpc3QuYWRkKFwibWVudS1yZWN0XCIpO1xuXG4gICAgdGhpcy5mdW5jdGlvbnMgPSBfZnVuY3Rpb25zO1xuICAgIHRoaXMuaXRlbVRleHRzID0gX2l0ZW1UZXh0cztcblxuICAgIHRoaXMuc3ZnLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKF9lKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZUhpZ2hsaWdodChfZS5jbGllbnRYLCBfZS5jbGllbnRZKTtcbiAgICB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICB0aGlzLmVyYXNlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChfZSkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmlzVmlzaWJsZSAmJlxuICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuaW5pdFRpbWUgPiB0aGlzLnBvc3RJbml0RGVsYXlcbiAgICAgICkge1xuICAgICAgICBjb25zdCBtZW51U2VsZWN0aW9uID0gdGhpcy5nZXRIaWdobGlnaHRlZCgpO1xuICAgICAgICBjb25zdCBtZW51TW91c2VPdmVyID0gZG9jdW1lbnQuZWxlbWVudHNGcm9tUG9pbnQoXG4gICAgICAgICAgX2UuY2xpZW50WCxcbiAgICAgICAgICBfZS5jbGllbnRZXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5zdmcucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKG1lbnVTZWxlY3Rpb24gJiYgbWVudU1vdXNlT3Zlci5pbmNsdWRlcyhtZW51U2VsZWN0aW9uLnJlY3QpKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmF0ZVNlbGVjdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lcmFzZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBjb25zdCBjb21wdXRlZEZvbnRTaXplID0gd2luZG93XG4gICAgICAuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnN2ZylcbiAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKFwiZm9udC1zaXplXCIpO1xuXG4gICAgaWYgKGNvbXB1dGVkRm9udFNpemUpIHtcbiAgICAgIGxldCBudW0gPSBcIlwiO1xuXG4gICAgICBmb3IgKGNvbnN0IGNoYXIgb2YgY29tcHV0ZWRGb250U2l6ZSkge1xuICAgICAgICBjb25zdCBjb2RlID0gY2hhci5jaGFyQ29kZUF0KDApO1xuXG4gICAgICAgIGlmIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpIHtcbiAgICAgICAgICBudW0gKz0gY2hhcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmZvbnRTaXplID0gTnVtYmVyKG51bSk7XG4gICAgfVxuXG4gICAgdGhpcy5zdmcuc2V0QXR0cmlidXRlKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xuICAgIHRoaXMuc3ZnLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIGBwb3NpdGlvbjogYWJzb2x1dGU7YCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaXRlbVRleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmFkZE1lbnVJdGVtKHRoaXMuaXRlbVRleHRzW2ldLCB0aGlzLmZ1bmN0aW9uc1tpXSk7XG4gICAgfVxuXG4gICAgbGV0IGhlaWdodCA9IDA7XG4gICAgbGV0IHdpZHRoID0gMDtcbiAgICBmb3IgKGNvbnN0IHggb2YgdGhpcy5tZW51SXRlbXMpIHtcbiAgICAgIGNvbnN0IG5ld1dpZHRoID0geC5zdmdUZXh0LnRleHQuZ2V0QkJveCgpLndpZHRoICsgeC5zdmdUZXh0LnhNYXJnaW4gKiAyO1xuXG4gICAgICBpZiAobmV3V2lkdGggPiB3aWR0aCkge1xuICAgICAgICB3aWR0aCA9IG5ld1dpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWVudUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLm1lbnVJdGVtc1tpXS5yZWN0LnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHdpZHRoKTtcbiAgICAgIHRoaXMubWVudUl0ZW1zW2ldLmdyb3VwLnNldEF0dHJpYnV0ZShcbiAgICAgICAgXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgYHRyYW5zbGF0ZSgwLCAke2hlaWdodH0pYFxuICAgICAgKTtcbiAgICAgIGhlaWdodCArPSBOdW1iZXIodGhpcy5tZW51SXRlbXNbaV0ucmVjdC5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIikpO1xuICAgIH1cblxuICAgIHRoaXMubWVudS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBgJHt3aWR0aH1gKTtcbiAgICB0aGlzLm1lbnUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGAke2hlaWdodH1gKTtcbiAgICB0aGlzLmJvcmRlci5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBgJHt3aWR0aCArIHRoaXMuYm9yZGVyU2l6ZSAqIDJ9YCk7XG4gICAgdGhpcy5ib3JkZXIuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGAke2hlaWdodCArIHRoaXMuYm9yZGVyU2l6ZSAqIDJ9YCk7XG4gICAgdGhpcy5ib3JkZXIuc2V0QXR0cmlidXRlKFwieFwiLCBgJHt0aGlzLmJvcmRlclNpemUgKiAtMX1gKTtcbiAgICB0aGlzLmJvcmRlci5zZXRBdHRyaWJ1dGUoXCJ5XCIsIGAke3RoaXMuYm9yZGVyU2l6ZSAqIC0xfWApO1xuXG4gICAgdGhpcy5zdmcuc2V0QXR0cmlidXRlKFxuICAgICAgXCJ3aWR0aFwiLFxuICAgICAgYCR7d2lkdGggKiB0aGlzLnNjYWxlICsgdGhpcy5ib3JkZXJTaXplICogdGhpcy5zY2FsZX1gXG4gICAgKTtcbiAgICB0aGlzLnN2Zy5zZXRBdHRyaWJ1dGUoXG4gICAgICBcImhlaWdodFwiLFxuICAgICAgYCR7aGVpZ2h0ICogdGhpcy5zY2FsZSArIHRoaXMuYm9yZGVyU2l6ZSAqIHRoaXMuc2NhbGV9YFxuICAgICk7XG4gICAgdGhpcy5zdmcuc2V0QXR0cmlidXRlKFxuICAgICAgXCJ2aWV3Qm94XCIsXG4gICAgICBgJHt0aGlzLmJvcmRlclNpemUgKiAtMSAtIHRoaXMubWVudU1hcmdpbn0gJHtcbiAgICAgICAgdGhpcy5ib3JkZXJTaXplICogLTEgLSB0aGlzLm1lbnVNYXJnaW5cbiAgICAgIH0gJHtcbiAgICAgICAgd2lkdGggKyB0aGlzLmJvcmRlclNpemUgKiAyICsgdGhpcy5tZW51TWFyZ2luICogMlxuICAgICAgfSAke2hlaWdodCArIHRoaXMuYm9yZGVyU2l6ZSAqIDIgKyB0aGlzLm1lbnVNYXJnaW4gKiAyfWBcbiAgICApO1xuXG4gICAgdGhpcy5tZW51V2lkdGggPSB3aWR0aCArIHRoaXMuYm9yZGVyU2l6ZSAqIDIgLSB0aGlzLm1lbnVNYXJnaW4gKiAyO1xuICAgIHRoaXMubWVudUhlaWdodCA9IGhlaWdodCArIHRoaXMuYm9yZGVyU2l6ZSAqIDIgLSB0aGlzLm1lbnVNYXJnaW4gKiAyO1xuXG4gICAgdGhpcy5pbml0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbiAgYnV0dG9uRG93bihfY2xpZW50WCwgX2NsaWVudFkpIHtcbiAgICBpZiAodGhpcy5pc1Zpc2libGUpIHRoaXMuZXJhc2UoKTtcbiAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5ncm91cCk7XG4gICAgdGhpcy5pbml0KCk7XG5cbiAgICBjb25zdCBkb2NXaWR0aCA9IHRoaXMuaHRtbC5jbGllbnRXaWR0aDtcbiAgICBjb25zdCBkb2NIZWlnaHQgPSB0aGlzLmh0bWwuY2xpZW50SGVpZ2h0O1xuXG4gICAgLy8gQWRqdXN0bWVudCB2YWx1ZXMgaWYgdGhlIG1lbnUgZXh0ZW5kcyBvZmYgdGhlIHNjcmVlbi5cbiAgICBsZXQgeE9mZnNldCA9IDA7XG4gICAgbGV0IHlPZmZzZXQgPSAwO1xuXG4gICAgaWYgKF9jbGllbnRYICsgdGhpcy5tZW51UG9zT2Zmc2V0LnggKyB0aGlzLm1lbnVXaWR0aCArIDEgPiBkb2NXaWR0aCkge1xuICAgICAgeE9mZnNldCA9XG4gICAgICAgIGRvY1dpZHRoIC0gKF9jbGllbnRYICsgdGhpcy5tZW51UG9zT2Zmc2V0LnggKyB0aGlzLm1lbnVXaWR0aCArIDEpO1xuICAgIH1cblxuICAgIGlmIChfY2xpZW50WSArIHRoaXMubWVudVBvc09mZnNldC55ICsgdGhpcy5tZW51SGVpZ2h0ICsgMSA+IGRvY0hlaWdodCkge1xuICAgICAgeU9mZnNldCA9XG4gICAgICAgIGRvY0hlaWdodCAtIChfY2xpZW50WSArIHRoaXMubWVudVBvc09mZnNldC55ICsgdGhpcy5tZW51SGVpZ2h0ICsgMSk7XG4gICAgfVxuXG4gICAgdGhpcy5zdmcuc2V0QXR0cmlidXRlKFxuICAgICAgXCJ0cmFuc2Zvcm1cIixcbiAgICAgIGB0cmFuc2xhdGUoJHtcbiAgICAgICAgX2NsaWVudFggLVxuICAgICAgICB0aGlzLm1lbnVNYXJnaW4gK1xuICAgICAgICB0aGlzLm1lbnVQb3NPZmZzZXQueCArXG4gICAgICAgIHhPZmZzZXQgK1xuICAgICAgICB3aW5kb3cuc2Nyb2xsWFxuICAgICAgfSwgJHtcbiAgICAgICAgX2NsaWVudFkgLVxuICAgICAgICB0aGlzLm1lbnVNYXJnaW4gK1xuICAgICAgICB0aGlzLm1lbnVQb3NPZmZzZXQueSArXG4gICAgICAgIHlPZmZzZXQgK1xuICAgICAgICB3aW5kb3cuc2Nyb2xsWVxuICAgICAgfSlgXG4gICAgKTtcbiAgICB0aGlzLnVwZGF0ZUhpZ2hsaWdodChfY2xpZW50WCwgX2NsaWVudFkpO1xuICAgIHRoaXMuYnV0dG9uRG93blRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgfVxuXG4gIGJ1dHRvblVwKCkge1xuICAgIGlmIChwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMuYnV0dG9uRG93blRpbWUgPiB0aGlzLmNsaWNrUmVsZWFzZVdpbmRvdylcbiAgICAgIHRoaXMuZXJhc2UoKTtcbiAgfVxuXG4gIGVyYXNlKCkge1xuICAgIHRoaXMuZ3JvdXAucmVtb3ZlKCk7XG5cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5tZW51SXRlbXMpIHtcbiAgICAgIGl0ZW0uZ3JvdXAucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdmcuc2V0QXR0cmlidXRlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgdGhpcy5tZW51SXRlbXMgPSBbXTtcbiAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgYWRkTWVudUl0ZW0oX3RleHQsIF9mdW5jdGlvbiwgX2lkeCkge1xuICAgIGlmIChfaWR4ID09IG51bGwpIF9pZHggPSB0aGlzLm1lbnVJdGVtcy5sZW5ndGg7XG4gICAgdGhpcy5tZW51SXRlbXMuc3BsaWNlKFxuICAgICAgX2lkeCxcbiAgICAgIDAsXG4gICAgICBuZXcgTWVudUl0ZW0oX3RleHQsIHRoaXMuZm9udFNpemUsIHRoaXMuZ3JvdXAsIF9pZHgsIF9mdW5jdGlvbilcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlSGlnaGxpZ2h0KF9jbGllbnRYLCBfY2xpZW50WSkge1xuICAgIGlmICh0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgZm9yIChjb25zdCB4IG9mIHRoaXMubWVudUl0ZW1zKSB7XG4gICAgICAgIHgudW5oaWdobGlnaHQoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1lbnVNb3VzZU92ZXIgPSBkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludChfY2xpZW50WCwgX2NsaWVudFkpO1xuICAgICAgZm9yIChjb25zdCB4IG9mIHRoaXMubWVudUl0ZW1zKSB7XG4gICAgICAgIGlmIChtZW51TW91c2VPdmVyLmluY2x1ZGVzKHgucmVjdCkpIHtcbiAgICAgICAgICB4LmhpZ2hsaWdodCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0SGlnaGxpZ2h0ZWQoKSB7XG4gICAgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICBmb3IgKGNvbnN0IHggb2YgdGhpcy5tZW51SXRlbXMpIHtcbiAgICAgICAgaWYgKHguaXNIaWdobGlnaHRlZCkgcmV0dXJuIHg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGdldEhpZ2hsaWdodGVkVGV4dCgpIHtcbiAgICBjb25zdCBoaWdobGlnaHRlZCA9IHRoaXMuZ2V0SGlnaGxpZ2h0ZWQoKTtcbiAgICByZXR1cm4gaGlnaGxpZ2h0ZWQgPyBoaWdobGlnaHRlZC5zdmdUZXh0LnRleHQudGV4dENvbnRlbnQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBhY3RpdmF0ZVNlbGVjdGlvbihfc2VsZWN0aW9uID0gXCJoaWdobGlnaHRlZFwiKSB7XG4gICAgaWYgKF9zZWxlY3Rpb24gPT09IFwiaGlnaGxpZ2h0ZWRcIikgX3NlbGVjdGlvbiA9IHRoaXMuZ2V0SGlnaGxpZ2h0ZWRUZXh0KCk7XG5cbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLm1lbnVJdGVtcy5maW5kKChfZSkgPT4gX2UudGV4dCA9PSBfc2VsZWN0aW9uKTtcblxuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIHJldHVybiBhY3RpdmUuZnVuY3Rpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5jbGFzcyBNZW51SXRlbSB7XG4gIHJlY3Q7XG4gIGdyb3VwO1xuICB0ZXh0O1xuICBzdmdUZXh0O1xuICBpc0hpZ2hsaWdodGVkO1xuICBmdW5jdGlvbnM7XG5cbiAgY29uc3RydWN0b3IoX3RleHQsIF9mb250U2l6ZSwgX3BhcmVudCwgX2lkeCwgX2Z1bmN0aW9uKSB7XG4gICAgdGhpcy50ZXh0ID0gX3RleHQ7XG4gICAgdGhpcy5yZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgXCJyZWN0XCIpO1xuICAgIHRoaXMuZ3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCBcImdcIik7XG4gICAgdGhpcy5ncm91cC5hcHBlbmRDaGlsZCh0aGlzLnJlY3QpO1xuICAgIF9wYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5ncm91cCk7XG4gICAgdGhpcy5zdmdUZXh0ID0gbmV3IFNWR1RleHQoX3RleHQsIHRoaXMuZ3JvdXAsIF9pZHgsIF9mb250U2l6ZSk7XG4gICAgdGhpcy5yZWN0LnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJyZ2JhKDAsIDAsIDAsIDApXCIpO1xuICAgIHRoaXMucmVjdC5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgYCR7X2ZvbnRTaXplICogMS4yfWApO1xuICAgIHRoaXMucmVjdC5jbGFzc0xpc3QuYWRkKFwibWVudS1pdGVtXCIpO1xuXG4gICAgdGhpcy5pc0hpZ2hsaWdodGVkID0gZmFsc2U7XG4gICAgdGhpcy5mdW5jdGlvbiA9IF9mdW5jdGlvbjtcbiAgfVxuXG4gIGhpZ2hsaWdodCgpIHtcbiAgICB0aGlzLnJlY3QuY2xhc3NMaXN0LmFkZChcIm1lbnUtaGlnaGxpZ2h0XCIpO1xuICAgIHRoaXMuaXNIaWdobGlnaHRlZCA9IHRydWU7XG4gIH1cblxuICB1bmhpZ2hsaWdodCgpIHtcbiAgICB0aGlzLnJlY3QuY2xhc3NMaXN0LnJlbW92ZShcIm1lbnUtaGlnaGxpZ2h0XCIpO1xuICAgIHRoaXMuaXNIaWdobGlnaHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIFNWR1RleHQoX2NvbnRlbnQsIF9wYXJlbnQsIF9pZCA9IC0xLCBfZm9udFNpemUgPSAxMCkge1xuICB0aGlzLmZvbnRTaXplID0gX2ZvbnRTaXplO1xuICB0aGlzLnhNYXJnaW4gPSB0aGlzLmZvbnRTaXplICogMC4yO1xuICB0aGlzLnRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCBcInRleHRcIik7XG4gIHRoaXMudGV4dC50ZXh0Q29udGVudCA9IF9jb250ZW50O1xuICB0aGlzLnRleHQuc2V0QXR0cmlidXRlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKTtcbiAgdGhpcy50ZXh0LmNsYXNzTGlzdC5hZGQoYG1lbnUtdGV4dC0ke19pZH1gKTtcbiAgdGhpcy50ZXh0LmNsYXNzTGlzdC5hZGQoXCJtZW51LXRleHRcIik7XG4gIF9wYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy50ZXh0KTtcbiAgdGhpcy50ZXh0LnNldEF0dHJpYnV0ZShcInhcIiwgYCR7dGhpcy54TWFyZ2lufWApO1xuICB0aGlzLnRleHQuc2V0QXR0cmlidXRlKFwieVwiLCBgJHt0aGlzLmZvbnRTaXplICogMC45fWApO1xuICB0aGlzLnRleHQuc2V0QXR0cmlidXRlKFwiZm9udC1zaXplXCIsIGAke3RoaXMuZm9udFNpemV9cHhgKTtcbn1cbiIsIi8vIEZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYl9TdG9yYWdlX0FQSS9cbi8vIFVzaW5nX3RoZV9XZWJfU3RvcmFnZV9BUElcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKF90eXBlKSB7XG4gIGxldCBzdG9yYWdlO1xuICB0cnkge1xuICAgIHN0b3JhZ2UgPSB3aW5kb3dbX3R5cGVdO1xuICAgIGNvbnN0IHggPSBcIl9fc3RvcmFnZV90ZXN0X19cIjtcbiAgICBzdG9yYWdlLnNldEl0ZW0oeCwgeCk7XG4gICAgc3RvcmFnZS5yZW1vdmVJdGVtKHgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGUgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiZcbiAgICAgIC8vIGV2ZXJ5dGhpbmcgZXhjZXB0IEZpcmVmb3hcbiAgICAgIChlLmNvZGUgPT09IDIyIHx8XG4gICAgICAgIC8vIEZpcmVmb3hcbiAgICAgICAgZS5jb2RlID09PSAxMDE0IHx8XG4gICAgICAgIC8vIHRlc3QgbmFtZSBmaWVsZCB0b28sIGJlY2F1c2UgY29kZSBtaWdodCBub3QgYmUgcHJlc2VudFxuICAgICAgICAvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XG4gICAgICAgIGUubmFtZSA9PT0gXCJRdW90YUV4Y2VlZGVkRXJyb3JcIiB8fFxuICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgIGUubmFtZSA9PT0gXCJOU19FUlJPUl9ET01fUVVPVEFfUkVBQ0hFRFwiKSAmJlxuICAgICAgLy8gYWNrbm93bGVkZ2UgUXVvdGFFeGNlZWRlZEVycm9yIG9ubHkgaWYgdGhlcmUncyBzb21ldGhpbmcgYWxyZWFkeSBzdG9yZWRcbiAgICAgIHN0b3JhZ2UgJiZcbiAgICAgIHN0b3JhZ2UubGVuZ3RoICE9PSAwXG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgZG9tIGZyb20gXCIuL2RvbS5qc1wiO1xuaW1wb3J0IHRpbWV6b25lU3RyaW5nIGZyb20gXCIuL3RpbWV6b25lLXN0cmluZy5qc1wiO1xuaW1wb3J0IFJpZ2h0Q2xpY2tNZW51IGZyb20gXCIuL3JpZ2h0LWNsaWNrLW1lbnUuanNcIjtcbmltcG9ydCBzdG9yYWdlQXZhaWxhYmxlIGZyb20gXCIuL3N0b3JhZ2UtYXZhaWxhYmxlLmpzXCI7XG5cbmNsYXNzIFRhc2sge1xuICB0aXRsZTtcbiAgZHVlRGF0ZTtcbiAgZHVlRGF0ZVN0cjtcbiAgZHVlVGltZTtcbiAgZHVlVGltZVN0cjtcbiAgZGVzY3JpcHRpb247XG4gIHByaW9yaXR5O1xuICBwcm9ncmVzcztcbiAgbm90ZXM7XG4gIGlkO1xuICBkZXB0aDtcbiAgY3VycmVudGx5RWRpdGluZztcbiAgdXNlUHJvZ3Jlc3NGcm9tU3VidGFza3M7XG4gIHN1YnRhc2tMaXN0O1xuICBzdXBlcnRhc2tMaXN0O1xuICBleHBhbmRlZDtcbiAgc2VsZWN0ZWQ7XG4gIGRvbURpdjtcbiAgc3RhdGljIGxhc3RJZCA9IC0xO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIF90aXRsZSxcbiAgICBfZHVlRGF0ZVN0cixcbiAgICBfZHVlVGltZVN0cixcbiAgICBfZGVzY3JpcHRpb24sXG4gICAgX3ByaW9yaXR5LFxuICAgIF9wcm9ncmVzcyxcbiAgICBfbm90ZXMsXG4gICAgX3N1cGVydGFza0xpc3QsXG4gICAgX2lzQ2xvbmVcbiAgKSB7XG4gICAgdGhpcy50aXRsZSA9IF90aXRsZSB8fCBcIlwiO1xuICAgIHRoaXMuZHVlRGF0ZVN0ciA9IF9kdWVEYXRlU3RyO1xuICAgIHRoaXMuZHVlVGltZVN0ciA9IF9kdWVUaW1lU3RyO1xuICAgIHRoaXMudXBkYXRlRHVlKCk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IF9kZXNjcmlwdGlvbiB8fCBcIlwiO1xuICAgIHRoaXMucHJpb3JpdHkgPSBfcHJpb3JpdHkgfHwgMDtcbiAgICB0aGlzLnByb2dyZXNzID0gX3Byb2dyZXNzIHx8IDA7XG4gICAgdGhpcy5ub3RlcyA9IF9ub3RlcyB8fCBcIlwiO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgIGlmIChfc3VwZXJ0YXNrTGlzdCkge1xuICAgICAgX3N1cGVydGFza0xpc3QuYWRkKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1cGVydGFza0xpc3QgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudGx5RWRpdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuc3VidGFza0xpc3QgPSBuZXcgVGFza0xpc3QodGhpcyk7XG4gICAgdGhpcy5leHBhbmRlZCA9IHRoaXMuaGFzQ29udGVudCgpO1xuICAgIHRoaXMudXNlUHJvZ3Jlc3NGcm9tU3VidGFza3MgPSBmYWxzZTtcblxuICAgIC8vIFRhc2tzIHRoYXQgbGl2ZSBpbiB0aGUgY29weSBidWZmZXIgaGF2ZSBubyBJRCB0byBlbnN1cmUgdGhhdCBwYXN0ZWRcbiAgICAvLyB0YXNrcycgSURzIGFyZSBjb250aWd1b3VzIHdpdGhvdXQgaGF2aW5nIHRvIGRlY3JlbWVudCBUYXNrLmxhc3RJZC5cbiAgICBpZiAoIV9pc0Nsb25lKSB7XG4gICAgICB0aGlzLmFzc2lnbk5ld0lkKCk7XG4gICAgICB0aGlzLnVwZGF0ZURlcHRoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaWQgPSAtMTtcbiAgICB9XG4gIH1cblxuICBjbG9uZShfcmVjdXJzaXZlLCBfc3VwZXJ0YXNrTGlzdCwgX2lkeCkge1xuICAgIHZhciBjbG9uZWQgPSBuZXcgVGFzayhcbiAgICAgIHRoaXMudGl0bGUsXG4gICAgICB0aGlzLmR1ZURhdGVTdHIsXG4gICAgICB0aGlzLmR1ZVRpbWVTdHIsXG4gICAgICB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgdGhpcy5wcmlvcml0eSxcbiAgICAgIHRoaXMucHJvZ3Jlc3MsXG4gICAgICB0aGlzLm5vdGVzLFxuICAgICAgbnVsbCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIGNsb25lZC5leHBhbmRlZCA9IHRoaXMuZXhwYW5kZWQ7XG4gICAgY2xvbmVkLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgY2xvbmVkLnVzZVByb2dyZXNzRnJvbVN1YnRhc2tzID0gdGhpcy51c2VQcm9ncmVzc0Zyb21TdWJ0YXNrcztcblxuICAgIGlmIChfc3VwZXJ0YXNrTGlzdCkge1xuICAgICAgX3N1cGVydGFza0xpc3QuYWRkKGNsb25lZCwgX2lkeCk7XG4gICAgfVxuXG4gICAgaWYgKF9yZWN1cnNpdmUpIHtcbiAgICAgIGNsb25lZC5zdWJ0YXNrTGlzdC5leHBhbmRlZCA9IHRoaXMuc3VidGFza0xpc3QuZXhwYW5kZWQ7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdWJ0YXNrTGlzdC50YXNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnN1YnRhc2tMaXN0LnRhc2tzW2ldLmNsb25lKF9yZWN1cnNpdmUsIGNsb25lZC5zdWJ0YXNrTGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxuXG4gIHVwZGF0ZUR1ZSgpIHtcbiAgICBjb25zdCB0aW1lem9uZSA9IHRpbWV6b25lU3RyaW5nKCk7XG5cbiAgICBpZiAodGhpcy5kdWVEYXRlU3RyICYmIHRoaXMuZHVlRGF0ZVN0ci5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBgJHt0aGlzLmR1ZURhdGVTdHJ9VDAwOjAwOjAwJHt0aW1lem9uZX1gO1xuICAgICAgdGhpcy5kdWVEYXRlID0gbmV3IERhdGUoZGF0ZVN0cmluZyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZHVlVGltZVN0ciAmJiB0aGlzLmR1ZVRpbWVTdHIubGVuZ3RoKSB7XG4gICAgICBjb25zdCBkYXRlU3RyaW5nID0gYDIwMDAtMDEtMDFUJHt0aGlzLmR1ZVRpbWVTdHJ9OjAwJHt0aW1lem9uZX1gO1xuICAgICAgdGhpcy5kdWVUaW1lID0gbmV3IERhdGUoZGF0ZVN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlRGVwdGgoKSB7XG4gICAgdGhpcy5kZXB0aCA9IDA7XG5cbiAgICBpZiAodGhpcy5zdXBlcnRhc2tMaXN0ID09IG51bGwpIHJldHVybjtcblxuICAgIGxldCBzdXBlcnRhc2sgPSB0aGlzLnN1cGVydGFza0xpc3Qub3duZXI7XG4gICAgd2hpbGUgKHN1cGVydGFzayAhPSBudWxsKSB7XG4gICAgICB0aGlzLmRlcHRoKys7XG4gICAgICBzdXBlcnRhc2sgPSBzdXBlcnRhc2suc3VwZXJ0YXNrTGlzdFxuICAgICAgICA/IHN1cGVydGFzay5zdXBlcnRhc2tMaXN0Lm93bmVyXG4gICAgICAgIDogbnVsbDtcbiAgICB9XG4gIH1cblxuICBkZWxldGUoX3JlY3Vyc2l2ZSkge1xuICAgIGlmICh0aGlzLnN1cGVydGFza0xpc3QpIHtcbiAgICAgIGlmICh0aGlzLmRvbURpdikge1xuICAgICAgICB0aGlzLmRvbURpdi50YXNrLnJlbW92ZSgpO1xuICAgICAgICBpZiAoX3JlY3Vyc2l2ZSkgdGhpcy5kb21EaXYuc3VidGFza3MucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnN1cGVydGFza0xpc3QucmVtb3ZlSWQodGhpcy5pZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaGFzQ29udGVudCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKHRoaXMuZGVzY3JpcHRpb24gJiYgdGhpcy5kZXNjcmlwdGlvbiAhPSBcIlwiKSB8fFxuICAgICAgdGhpcy5wcmlvcml0eSB8fFxuICAgICAgdGhpcy5wcm9ncmVzcyB8fFxuICAgICAgKHRoaXMubm90ZXMgJiYgdGhpcy5ub3Rlcy5sZW5ndGgpXG4gICAgKTtcbiAgfVxuXG4gIGxvZygpIHtcbiAgICBsb2dnZXIubG9nVGFzayh0aGlzKTtcbiAgfVxuXG4gIGFzc2lnbk5ld0lkKCkge1xuICAgIHRoaXMuaWQgPSBUYXNrLmdlbmVyYXRlSWQoKTtcbiAgfVxuXG4gIGFzc2lnbk5ld0lkUmVjdXJzaXZlKCkge1xuICAgIHRoaXMuYXNzaWduTmV3SWQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdWJ0YXNrTGlzdC50YXNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5zdWJ0YXNrTGlzdC50YXNrc1tpXS5hc3NpZ25OZXdJZFJlY3Vyc2l2ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlZnJlc2hEb20oX3JlY3Vyc2l2ZSkge1xuICAgIGlmICh0aGlzLmRvbURpdikge1xuICAgICAgdGhpcy5kb21EaXYudGFzay5yZW1vdmUoKTtcbiAgICAgIGlmIChfcmVjdXJzaXZlKSB0aGlzLmRvbURpdi5zdWJ0YXNrcy5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy51c2VQcm9ncmVzc0Zyb21TdWJ0YXNrcykge1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMuZ2V0UHJvZ3Jlc3NSZWN1cnNpdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLmRvbURpdiA9IGRvbS5jcmVhdGVDYXJkKHRoaXMpO1xuICAgIGxpc3RlbmVyLmFkZEV4cGFuZFRhc2soXG4gICAgICB0aGlzLmRvbURpdi50YXNrRXhwYW5kLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuZG9tRGl2LnRhc2ssXG4gICAgICB0aGlzLmRvbURpdi50YXNrRXhwYW5kUGF0aCxcbiAgICAgIHRoaXMuZG9tRGl2LmhlYWRlclxuICAgICk7XG4gICAgbGlzdGVuZXIuYWRkT3BlbkVkaXQodGhpcy5kb21EaXYuZWRpdE9wZW4sIHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuZG9tRGl2LnByb2dyZXNzU3ZnICYmICF0aGlzLnVzZVByb2dyZXNzRnJvbVN1YnRhc2tzKSB7XG4gICAgICBsaXN0ZW5lci5hZGRQcm9ncmVzcyh0aGlzLmRvbURpdi5wcm9ncmVzc1N2ZywgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZG9tRGl2Lm5lZWRTdWJ0YXNrc0xpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lci5hZGRFeHBhbmRTdWJ0YXNrcyhcbiAgICAgICAgdGhpcy5kb21EaXYuc3VidGFza3NFeHBhbmQsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMuZG9tRGl2LnN1YnRhc2tzXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChfcmVjdXJzaXZlKSB7XG4gICAgICB0aGlzLnN1YnRhc2tMaXN0LnJlZnJlc2hEb20oX3JlY3Vyc2l2ZSk7XG4gICAgfVxuXG4gICAgLy8gRXZlbiBpZiBub3QgdWRhdGluZyByZWN1cnNpdmVseSwgd2UgbmVlZCB0byBjaGVjayBhbGwgc3VwZXJ0YXNrcyB0b1xuICAgIC8vIHNlZSBpZiB0aGVpciBwcm9ncmVzcyB2YWx1ZXMgYXJlIGNoYW5nZWQgYmFzZWQgb24gdGhpcyB0YXNrJ3MgcHJvZ3Jlc3NcbiAgICAvLyBhbmQgdXBkYXRlIHRoZW0gYWNjb3JkaW5nbHkuXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRoaXMuY2hhaW4pIHtcbiAgICAgIGlmICh0YXNrLnVzZVByb2dyZXNzRnJvbVN1YnRhc2tzKSB7XG4gICAgICAgIHRhc2sucmVmcmVzaERvbShmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTWFza3Mgc3VidGFzayBsaXN0J3MgYWRkIGZ1bmN0aW9uIGZvciBlYXNlIG9mIHVzZS5cbiAgYWRkU3VidGFzayhfdGFzaywgX2lkeCkge1xuICAgIHJldHVybiB0aGlzLnN1YnRhc2tMaXN0LmFkZChfdGFzaywgX2lkeCk7XG4gIH1cblxuICAvLyBNYXNrcyBzdWJ0YXNrIGxpc3QncyByZW1vdmUgZnVuY3Rpb24gZm9yIGVhc2Ugb2YgdXNlLlxuICByZW1vdmVTdWJ0YXNrSWQoX2lkKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VidGFza0xpc3QucmVtb3ZlSWQoX2lkKTtcbiAgfVxuXG4gIC8vIE1hc2tzIHN1YnRhc2sgbGlzdCdzIHJlbW92ZSBmdW5jdGlvbiBmb3IgZWFzZSBvZiB1c2UuXG4gIHJlbW92ZVN1YnRhc2tJZHgoX2lkeCkge1xuICAgIHJldHVybiB0aGlzLnN1YnRhc2tMaXN0LnJlbW92ZUlkeChfaWR4KTtcbiAgfVxuXG4gIGdldFByb2dyZXNzUmVjdXJzaXZlKF9wcm9ncmVzcykge1xuICAgIGlmIChfcHJvZ3Jlc3MgPT0gbnVsbCkgX3Byb2dyZXNzID0gMDtcblxuICAgIGlmICghdGhpcy51c2VQcm9ncmVzc0Zyb21TdWJ0YXNrcyAmJiB0aGlzLnByb2dyZXNzID4gMCkge1xuICAgICAgaWYgKHRoaXMucHJvZ3Jlc3MgPT0gMSAmJiAoX3Byb2dyZXNzID09IDEgfHwgX3Byb2dyZXNzID09IDApKSB7XG4gICAgICAgIF9wcm9ncmVzcyA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvZ3Jlc3MgPT0gMyAmJiAoX3Byb2dyZXNzID09IDMgfHwgX3Byb2dyZXNzID09IDApKSB7XG4gICAgICAgIF9wcm9ncmVzcyA9IDM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcHJvZ3Jlc3MgPSAyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgdGFzayBvZiB0aGlzLnN1YnRhc2tMaXN0LnRhc2tzKSB7XG4gICAgICBfcHJvZ3Jlc3MgPSB0YXNrLmdldFByb2dyZXNzUmVjdXJzaXZlKF9wcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9wcm9ncmVzcztcbiAgfVxuXG4gIC8vIE1hc2tzIHN1YnRhc2sgbGlzdCdzIHRhc2tzIGZvciBlYXNlIG9mIHVzZS5cbiAgZ2V0IHN1YnRhc2tzKCkge1xuICAgIHJldHVybiB0aGlzLnN1YnRhc2tMaXN0LnRhc2tzO1xuICB9XG5cbiAgLy8gTWFza3Mgc3VwZXJ0YXNrIGxpc3QncyBvd25lciBmb3IgZWFzZSBvZiB1c2UuXG4gIGdldCBzdXBlcnRhc2soKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VwZXJ0YXNrTGlzdCA/IHRoaXMuc3VwZXJ0YXNrTGlzdC5vd25lciA6IG51bGw7XG4gIH1cblxuICAvLyBSZXR1cm5zIGFuIGFycmF5IG9mIGFsbCBvZiBhIHRhc2sncyBzdXBlcnRhc2tzIHVwIHRvIHRoZSByb290IHRhc2suIFRoZVxuICAvLyByb290IHRhc2sgaXMgdGhlIGxhc3QgaW4gdGhlIGFycmF5LlxuICBnZXQgY2hhaW4oKSB7XG4gICAgbGV0IHN1cGVydGFzayA9IHRoaXMuc3VwZXJ0YXNrTGlzdC5vd25lcjtcbiAgICBjb25zdCBjaGFpbiA9IFtdO1xuXG4gICAgd2hpbGUgKHN1cGVydGFzaykge1xuICAgICAgY2hhaW4ucHVzaChzdXBlcnRhc2spO1xuICAgICAgc3VwZXJ0YXNrID0gc3VwZXJ0YXNrLnN1cGVydGFza0xpc3Qub3duZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYWluO1xuICB9XG5cbiAgc3RhdGljIGdlbmVyYXRlSWQoKSB7XG4gICAgLy8gSWYgb3ZlcmZsb3cgaGFwcGVucywgbm8gaXQgZGlkbid0LlxuICAgIGlmIChUYXNrLmxhc3RJZCA+PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgVGFzay5sYXN0SWQgPSAtMTtcbiAgICByZXR1cm4gKytUYXNrLmxhc3RJZDtcbiAgfVxuXG4gIHN0YXRpYyByZXNldElkcygpIHtcbiAgICBUYXNrLmxhc3RJZCA9IC0xO1xuICB9XG59XG5cbmNsYXNzIFRhc2tMaXN0IHtcbiAgdGFza3M7XG4gIG93bmVyO1xuICBleHBhbmRlZCA9IGZhbHNlO1xuICBzdGF0aWMgd3JpdGVFcnJvclNob3duID0gZmFsc2U7XG4gIHN0YXRpYyBERUZBVUxUX0tFWSA9IFwidGFza0xpc3RcIjtcblxuICBjb25zdHJ1Y3Rvcihfb3duZXIsIF90YXNrcykge1xuICAgIHRoaXMub3duZXIgPSBfb3duZXI7XG4gICAgdGhpcy50YXNrcyA9IFtdO1xuXG4gICAgaWYgKF90YXNrcykge1xuICAgICAgX3Rhc2tzLmZvckVhY2goKF90YXNrKSA9PiB7XG4gICAgICAgIHRoaXMuYWRkKF90YXNrKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZVRhc2soX2lkeCwgX3Nob3dJbnB1dCkge1xuICAgIGlmICghX2lkeCkge1xuICAgICAgX2lkeCA9IHRoaXMudGFza3MubGVuZ3RoICsgMTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdUYXNrID0gbmV3IFRhc2soKTtcbiAgICB0aGlzLmFkZChuZXdUYXNrLCBfaWR4KTtcblxuICAgIGlmICh0aGlzLm93bmVyKSB7XG4gICAgICB0aGlzLm93bmVyLnJlZnJlc2hEb20odHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVmcmVzaERvbShmYWxzZSk7XG4gICAgfVxuXG4gICAgdGhpcy53cml0ZVJvb3RUb0xvY2FsU3RvcmFnZSgpO1xuXG4gICAgaWYgKF9zaG93SW5wdXQgJiYgIXN0YXRlTWFuYWdlci5jdXJyZW50bHlFZGl0aW5nKSB7XG4gICAgICBuZXdUYXNrLmN1cnJlbnRseUVkaXRpbmcgPSB0cnVlO1xuICAgICAgc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcgPSB0cnVlO1xuICAgICAgY29uc3QgaW5wdXRCb3ggPSBkb20uY3JlYXRlSW5wdXRCb3gobmV3VGFzayk7XG4gICAgICBsaXN0ZW5lci5hZGRJbnB1dENhcmQobmV3VGFzaywgaW5wdXRCb3gpO1xuICAgIH1cbiAgfVxuXG4gIGFkZChfdGFzaywgX2lkeCkge1xuICAgIGlmIChfaWR4ID09IG51bGwpIHtcbiAgICAgIF9pZHggPSB0aGlzLnRhc2tzLmxlbmd0aDtcbiAgICB9XG5cbiAgICB0aGlzLnRhc2tzLnNwbGljZShfaWR4LCAwLCBfdGFzayk7XG4gICAgX3Rhc2suc3VwZXJ0YXNrTGlzdCA9IHRoaXM7XG4gICAgX3Rhc2sudXBkYXRlRGVwdGgoKTtcbiAgfVxuXG4gIGdldFRhc2tJZHgoX3Rhc2spIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGFza3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLnRhc2tzW2ldLmlkID09IF90YXNrLmlkKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHJlbW92ZUlkKF9pZCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50YXNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMudGFza3NbaV0uaWQgPT0gX2lkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW92ZUlkeChpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZW1vdmVJZHgoX2lkeCkge1xuICAgIHRoaXMudGFza3NbX2lkeF0uc3VwZXJ0YXNrTGlzdCA9IG51bGw7XG4gICAgdGhpcy50YXNrcy5zcGxpY2UoX2lkeCwgMSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGdldFRhc2tCeUlkKF9pZCwgX3JlY3Vyc2l2ZSkge1xuICAgIGxldCBpZFRhc2sgPSBudWxsO1xuXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRoaXMudGFza3MpIHtcbiAgICAgIGlmICh0YXNrLmlkID09IF9pZCkge1xuICAgICAgICByZXR1cm4gdGFzaztcbiAgICAgIH0gZWxzZSBpZiAoX3JlY3Vyc2l2ZSAmJiB0YXNrLnN1YnRhc2tMaXN0Lmhhc1Rhc2tzKCkpIHtcbiAgICAgICAgaWRUYXNrID0gdGFzay5zdWJ0YXNrTGlzdC5nZXRUYXNrQnlJZChfaWQsIF9yZWN1cnNpdmUpO1xuICAgICAgICBpZiAoaWRUYXNrKSByZXR1cm4gaWRUYXNrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpZFRhc2s7XG4gIH1cblxuICBoYXNUYXNrcygpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5sZW5ndGggPj0gMTtcbiAgfVxuXG4gIC8vIFJldHVybnMgYW4gb3JkZXJlZCBhcnJheSBvZiBJRHMgdGhhdCByZWZsZWN0cyB0aGUgY3VycmVudCBvcmRlciBvZiB0YXNrc1xuICAvLyB3aXRoaW4gdGhlIHRhc2tMaXN0J3MgdHJlZSBzdHJ1Y3R1cmUuXG4gIGdldElkT3JkZXIoX3JlY3Vyc2l2ZSkge1xuICAgIGNvbnN0IG9yZGVyID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHRhc2sgb2YgdGhpcy50YXNrcykge1xuICAgICAgb3JkZXIucHVzaCh0YXNrLmlkKTtcblxuICAgICAgaWYgKF9yZWN1cnNpdmUpIHtcbiAgICAgICAgb3JkZXIucHVzaCguLi50YXNrLnN1YnRhc2tMaXN0LmdldElkT3JkZXIoX3JlY3Vyc2l2ZSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcmRlcjtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHdoaWxlICh0aGlzLnRhc2tzLmxlbmd0aCkge1xuICAgICAgdGhpcy50YXNrc1swXS5kZWxldGUodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmVmcmVzaERvbShfcmVjdXJzaXZlKSB7XG4gICAgLy8gVG8gZW5zdXJlIHByb3BlciBvcmRlciwgcmVtb3ZlIGFsbCB0YXNrcyBiZWZvcmUgcmVkcmF3aW5nIGFueSBvZiB0aGVtLlxuICAgIHRoaXMudGFza3MuZm9yRWFjaCgoX3Rhc2spID0+IHtcbiAgICAgIGlmIChfdGFzay5kb21EaXYpIHtcbiAgICAgICAgX3Rhc2suZG9tRGl2LnRhc2sucmVtb3ZlKCk7XG4gICAgICAgIGlmIChfcmVjdXJzaXZlKSBfdGFzay5kb21EaXYuc3VidGFza3MucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnRhc2tzLmZvckVhY2goKF90YXNrKSA9PiB7XG4gICAgICBfdGFzay5yZWZyZXNoRG9tKF9yZWN1cnNpdmUpO1xuICAgIH0pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRhc2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnRhc2tzW2ldLnJlZnJlc2hEb20oX3JlY3Vyc2l2ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVtb3ZlIGFsbCB0YXNrIHByb3BlcnRpZXMgdGhhdCBjYW4ndCBiZSBzdHJpbmdpZmllZCBieSBKU09OLiBUaGVzZVxuICAvLyBjYW4gYmUgcmVjb25zdHJ1Y3RlZCBvbiBwcm9qZWN0IGxvYWQgZXZlbiB3aXRob3V0IHNhdmluZyB0aGVtLlxuICBjbG9uZUpzb24oKSB7XG4gICAgY29uc3QganNvblRhc2tMaXN0ID0gbmV3IFRhc2tMaXN0KG51bGwsIG51bGwpO1xuICAgIGpzb25UYXNrTGlzdC5leHBhbmRlZCA9IHRoaXMuZXhwYW5kZWQ7XG5cbiAgICBmb3IgKGNvbnN0IHRhc2sgb2YgdGhpcy50YXNrcykge1xuICAgICAgY29uc3QgY2xvbmVkID0gdGFzay5jbG9uZShmYWxzZSwgbnVsbCk7XG4gICAgICBqc29uVGFza0xpc3QuYWRkKGNsb25lZCk7XG4gICAgICBjbG9uZWQuaWQgPSB0YXNrLmlkO1xuICAgICAgY2xvbmVkLmRlcHRoID0gdGFzay5kZXB0aDtcbiAgICAgIGNsb25lZC5kdWVEYXRlID0gbnVsbDtcbiAgICAgIGNsb25lZC5kdWVUaW1lID0gbnVsbDtcbiAgICAgIGNsb25lZC5zdWJ0YXNrTGlzdCA9IHRhc2suc3VidGFza0xpc3QuY2xvbmVKc29uKCk7XG4gICAgICBjbG9uZWQuc3VwZXJ0YXNrTGlzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb25UYXNrTGlzdDtcbiAgfVxuXG4gIC8vIFJlYnVpbGQgdGFza0xpc3Qgc3RydWN0dXJlIGZyb20gSlNPTiBzdHJpbmcgYW5kIHJlY2FsY3VsYXRlIHRoZSB2YWx1ZXNcbiAgLy8gdGhhdCB3ZXJlbid0IHNhdmVkIGluIHRoZSBzdHJpbmcuIEFueSBjdXJyZW50IGNvbnRlbnRzIG9mIHRoaXMgdGFza0xpc3RcbiAgLy8gd2lsbCBiZSBkZWxldGVkIGFuZCByZXBsYWNlZCBieSB0aGUgSlNPTiBkYXRhLlxuICBpbml0RnJvbUpzb24oX2pzb25PYmosIF9vd25lcikge1xuICAgIHRoaXMub3duZXIgPSBfb3duZXI7XG4gICAgdGhpcy5leHBhbmRlZCA9IF9qc29uT2JqLmV4cGFuZGVkO1xuXG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIF9qc29uT2JqLnRhc2tzKSB7XG4gICAgICBjb25zdCBsb2FkZWRUYXNrID0gbmV3IFRhc2soXG4gICAgICAgIHRhc2sudGl0bGUsXG4gICAgICAgIHRhc2suZHVlRGF0ZVN0cixcbiAgICAgICAgdGFzay5kdWVUaW1lU3RyLFxuICAgICAgICB0YXNrLmRlc2NyaXB0aW9uLFxuICAgICAgICB0YXNrLnByaW9yaXR5LFxuICAgICAgICB0YXNrLnByb2dyZXNzLFxuICAgICAgICB0YXNrLm5vdGVzLFxuICAgICAgICB0aGlzLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICAgIGxvYWRlZFRhc2suZXhwYW5kZWQgPSB0YXNrLmV4cGFuZGVkO1xuICAgICAgbG9hZGVkVGFzay51c2VQcm9ncmVzc0Zyb21TdWJ0YXNrcyA9IHRhc2sudXNlUHJvZ3Jlc3NGcm9tU3VidGFza3M7XG4gICAgICBsb2FkZWRUYXNrLnN1YnRhc2tMaXN0LmluaXRGcm9tSnNvbih0YXNrLnN1YnRhc2tMaXN0LCBsb2FkZWRUYXNrKTtcbiAgICB9XG4gIH1cblxuICB3cml0ZVRvTG9jYWxTdG9yYWdlKF9rZXkpIHtcbiAgICBpZiAoc3RvcmFnZUF2YWlsYWJsZShcImxvY2FsU3RvcmFnZVwiKSkge1xuICAgICAgaWYgKCFfa2V5KSB7XG4gICAgICAgIF9rZXkgPSBUYXNrTGlzdC5ERUZBVUxUX0tFWTtcbiAgICAgIH1cblxuICAgICAgY29uc3QganNvblN0ciA9IEpTT04uc3RyaW5naWZ5KHRoaXMuY2xvbmVKc29uKCkpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oX2tleSwganNvblN0cik7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIVRhc2tMaXN0LndyaXRlRXJyb3JTaG93bikge1xuICAgICAgVGFza0xpc3Qud3JpdGVFcnJvclNob3duID0gdHJ1ZTtcbiAgICAgIGFsZXJ0KFxuICAgICAgICBcIllvdXIgYnJvd3NlciBlaXRoZXIgZG9lc24ndCBzdXBwb3J0IGxvY2FsIHN0b3JhZ2Ugb3IgaGFzIGl0IGRpc2FibGVkLCBzbyB5b3VyIHRhc2tzIHdpbGwgbm90IGJlIHNhdmVkIGFmdGVyIGxlYXZpbmcgdGhpcyBwYWdlLlwiXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHdyaXRlUm9vdFRvTG9jYWxTdG9yYWdlKF9rZXkpIHtcbiAgICBpZiAodGhpcy5vd25lcikge1xuICAgICAgdGhpcy5yb290LndyaXRlVG9Mb2NhbFN0b3JhZ2UoX2tleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud3JpdGVUb0xvY2FsU3RvcmFnZShfa2V5KTtcbiAgICB9XG4gIH1cblxuICByZXN0b3JlRnJvbUxvY2FsU3RvcmFnZShfa2V5KSB7XG4gICAgaWYgKHN0b3JhZ2VBdmFpbGFibGUoXCJsb2NhbFN0b3JhZ2VcIikpIHtcbiAgICAgIGlmICghX2tleSkge1xuICAgICAgICBfa2V5ID0gVGFza0xpc3QuREVGQVVMVF9LRVk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGpzb25PYmogPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShfa2V5KTtcblxuICAgICAgaWYgKGpzb25PYmopIHtcbiAgICAgICAgVGFzay5yZXNldElkcygpO1xuICAgICAgICBjb25zdCBqc29uU3RyID0gSlNPTi5wYXJzZShqc29uT2JqKTtcbiAgICAgICAgdGhpcy5pbml0RnJvbUpzb24oanNvblN0cik7XG4gICAgICAgIHRoaXMucmVmcmVzaERvbSh0cnVlKTtcblxuICAgICAgICBpZiAodGhpcy5oYXNUYXNrcygpKSBkb20uaGlkZUluc3RydWN0aW9ucygpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNsZWFyTG9jYWxTdG9yYWdlKF9rZXkpIHtcbiAgICBpZiAoc3RvcmFnZUF2YWlsYWJsZShcImxvY2FsU3RvcmFnZVwiKSkge1xuICAgICAgaWYgKCFfa2V5KSB7XG4gICAgICAgIF9rZXkgPSBUYXNrTGlzdC5ERUZBVUxUX0tFWTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oX2tleSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHJvb3QoKSB7XG4gICAgaWYgKHRoaXMub3duZXIpIHtcbiAgICAgIGlmICh0aGlzLm93bmVyLmNoYWluLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vd25lci5jaGFpblt0aGlzLm93bmVyLmNoYWluLmxlbmd0aCAtIDFdLnN1cGVydGFza0xpc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5vd25lci5zdXBlcnRhc2tMaXN0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmNvbnN0IHN0YXRlTWFuYWdlciA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGN1cnJlbnRseUVkaXRpbmcgPSBmYWxzZTtcbiAgY29uc3Qgc2VsZWN0aW9uQWRkVG8gPSBmYWxzZTtcbiAgY29uc3Qgc2VsZWN0aW9uTWFzcyA9IGZhbHNlO1xuICBjb25zdCB0b3VjaCA9IHtcbiAgICB0aW1lOiBbbnVsbCwgbnVsbF0sXG4gICAgcG9zOiBbbnVsbCwgbnVsbF0sXG4gICAgdG91Y2hlZElkOiBbbnVsbCwgbnVsbF0sXG4gIH07XG5cbiAgY29uc3Qgc2V0U2VsZWN0aW9uQWRkVG8gPSBmdW5jdGlvbiAoX3N0YXRlLCBfZSkge1xuICAgIGlmIChfZS5rZXkgPT0gXCJDb250cm9sXCIpIHtcbiAgICAgIHN0YXRlTWFuYWdlci5zZWxlY3Rpb25BZGRUbyA9IF9zdGF0ZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2V0U2VsZWN0aW9uTWFzcyA9IGZ1bmN0aW9uIChfc3RhdGUsIF9lKSB7XG4gICAgaWYgKF9lLmtleSA9PSBcIlNoaWZ0XCIpIHtcbiAgICAgIHN0YXRlTWFuYWdlci5zZWxlY3Rpb25NYXNzID0gX3N0YXRlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGN1cnJlbnRseUVkaXRpbmcsXG4gICAgc2VsZWN0aW9uQWRkVG8sXG4gICAgc2VsZWN0aW9uTWFzcyxcbiAgICBzZXRTZWxlY3Rpb25BZGRUbyxcbiAgICBzZXRTZWxlY3Rpb25NYXNzLFxuICAgIHRvdWNoLFxuICB9O1xufSkoKTtcblxuY29uc3QgbG9nZ2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgbG9nVGFzayA9IGZ1bmN0aW9uIChfdGFzaywgX3ByZXBlbmQpIHtcbiAgICBpZiAoIV9wcmVwZW5kKSBfcHJlcGVuZCA9IFwiXCI7XG4gICAgY29uc29sZS5sb2coX3ByZXBlbmQgKyBcIi0tLS0tLS0tLS0tLS0tLS1cIik7XG4gICAgY29uc29sZS5sb2coX3ByZXBlbmQgKyBcIlRpdGxlOiBcIiArIF90YXNrLnRpdGxlKTtcbiAgICBjb25zb2xlLmxvZyhfcHJlcGVuZCArIFwiRHVlIGRhdGU6IFwiICsgX3Rhc2suZHVlRGF0ZSk7XG4gICAgY29uc29sZS5sb2coX3ByZXBlbmQgKyBcIkR1ZSB0aW1lOiBcIiArIF90YXNrLmR1ZVRpbWUpO1xuICAgIGNvbnNvbGUubG9nKF9wcmVwZW5kICsgXCJEZXNjcmlwdGlvbjogXCIgKyBfdGFzay5kZXNjcmlwdGlvbik7XG4gICAgY29uc29sZS5sb2coX3ByZXBlbmQgKyBcIlByb2dyZXNzOiBcIiArIF90YXNrLnByb2dyZXNzKTtcbiAgICBjb25zb2xlLmxvZyhfcHJlcGVuZCArIFwiTm90ZXM6ICBcIiArIF90YXNrLm5vdGVzKTtcbiAgICBjb25zb2xlLmxvZyhfcHJlcGVuZCArIFwiSUQ6IFwiICsgX3Rhc2suaWQpO1xuICAgIGNvbnNvbGUubG9nKF9wcmVwZW5kICsgXCJEZXB0aDogXCIgKyBfdGFzay5kZXB0aCk7XG5cbiAgICBpZiAoX3Rhc2suc3VwZXJ0YXNrTGlzdCAmJiBfdGFzay5zdXBlcnRhc2tMaXN0Lm93bmVyKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgX3ByZXBlbmQgK1xuICAgICAgICAgIFwiU3VwZXJ0YXNrOiAoXCIgK1xuICAgICAgICAgIF90YXNrLnN1cGVydGFza0xpc3Qub3duZXIuaWQgK1xuICAgICAgICAgIFwiKSBcIiArXG4gICAgICAgICAgX3Rhc2suc3VwZXJ0YXNrTGlzdC5vd25lci50aXRsZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coX3ByZXBlbmQgKyBcIk5vIHN1cGVydGFza1wiKTtcbiAgICB9XG5cbiAgICBpZiAoX3Rhc2suc3VidGFza0xpc3QuaGFzVGFza3MoKSkge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIF9wcmVwZW5kICtcbiAgICAgICAgICBfdGFzay5zdWJ0YXNrTGlzdC50YXNrcy5sZW5ndGggK1xuICAgICAgICAgIFwiIHN1YnRhc2tcIiArXG4gICAgICAgICAgKF90YXNrLnN1YnRhc2tMaXN0LnRhc2tzLmxlbmd0aCAhPSAxID8gXCJzOlwiIDogXCI6XCIpXG4gICAgICApO1xuXG4gICAgICBfdGFzay5zdWJ0YXNrTGlzdC50YXNrcy5mb3JFYWNoKChfZWxlbSkgPT4ge1xuICAgICAgICBsb2dUYXNrKF9lbGVtLCBfcHJlcGVuZCArIFwiKiAgIFwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGxvZ1Rhc2ssXG4gIH07XG59KSgpO1xuXG5jb25zdCBjb3BpZXIgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWZmZXIgPSBbXTtcblxuICBjb25zdCByZW1vdmUgPSBmdW5jdGlvbiAoX3Rhc2tzLCBfcmVjdXJzaXZlLCBfcmVmcmVzaCkge1xuICAgIGlmICghKF90YXNrcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgX3Rhc2tzID0gW190YXNrc107XG4gICAgfVxuXG4gICAgaWYgKF9yZWN1cnNpdmUpIHtcbiAgICAgIF90YXNrcyA9IHJlZHVjZVJlY3Vyc2l2ZUlucHV0KF90YXNrcyk7XG4gICAgfVxuXG4gICAgY29uc3Qgcm9vdCA9IF90YXNrc1swXS5zdXBlcnRhc2tMaXN0LnJvb3Q7XG5cbiAgICBmb3IgKGNvbnN0IHRhc2sgb2YgX3Rhc2tzKSB7XG4gICAgICBsZXQgaW5zZXJ0SWR4ID0gdGFzay5zdXBlcnRhc2tMaXN0LmdldFRhc2tJZHgodGFzayk7XG4gICAgICBjb25zdCBzdXBlcnRhc2tMaXN0ID0gdGFzay5zdXBlcnRhc2tMaXN0O1xuICAgICAgY29uc3Qgc3VidGFza0xpc3QgPSB0YXNrLnN1YnRhc2tMaXN0O1xuICAgICAgdGFzay5kZWxldGUodHJ1ZSk7XG5cbiAgICAgIGlmICghX3JlY3Vyc2l2ZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1YnRhc2tMaXN0LnRhc2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc3VwZXJ0YXNrTGlzdC5hZGQoc3VidGFza0xpc3QudGFza3NbaV0sIGluc2VydElkeCsrKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoX3JlZnJlc2gpIHtcbiAgICAgICAgaWYgKHN1cGVydGFza0xpc3Qub3duZXIpIHtcbiAgICAgICAgICBzdXBlcnRhc2tMaXN0Lm93bmVyLnJlZnJlc2hEb20odHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3VwZXJ0YXNrTGlzdC5yZWZyZXNoRG9tKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcm9vdC53cml0ZVRvTG9jYWxTdG9yYWdlKCk7XG4gIH07XG5cbiAgY29uc3QgY29weSA9IGZ1bmN0aW9uIChfdGFza3MsIF9yZWN1cnNpdmUsIF9nbG9iYWxUYXNrTGlzdCkge1xuICAgIGlmICghKF90YXNrcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgX3Rhc2tzID0gW190YXNrc107XG4gICAgfVxuXG4gICAgY2xlYXJCdWZmZXIoKTtcblxuICAgIGlmIChfcmVjdXJzaXZlKSB7XG4gICAgICBfdGFza3MgPSByZWR1Y2VSZWN1cnNpdmVJbnB1dChfdGFza3MpO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSB0aGF0IHRhc2tzIGFyZSBjb3BpZWQgaW4gdmlzdWFsIG9yZGVyIGFuZCBub3QgaW4gc2VsZWN0aW9uIG9yZGVyLlxuICAgIGNvbnN0IGlkT3JkZXIgPSBfZ2xvYmFsVGFza0xpc3QuZ2V0SWRPcmRlcih0cnVlKTtcbiAgICBfdGFza3Muc29ydChmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICByZXR1cm4gaWRPcmRlci5pbmRleE9mKF9hLmlkKSA8IGlkT3JkZXIuaW5kZXhPZihfYi5pZCkgPyAtMSA6IDE7XG4gICAgfSk7XG5cbiAgICBmb3IgKGNvbnN0IHRhc2sgb2YgX3Rhc2tzKSB7XG4gICAgICBidWZmZXIucHVzaCh0YXNrLmNsb25lKF9yZWN1cnNpdmUpKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY3V0ID0gZnVuY3Rpb24gKF90YXNrcywgX3JlY3Vyc2l2ZSwgX3JlZnJlc2gsIF9nbG9iYWxUYXNrTGlzdCkge1xuICAgIGlmICghKF90YXNrcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgX3Rhc2tzID0gW190YXNrc107XG4gICAgfVxuXG4gICAgdGhpcy5jb3B5KF90YXNrcywgX3JlY3Vyc2l2ZSwgX2dsb2JhbFRhc2tMaXN0KTtcbiAgICB0aGlzLnJlbW92ZShfdGFza3MsIF9yZWN1cnNpdmUsIF9yZWZyZXNoKTtcbiAgfTtcblxuICBjb25zdCBwYXN0ZSA9IGZ1bmN0aW9uIChfdGFza0xpc3QsIF9pZHgpIHtcbiAgICAvLyBBbGxvdyBfdGFza0xpc3QgdG8gYmUgcGFzc2VkIGFzIGl0cyBvd25pbmcgdGFzayBmb3IgZWFzZSBvZiB1c2UuXG4gICAgaWYgKF90YXNrTGlzdCBpbnN0YW5jZW9mIFRhc2spIHtcbiAgICAgIF90YXNrTGlzdCA9IF90YXNrTGlzdC5zdWJ0YXNrTGlzdDtcbiAgICB9XG5cbiAgICBpZiAoIV9pZHgpIF9pZHggPSBfdGFza0xpc3QudGFza3MubGVuZ3RoO1xuXG4gICAgaWYgKGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIGZvciAoY29uc3QgYnVmSXRlbSBvZiBidWZmZXIpIHtcbiAgICAgICAgY29uc3QgY2xvbmVkID0gYnVmSXRlbS5jbG9uZSh0cnVlLCBfdGFza0xpc3QsIF9pZHgrKyk7XG4gICAgICAgIGNsb25lZC5hc3NpZ25OZXdJZFJlY3Vyc2l2ZSgpO1xuICAgICAgICBjbG9uZWQudXBkYXRlRGVwdGgoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90YXNrTGlzdC5vd25lcikge1xuICAgICAgICBfdGFza0xpc3Qub3duZXIucmVmcmVzaERvbSh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90YXNrTGlzdC5yZWZyZXNoRG9tKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBfdGFza0xpc3Qud3JpdGVSb290VG9Mb2NhbFN0b3JhZ2UoKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGNvbnN0IHJlZHVjZVJlY3Vyc2l2ZUlucHV0ID0gZnVuY3Rpb24gKF90YXNrcykge1xuICAgIGNvbnN0IHJlZHVjZWQgPSBbXTtcblxuICAgIGZvciAoY29uc3QgdGFzayBvZiBfdGFza3MpIHtcbiAgICAgIC8vIElmIGNvcHlpbmcgcmVjdXJzaXZlbHksIG1ha2Ugc3VyZSB3ZSdyZSBvbmx5IGNvcHlpbmcgZWFjaCB0YXNrXG4gICAgICAvLyBvbmNlLCBiZWNhdXNlIHRoZWxldCB1c2VyIG1heSBoYXZlIGV4cGxpY2l0bHkgc2VsZWN0ZWQgc3VidGFza3MgdGhhdFxuICAgICAgLy8gd2lsbCBhbHNvIGJlIGF1dG9tYXRpY2FsbHkgcGlja2VkIHVwIGJ5IHRoZSByZWN1cnNpb24uXG4gICAgICBjb25zdCBjaGFpbiA9IHRhc2suY2hhaW47XG4gICAgICBsZXQgdGFza0lzU3VidGFzayA9IGZhbHNlO1xuXG4gICAgICAvLyBJZiBhbnkgb2YgdGhlIHNlbGVjdGVkIHRhc2tzIGlzIGZvdW5kIGluIHRoaXMgdGFzaydzIHN1cGVyXG4gICAgICAvLyBjaGFpbiwgdGhlbiBkb24ndCBjb3B5IHRoaXMgdGFzayBiZWNhdXNlIGl0IGlzIGFscmVhZHkgaW5jbHVkZWRcbiAgICAgIC8vIGluIHRoZSByZWN1cnNpdmUgY29weS5cbiAgICAgIGZvciAoY29uc3QgcG9zc2libGVTdXBlciBvZiBfdGFza3MpIHtcbiAgICAgICAgaWYgKGNoYWluLmluY2x1ZGVzKHBvc3NpYmxlU3VwZXIpKSB7XG4gICAgICAgICAgdGFza0lzU3VidGFzayA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0YXNrSXNTdWJ0YXNrKSB7XG4gICAgICAgIHJlZHVjZWQucHVzaCh0YXNrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVkdWNlZDtcbiAgfTtcblxuICBjb25zdCBjbGVhckJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBidWZmZXIuc3BsaWNlKDAsIGJ1ZmZlci5sZW5ndGgpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYnVmZmVyLFxuICAgIHJlbW92ZSxcbiAgICBjb3B5LFxuICAgIGN1dCxcbiAgICBwYXN0ZSxcbiAgICBjbGVhckJ1ZmZlcixcbiAgfTtcbn0pKCk7XG5cbmNvbnN0IHNlbGVjdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHNlbGVjdGVkID0gW107XG5cbiAgY29uc3QgYWRkID0gZnVuY3Rpb24gKF90YXNrKSB7XG4gICAgaWYgKCFjb250YWlucyhfdGFzaykpIHtcbiAgICAgIF90YXNrLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIHNlbGVjdGVkLnB1c2goX3Rhc2spO1xuICAgICAgZG9tLnNlbGVjdChfdGFzay5pZCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGFkZEV4Y2x1c2l2ZSA9IGZ1bmN0aW9uIChfdGFzaykge1xuICAgIGNsZWFyKCk7XG4gICAgX3Rhc2suc2VsZWN0ZWQgPSB0cnVlO1xuICAgIGFkZChfdGFzayk7XG4gIH07XG5cbiAgY29uc3QgcmVtb3ZlID0gZnVuY3Rpb24gKF90YXNrKSB7XG4gICAgY29uc3QgaWR4ID0gc2VsZWN0ZWQuaW5kZXhPZihfdGFzayk7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIHNlbGVjdGVkLnNwbGljZShpZHgsIDEpO1xuICAgICAgX3Rhc2suc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIGRvbS51bnNlbGVjdChfdGFzay5pZCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBjb25zdCBjbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKGNvbnN0IHRhc2sgb2Ygc2VsZWN0ZWQpIHtcbiAgICAgIHRhc2suc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIGRvbS51bnNlbGVjdCh0YXNrLmlkKTtcbiAgICB9XG5cbiAgICBzZWxlY3RlZC5zcGxpY2UoMCwgc2VsZWN0ZWQubGVuZ3RoKTtcbiAgfTtcblxuICBjb25zdCBjb250YWlucyA9IGZ1bmN0aW9uIChfdGFzaykge1xuICAgIHJldHVybiBzZWxlY3RlZC5pbmRleE9mKF90YXNrKSA+PSAwO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIChfdGFzaykge1xuICAgIGlmIChzdGF0ZU1hbmFnZXIuc2VsZWN0aW9uTWFzcykge1xuICAgICAgaWYgKCFzZWxlY3Rpb24uc2VsZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRFeGNsdXNpdmUoX3Rhc2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaWRPcmRlciA9IHRhc2tMaXN0LmdldElkT3JkZXIodHJ1ZSk7XG4gICAgICAgIGxldCBzdGFydElkeCA9IGlkT3JkZXIuaW5kZXhPZihzZWxlY3Rpb24uc2VsZWN0ZWRbMF0uaWQpO1xuICAgICAgICBsZXQgZW5kSWR4ID0gaWRPcmRlci5pbmRleE9mKF90YXNrLmlkKTtcblxuICAgICAgICBpZiAoZW5kSWR4IDwgc3RhcnRJZHgpIHtcbiAgICAgICAgICBjb25zdCBidWZmZXIgPSBzdGFydElkeDtcbiAgICAgICAgICBzdGFydElkeCA9IGVuZElkeDtcbiAgICAgICAgICBlbmRJZHggPSBidWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIHJldGFpbiB0aGUgc2FtZSBmaXJzdCBzZWxlY3RlZCB0YXNrLlxuICAgICAgICBzZWxlY3Rpb24uYWRkRXhjbHVzaXZlKHNlbGVjdGlvbi5zZWxlY3RlZFswXSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0SWR4OyBpIDw9IGVuZElkeDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGlkT3JkZXJbaV0gIT0gc2VsZWN0aW9uLnNlbGVjdGVkWzBdLmlkKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb24uYWRkKHRhc2tMaXN0LmdldFRhc2tCeUlkKGlkT3JkZXJbaV0sIHRydWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEFkZCBjbGlja2VkIHRhc2sgdG8gc2VsZWN0aW9uLlxuICAgIH0gZWxzZSBpZiAoc3RhdGVNYW5hZ2VyLnNlbGVjdGlvbkFkZFRvKSB7XG4gICAgICBpZiAoc2VsZWN0aW9uLmNvbnRhaW5zKF90YXNrKSkge1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlKF90YXNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGlvbi5hZGQoX3Rhc2spO1xuICAgICAgfVxuICAgICAgLy8gU2VsZWN0IG9ubHkgY2xpY2tlZCB0YXNrLlxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3Rpb24uYWRkRXhjbHVzaXZlKF90YXNrKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdHJpZ2dlck1lbnUgPSBmdW5jdGlvbiAoX2NsaWVudFgsIF9jbGllbnRZLCBfc2VsZWN0aW9uQWRkVG8sIF9pc1RvdWNoKSB7XG4gICAgY29uc3QgdGFzayA9IHRhc2tMaXN0LmdldFRhc2tCeUlkKFxuICAgICAgZG9tLmdldFRhc2tJZEF0UG9zKF9jbGllbnRYLCBfY2xpZW50WSksXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIGlmICh0YXNrICYmICFzZWxlY3RlZC5pbmNsdWRlcyh0YXNrKSkge1xuICAgICAgdXBkYXRlU2VsZWN0aW9uKHRhc2spO1xuICAgIH1cblxuICAgIGxldCBjbGFzc2VzID0gbnVsbDtcblxuICAgIGlmIChfaXNUb3VjaCkge1xuICAgICAgY2xhc3NlcyA9IFtcInRvdWNoLW1lbnVcIl07XG4gICAgfVxuXG4gICAgbGV0IG1lbnU7XG5cbiAgICBpZiAodGFzayAmJiBzZWxlY3Rpb24uc2VsZWN0ZWQubGVuZ3RoKSB7XG4gICAgICBtZW51ID0gYnVpbGRUYXNrTWVudSh0YXNrLCBjbGFzc2VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVudSA9IGJ1aWxkQmdNZW51KGNsYXNzZXMpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmFwcGVuZENoaWxkKG1lbnUuc3ZnKTtcbiAgICBtZW51LmJ1dHRvbkRvd24oX2NsaWVudFgsIF9jbGllbnRZKTtcbiAgfTtcblxuICBjb25zdCBidWlsZFRhc2tNZW51ID0gZnVuY3Rpb24gKF90YXNrLCBfY2xhc3Nlcykge1xuICAgIGRvbS5mcmVlemUoKTtcbiAgICBjb25zdCBtZW51VGV4dHMgPSBbXG4gICAgICBcIk5ldyB0YXNrIChhYm92ZSlcIixcbiAgICAgIFwiTmV3IHRhc2sgKGJlbG93KVwiLFxuICAgICAgXCJOZXcgdGFzayAoYXMgc3VidGFzaylcIixcbiAgICAgIFwiQ29weSAod2l0aCBzdWJ0YXNrcylcIixcbiAgICAgIFwiQ29weSAod2l0aG91dCBzdWJ0YXNrcylcIixcbiAgICAgIFwiQ3V0ICh3aXRoIHN1YnRhc2tzKVwiLFxuICAgICAgXCJDdXQgKHdpdGhvdXQgc3VidGFza3MpXCIsXG4gICAgXTtcbiAgICBjb25zdCBtZW51RnVuY3Rpb25zID0gW1xuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGFzay5zdXBlcnRhc2tMaXN0LmNyZWF0ZVRhc2soXG4gICAgICAgICAgX3Rhc2suc3VwZXJ0YXNrTGlzdC5nZXRUYXNrSWR4KF90YXNrKSxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGFzay5zdXBlcnRhc2tMaXN0LmNyZWF0ZVRhc2soXG4gICAgICAgICAgX3Rhc2suc3VwZXJ0YXNrTGlzdC5nZXRUYXNrSWR4KF90YXNrKSArIDEsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3Rhc2suc3VidGFza0xpc3QuY3JlYXRlVGFzayhudWxsLCB0cnVlKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvcGllci5jb3B5KHNlbGVjdGlvbi5zZWxlY3RlZCwgdHJ1ZSwgdGFza0xpc3QpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29waWVyLmNvcHkoc2VsZWN0aW9uLnNlbGVjdGVkLCBmYWxzZSwgdGFza0xpc3QpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29waWVyLmN1dChzZWxlY3Rpb24uc2VsZWN0ZWQsIHRydWUsIHRydWUsIHRhc2tMaXN0KTtcbiAgICAgICAgaWYgKCF0YXNrTGlzdC5oYXNUYXNrcygpKSBzaG93SW5zdHJ1Y3Rpb25zKCk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb3BpZXIuY3V0KHNlbGVjdGlvbi5zZWxlY3RlZCwgZmFsc2UsIHRydWUsIHRhc2tMaXN0KTtcbiAgICAgICAgaWYgKCF0YXNrTGlzdC5oYXNUYXNrcygpKSBzaG93SW5zdHJ1Y3Rpb25zKCk7XG4gICAgICB9LFxuICAgIF07XG5cbiAgICAvLyBPbmx5IHNob3cgcGFzdGUgb3B0aW9uIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIHRvIHBhc3RlLlxuICAgIGlmIChjb3BpZXIuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgbWVudVRleHRzLnB1c2goXCJQYXN0ZSAoYWJvdmUpXCIsIFwiUGFzdGUgKGJlbG93KVwiLCBcIlBhc3RlIChhcyBzdWJ0YXNrKVwiKTtcbiAgICAgIG1lbnVGdW5jdGlvbnMucHVzaChcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvcGllci5wYXN0ZShcbiAgICAgICAgICAgIF90YXNrLnN1cGVydGFza0xpc3QsXG4gICAgICAgICAgICBfdGFzay5zdXBlcnRhc2tMaXN0LmdldFRhc2tJZHgoX3Rhc2spXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvcGllci5wYXN0ZShcbiAgICAgICAgICAgIF90YXNrLnN1cGVydGFza0xpc3QsXG4gICAgICAgICAgICBfdGFzay5zdXBlcnRhc2tMaXN0LmdldFRhc2tJZHgoX3Rhc2spICsgMVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb3BpZXIucGFzdGUoX3Rhc2suc3VidGFza0xpc3QpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIG1lbnVUZXh0cy5wdXNoKFwiRGVsZXRlICh3aXRoIHN1YnRhc2tzKVwiLCBcIkRlbGV0ZSAod2l0aG91dCBzdWJ0YXNrcylcIik7XG4gICAgbWVudUZ1bmN0aW9ucy5wdXNoKFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb3BpZXIucmVtb3ZlKHNlbGVjdGlvbi5zZWxlY3RlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIGlmICghdGFza0xpc3QuaGFzVGFza3MoKSkgc2hvd0luc3RydWN0aW9ucygpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29waWVyLnJlbW92ZShzZWxlY3Rpb24uc2VsZWN0ZWQsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgaWYgKCF0YXNrTGlzdC5oYXNUYXNrcygpKSBzaG93SW5zdHJ1Y3Rpb25zKCk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0IG1lbnUgPSBuZXcgUmlnaHRDbGlja01lbnUobWVudVRleHRzLCBtZW51RnVuY3Rpb25zLCBfY2xhc3Nlcyk7XG5cbiAgICByZXR1cm4gbWVudTtcbiAgfTtcblxuICBjb25zdCBidWlsZEJnTWVudSA9IGZ1bmN0aW9uIChfY2xhc3Nlcykge1xuICAgIGRvbS5mcmVlemUoKTtcbiAgICBjb25zdCBtZW51VGV4dHMgPSBbXCJOZXcgdGFza1wiXTtcbiAgICBjb25zdCBtZW51RnVuY3Rpb25zID0gW1xuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRhc2tMaXN0Lmhhc1Rhc2tzKCkpIGhpZGVJbnN0cnVjdGlvbnMoKTtcbiAgICAgICAgdGFza0xpc3QuY3JlYXRlVGFzayh0YXNrTGlzdC50YXNrcy5sZW5ndGgsIHRydWUpO1xuICAgICAgfSxcbiAgICBdO1xuXG4gICAgaWYgKGNvcGllci5idWZmZXIubGVuZ3RoKSB7XG4gICAgICBtZW51VGV4dHMucHVzaChcIlBhc3RlXCIpO1xuICAgICAgbWVudUZ1bmN0aW9ucy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0YXNrTGlzdC5oYXNUYXNrcygpKSBoaWRlSW5zdHJ1Y3Rpb25zKCk7XG4gICAgICAgIGNvcGllci5wYXN0ZSh0YXNrTGlzdCwgdGFza0xpc3QudGFza3MubGVuZ3RoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG1lbnUgPSBuZXcgUmlnaHRDbGlja01lbnUobWVudVRleHRzLCBtZW51RnVuY3Rpb25zLCBfY2xhc3Nlcyk7XG5cbiAgICByZXR1cm4gbWVudTtcbiAgfTtcblxuICBjb25zdCBzaG93SW5zdHJ1Y3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGFza0xpc3QuaGFzVGFza3MoKSkge1xuICAgICAgZG9tLnNob3dJbnN0cnVjdGlvbnMoKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGlkZUluc3RydWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRhc2tMaXN0Lmhhc1Rhc2tzKCkpIHtcbiAgICAgIGRvbS5oaWRlSW5zdHJ1Y3Rpb25zKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2VsZWN0ZWQsXG4gICAgYWRkLFxuICAgIGFkZEV4Y2x1c2l2ZSxcbiAgICByZW1vdmUsXG4gICAgY2xlYXIsXG4gICAgY29udGFpbnMsXG4gICAgdXBkYXRlU2VsZWN0aW9uLFxuICAgIHRyaWdnZXJNZW51LFxuICB9O1xufSkoKTtcblxuY29uc3QgbGlzdGVuZXIgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBhZGRMZWZ0Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChfZSkgPT4ge1xuICAgICAgY29uc3QgdGFzayA9IHRhc2tMaXN0LmdldFRhc2tCeUlkKFxuICAgICAgICBkb20uZ2V0VGFza0lkQXRQb3MoX2UuY2xpZW50WCwgX2UuY2xpZW50WSksXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgICBjb25zdCB1bmRlck1vdXNlID0gZG9jdW1lbnQuZWxlbWVudHNGcm9tUG9pbnQoX2UuY2xpZW50WCwgX2UuY2xpZW50WSk7XG5cbiAgICAgIGlmICghc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcpIHtcbiAgICAgICAgaWYgKCFfZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaW5wdXQtYnV0dG9uXCIpKSB7XG4gICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi51cGRhdGVTZWxlY3Rpb24odGFzayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBuZWVkQ2xlYXIgPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW0gb2YgdW5kZXJNb3VzZSkge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YXNrLWV4cGFuZC1pbWdcIikgfHxcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhcInN1YnRhc2tzLXBsdXMtaW1nXCIpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG5lZWRDbGVhciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuZWVkQ2xlYXIpIHtcbiAgICAgICAgICAgICAgc2VsZWN0aW9uLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCAoX2UpID0+IHtcbiAgICAgIGlmIChfZS5idXR0b24gPT0gMCAmJiAhc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcpIHtcbiAgICAgICAgZG9tLnRoYXcoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIChfZSkgPT4ge1xuICAgICAgc3RhdGVNYW5hZ2VyLnRvdWNoLnRpbWUuc3BsaWNlKDAsIDEpO1xuICAgICAgc3RhdGVNYW5hZ2VyLnRvdWNoLnRpbWUucHVzaChuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG5cbiAgICAgIHN0YXRlTWFuYWdlci50b3VjaC5wb3Muc3BsaWNlKDAsIDEpO1xuICAgICAgc3RhdGVNYW5hZ2VyLnRvdWNoLnBvcy5wdXNoKHtcbiAgICAgICAgeDogX2UudG91Y2hlc1swXS5jbGllbnRYLFxuICAgICAgICB5OiBfZS50b3VjaGVzWzBdLmNsaWVudFksXG4gICAgICB9KTtcblxuICAgICAgaWYgKFxuICAgICAgICAhc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcgJiZcbiAgICAgICAgc3RhdGVNYW5hZ2VyLnRvdWNoLnRpbWVbMF0gJiZcbiAgICAgICAgc3RhdGVNYW5hZ2VyLnRvdWNoLnRpbWVbMV0gLSBzdGF0ZU1hbmFnZXIudG91Y2gudGltZVswXSA8IDMwMFxuICAgICAgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBNYXRoLmFicyhzdGF0ZU1hbmFnZXIudG91Y2gucG9zWzFdLnggLSBzdGF0ZU1hbmFnZXIudG91Y2gucG9zWzBdLngpIDxcbiAgICAgICAgICAgIDQwICYmXG4gICAgICAgICAgTWF0aC5hYnMoc3RhdGVNYW5hZ2VyLnRvdWNoLnBvc1sxXS55IC0gc3RhdGVNYW5hZ2VyLnRvdWNoLnBvc1swXS55KSA8XG4gICAgICAgICAgICA0MFxuICAgICAgICApIHtcbiAgICAgICAgICBzZWxlY3Rpb24udHJpZ2dlck1lbnUoXG4gICAgICAgICAgICBzdGF0ZU1hbmFnZXIudG91Y2gucG9zWzFdLngsXG4gICAgICAgICAgICBzdGF0ZU1hbmFnZXIudG91Y2gucG9zWzFdLnksXG4gICAgICAgICAgICBzdGF0ZU1hbmFnZXIuc2VsZWN0aW9uQWRkVG8sXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdGF0ZU1hbmFnZXIudG91Y2gudG91Y2hlZElkLnNwbGljZSgwLCAxKTtcbiAgICAgIHN0YXRlTWFuYWdlci50b3VjaC50b3VjaGVkSWQucHVzaChcbiAgICAgICAgZG9tLmdldFRhc2tJZEF0UG9zKF9lLnRvdWNoZXNbMF0uY2xpZW50WCwgX2UudG91Y2hlc1swXS5jbGllbnRZKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBhZGRSaWdodENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCAoX2UpID0+IHtcbiAgICAgIF9lLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChfZSkgPT4ge1xuICAgICAgX2Uuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAoX2UuYnV0dG9uID09IDIgJiYgIXN0YXRlTWFuYWdlci5jdXJyZW50bHlFZGl0aW5nKSB7XG4gICAgICAgIHNlbGVjdGlvbi50cmlnZ2VyTWVudShcbiAgICAgICAgICBfZS5jbGllbnRYLFxuICAgICAgICAgIF9lLmNsaWVudFksXG4gICAgICAgICAgc3RhdGVNYW5hZ2VyLnNlbGVjdGlvbkFkZFRvXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgYWRkTW9kaWZpZXJLZXlzID0gZnVuY3Rpb24gKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChfZSkgPT4ge1xuICAgICAgc3RhdGVNYW5hZ2VyLnNldFNlbGVjdGlvbkFkZFRvLmJpbmQoc3RhdGVNYW5hZ2VyLCB0cnVlLCBfZSkoKTtcbiAgICAgIHN0YXRlTWFuYWdlci5zZXRTZWxlY3Rpb25NYXNzLmJpbmQoc3RhdGVNYW5hZ2VyLCB0cnVlLCBfZSkoKTtcbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCAoX2UpID0+IHtcbiAgICAgIHN0YXRlTWFuYWdlci5zZXRTZWxlY3Rpb25BZGRUby5iaW5kKHN0YXRlTWFuYWdlciwgZmFsc2UsIF9lKSgpO1xuICAgICAgc3RhdGVNYW5hZ2VyLnNldFNlbGVjdGlvbk1hc3MuYmluZChzdGF0ZU1hbmFnZXIsIGZhbHNlLCBfZSkoKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBhZGRDbGVhckRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgY2xlYXJEYXRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jbGVhci1kYXRhXCIpO1xuICAgIGNsZWFyRGF0YS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgaWYgKCFzdGF0ZU1hbmFnZXIuY3VycmVudGx5RWRpdGluZykge1xuICAgICAgICBjb25zdCBzaG91bGREZWxldGUgPSBjb25maXJtKFxuICAgICAgICAgIFwiVGhpcyB3aWxsIGRlbGV0ZSBhbGwgc2F2ZWQgZGF0YS4gQ29udGludWU/XCJcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoc2hvdWxkRGVsZXRlKSB7XG4gICAgICAgICAgdGFza0xpc3QuY2xlYXIoKTtcbiAgICAgICAgICB0YXNrTGlzdC5jbGVhckxvY2FsU3RvcmFnZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgYWRkRXhwYW5kU3VidGFza3MgPSBmdW5jdGlvbiAoX2VsZW0sIF90YXNrLCBfc3VidGFza3NFbGVtKSB7XG4gICAgX2VsZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGlmIChzdGF0ZU1hbmFnZXIuY3VycmVudGx5RWRpdGluZykgcmV0dXJuO1xuXG4gICAgICBfdGFzay5zdWJ0YXNrTGlzdC5leHBhbmRlZCA9ICFfdGFzay5zdWJ0YXNrTGlzdC5leHBhbmRlZDtcbiAgICAgIGRvbS5zZXRTdWJ0YXNrRXhwYW5kVmlldyhcbiAgICAgICAgX3Rhc2suc3VidGFza0xpc3QuZXhwYW5kZWQsXG4gICAgICAgIF9zdWJ0YXNrc0VsZW0sXG4gICAgICAgIF90YXNrLFxuICAgICAgICBzdGF0ZU1hbmFnZXIuc2VsZWN0aW9uQWRkVG9cbiAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgYWRkRXhwYW5kVGFzayA9IGZ1bmN0aW9uIChcbiAgICBfZWxlbSxcbiAgICBfdGFzayxcbiAgICBfdGFza0VsZW0sXG4gICAgX3N2Z1BhdGhFbGVtLFxuICAgIF9oZWFkZXJFbGVtXG4gICkge1xuICAgIF9lbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBpZiAoc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcpIHJldHVybjtcbiAgICAgIF90YXNrLmV4cGFuZGVkID0gIV90YXNrLmV4cGFuZGVkO1xuICAgICAgZG9tLnVwZGF0ZVRhc2tFeHBhbmRWaWV3KF9zdmdQYXRoRWxlbSwgX3Rhc2tFbGVtLCBfdGFzayk7XG4gICAgfSk7XG5cbiAgICBfaGVhZGVyRWxlbS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIChfZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHVuZGVyTW91c2UgPSBkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludChcbiAgICAgICAgX2V2ZW50LmNsaWVudFgsXG4gICAgICAgIF9ldmVudC5jbGllbnRZXG4gICAgICApO1xuXG4gICAgICBmb3IgKGNvbnN0IF9lIG9mIHVuZGVyTW91c2UpIHtcbiAgICAgICAgLy8gRGlzcmVnYXJkIHBvc2l0aW9ucyB0aGF0IGFsc28gaW50ZXJzZWN0IHRoZSBleHBhbmQgYnV0dG9uLlxuICAgICAgICBpZiAoX2UuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFzay1leHBhbmQtaW1nXCIpKSB7XG4gICAgICAgICAgX2hlYWRlckVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImhvdmVyLXBvc3NpYmxlXCIpO1xuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9oZWFkZXJFbGVtLmNsYXNzTGlzdC5hZGQoXCJob3Zlci1wb3NzaWJsZVwiKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgYWRkUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoX3N2Z0VsZW0sIF90YXNrKSB7XG4gICAgX3N2Z0VsZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGlmICghc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcpIHtcbiAgICAgICAgX3Rhc2sucHJvZ3Jlc3MgPSBNYXRoLm1heCgoX3Rhc2sucHJvZ3Jlc3MgKyAxKSAlIDQsIDEpO1xuICAgICAgICBfdGFzay5yZWZyZXNoRG9tKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBhZGRPcGVuRWRpdCA9IGZ1bmN0aW9uIChfZWxlbSwgX3Rhc2spIHtcbiAgICBfZWxlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKF9ldmVudCkgPT4ge1xuICAgICAgLy8gQmVjYXVzZSBtb3VzZW92ZXIgZG9lc24ndCBleGlzdCBvbiBhIHRvdWNoc2NyZWVuLCB0aGUgZWRpdCBidXR0b24gaXNcbiAgICAgIC8vIHJldmVhbGVkIG9uY2UgdGhlIHVzZXIgaGFzIHRhcHBlZCB0aGUgdGFzaydzIGhlYWRlciBhbmQgY2FuIG9ubHkgYmVcbiAgICAgIC8vIGFjdGl2YXRlZCBvbmNlIHJldmVhbGVkLiBJLmUuIHRoZSBidXR0b24gY2FuIG9ubHkgYmUgY2xpY2tlZCBpZiB0aGVcbiAgICAgIC8vIHNlY29uZC10by1sYXN0IHRvdWNoIHdhcyBvbiB0aGUgYnV0dG9uJ3MgdGFzaydzIGhlYWRlci5cbiAgICAgIGlmICghc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcpIHtcbiAgICAgICAgaWYgKF9ldmVudC5wb2ludGVyVHlwZSA9PSBcInRvdWNoXCIpIHtcbiAgICAgICAgICBpZiAoX3Rhc2suc2VsZWN0ZWQgJiYgc3RhdGVNYW5hZ2VyLnRvdWNoLnRvdWNoZWRJZFswXSA9PSBfdGFzay5pZCkge1xuICAgICAgICAgICAgX3Rhc2suY3VycmVudGx5RWRpdGluZyA9IHRydWU7XG4gICAgICAgICAgICBzdGF0ZU1hbmFnZXIuY3VycmVudGx5RWRpdGluZyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEJveCA9IGRvbS5jcmVhdGVJbnB1dEJveChfdGFzayk7XG4gICAgICAgICAgICBhZGRJbnB1dENhcmQoX3Rhc2ssIGlucHV0Qm94KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3Rhc2suY3VycmVudGx5RWRpdGluZyA9IHRydWU7XG4gICAgICAgICAgc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0IGlucHV0Qm94ID0gZG9tLmNyZWF0ZUlucHV0Qm94KF90YXNrKTtcbiAgICAgICAgICBhZGRJbnB1dENhcmQoX3Rhc2ssIGlucHV0Qm94KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGFkZElucHV0Q2FyZCA9IGZ1bmN0aW9uIChfdGFzaywgX2lucHV0T2JqKSB7XG4gICAgX2lucHV0T2JqLnByb2dyZXNzQ2hlY2suYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBkb20udXBkYXRlUHJvZ3Jlc3NGaWVsZChfaW5wdXRPYmoucHJvZ3Jlc3NDaGVjaywgX2lucHV0T2JqLnByb2dyZXNzRmllbGQpO1xuICAgIH0pO1xuXG4gICAgX2lucHV0T2JqLmNvbmZpcm0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIF90YXNrLmN1cnJlbnRseUVkaXRpbmcgPSBmYWxzZTtcbiAgICAgIHN0YXRlTWFuYWdlci5jdXJyZW50bHlFZGl0aW5nID0gZmFsc2U7XG5cbiAgICAgIF90YXNrLnRpdGxlID0gX2lucHV0T2JqLnRpdGxlSW5wdXQudmFsdWU7XG4gICAgICBfdGFzay5kdWVEYXRlU3RyID0gX2lucHV0T2JqLmRhdGVJbnB1dC52YWx1ZTtcbiAgICAgIF90YXNrLmR1ZVRpbWVTdHIgPSBfaW5wdXRPYmoudGltZUlucHV0LnZhbHVlO1xuICAgICAgX3Rhc2sudXBkYXRlRHVlKCk7XG4gICAgICBfdGFzay5kZXNjcmlwdGlvbiA9IF9pbnB1dE9iai5kZXNjSW5wdXQudmFsdWU7XG4gICAgICBfdGFzay5wcmlvcml0eSA9IGRvbS5nZXRSYWRpb1ZhbHVlKF9pbnB1dE9iai5wcmlvcml0eUZpZWxkKTtcbiAgICAgIF90YXNrLnVzZVByb2dyZXNzRnJvbVN1YnRhc2tzID0gX2lucHV0T2JqLnByb2dyZXNzQ2hlY2suY2hlY2tlZDtcblxuICAgICAgaWYgKF90YXNrLnVzZVByb2dyZXNzRnJvbVN1YnRhc2tzKSB7XG4gICAgICAgIF90YXNrLnByb2dyZXNzID0gX3Rhc2suZ2V0UHJvZ3Jlc3NSZWN1cnNpdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90YXNrLnByb2dyZXNzID0gZG9tLmdldFJhZGlvVmFsdWUoX2lucHV0T2JqLnByb2dyZXNzRmllbGQpO1xuICAgICAgfVxuXG4gICAgICBfdGFzay5ub3RlcyA9IF9pbnB1dE9iai5ub3Rlc0lucHV0LnZhbHVlO1xuICAgICAgX2lucHV0T2JqLmNhcmRJbnB1dC5yZW1vdmUoKTtcbiAgICAgIF9pbnB1dE9iai5jYXJkLmNsYXNzTGlzdC5yZW1vdmUoXCJlZGl0aW5nXCIpO1xuICAgICAgX3Rhc2suc3VwZXJ0YXNrTGlzdC53cml0ZVJvb3RUb0xvY2FsU3RvcmFnZSgpO1xuICAgICAgX3Rhc2sucmVmcmVzaERvbShmYWxzZSk7XG4gICAgICBkb20udGhhdygpO1xuICAgIH0pO1xuXG4gICAgX2lucHV0T2JqLmNhbmNlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgX3Rhc2suY3VycmVudGx5RWRpdGluZyA9IGZhbHNlO1xuICAgICAgc3RhdGVNYW5hZ2VyLmN1cnJlbnRseUVkaXRpbmcgPSBmYWxzZTtcblxuICAgICAgX2lucHV0T2JqLmNhcmRJbnB1dC5yZW1vdmUoKTtcbiAgICAgIF9pbnB1dE9iai5jYXJkLmNsYXNzTGlzdC5yZW1vdmUoXCJlZGl0aW5nXCIpO1xuICAgICAgZG9tLnRoYXcoKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGFkZExlZnRDbGljayxcbiAgICBhZGRSaWdodENsaWNrLFxuICAgIGFkZE1vZGlmaWVyS2V5cyxcbiAgICBhZGRDbGVhckRhdGEsXG4gICAgYWRkRXhwYW5kU3VidGFza3MsXG4gICAgYWRkRXhwYW5kVGFzayxcbiAgICBhZGRQcm9ncmVzcyxcbiAgICBhZGRPcGVuRWRpdCxcbiAgICBhZGRJbnB1dENhcmQsXG4gIH07XG59KSgpO1xuXG5jb25zdCB0YXNrTGlzdCA9IG5ldyBUYXNrTGlzdCgpO1xudGFza0xpc3QucmVzdG9yZUZyb21Mb2NhbFN0b3JhZ2UoKTtcblxubGlzdGVuZXIuYWRkTGVmdENsaWNrKCk7XG5saXN0ZW5lci5hZGRSaWdodENsaWNrKCk7XG5saXN0ZW5lci5hZGRNb2RpZmllcktleXMoKTtcbmxpc3RlbmVyLmFkZENsZWFyRGF0YSgpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBsZXQgb2Zmc2V0ID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICBjb25zdCBvZmZzZXREaXIgPSBvZmZzZXQgPCAwID8gLTEgOiAxO1xuICBvZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICBsZXQgc3RyID0gYCR7U3RyaW5nKE1hdGguZmxvb3Iob2Zmc2V0IC8gNjApKS5wYWRTdGFydCgyLCBcIjBcIil9OiR7U3RyaW5nKFxuICAgIG9mZnNldCAlIDYwXG4gICkucGFkU3RhcnQoMiwgXCIwXCIpfWA7XG5cbiAgaWYgKG9mZnNldERpciA9PSAxKSB7XG4gICAgc3RyID0gXCItXCIgKyBzdHI7XG4gIH0gZWxzZSB7XG4gICAgc3RyID0gXCIrXCIgKyBzdHI7XG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuIl0sIm5hbWVzIjpbInRva2VuIiwidGltZXpvbmUiLCJ0aW1lem9uZUNsaXAiLCJkYXRlRm9ybWF0IiwiZGF0ZSIsIm1hc2siLCJ1dGMiLCJnbXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ0ZXN0IiwidW5kZWZpbmVkIiwiRGF0ZSIsImlzTmFOIiwiVHlwZUVycm9yIiwibWFza1NsaWNlIiwiU3RyaW5nIiwibWFza3MiLCJzbGljZSIsIl8iLCJfZCIsIkQiLCJfbSIsInkiLCJfSCIsIl9NIiwiX3MiLCJfTCIsIl9vIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJfVyIsImdldFdlZWsiLCJmbGFncyIsImQiLCJkZCIsInBhZCIsImRkZCIsImkxOG4iLCJkYXlOYW1lcyIsIkRERCIsImdldERheU5hbWUiLCJtIiwiZGF5TmFtZSIsInNob3J0IiwiZGRkZCIsIkREREQiLCJtbSIsIm1tbSIsIm1vbnRoTmFtZXMiLCJtbW1tIiwieXkiLCJ5eXl5IiwiaCIsImhoIiwiSCIsIkhIIiwiTSIsIk1NIiwicyIsInNzIiwibCIsIkwiLCJNYXRoIiwiZmxvb3IiLCJ0IiwidGltZU5hbWVzIiwidHQiLCJUIiwiVFQiLCJaIiwiZm9ybWF0VGltZXpvbmUiLCJvIiwiYWJzIiwicCIsIlMiLCJXIiwiV1ciLCJOIiwiZ2V0RGF5T2ZXZWVrIiwicmVwbGFjZSIsIm1hdGNoIiwiZGVmYXVsdCIsInNob3J0RGF0ZSIsInBhZGRlZFNob3J0RGF0ZSIsIm1lZGl1bURhdGUiLCJsb25nRGF0ZSIsImZ1bGxEYXRlIiwic2hvcnRUaW1lIiwibWVkaXVtVGltZSIsImxvbmdUaW1lIiwiaXNvRGF0ZSIsImlzb1RpbWUiLCJpc29EYXRlVGltZSIsImlzb1V0Y0RhdGVUaW1lIiwiZXhwaXJlc0hlYWRlckZvcm1hdCIsInZhbCIsImxlbiIsInBhZFN0YXJ0IiwiX3JlZiIsIl9yZWYkc2hvcnQiLCJfc2hvcnQiLCJ0b2RheSIsInllc3RlcmRheSIsInNldERhdGUiLCJ0b21vcnJvdyIsInRhcmdldFRodXJzZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXREYXkiLCJmaXJzdFRodXJzZGF5IiwiZHMiLCJzZXRIb3VycyIsImdldEhvdXJzIiwid2Vla0RpZmYiLCJkb3ciLCJwb3AiLCJ0YXNrQmluIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicHJpb3JpdHlMaXN0IiwicHJvZ3Jlc3NMaXN0IiwiY2xhc3NMaXN0IiwiYWRkIiwidXBkYXRlVGFza0V4cGFuZFZpZXciLCJfc3ZnUGF0aCIsIl9jYXJkIiwiX3Rhc2siLCJleHBhbmRDYXJkIiwiZXhwYW5kZWQiLCJzZXRBdHRyaWJ1dGUiLCJzZXRTdWJ0YXNrRXhwYW5kVmlldyIsIl9leHBhbmRlZCIsIl9yZWN1cnNpdmUiLCJzdWJ0YXNrc1BsdXNQYXRoIiwic3VidGFza0xpc3QiLCJ0YXNrIiwidGFza3MiLCJpZCIsImZyZWV6ZSIsImZvY3VzYWJsZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbGVtIiwidGhhdyIsInJlbW92ZSIsInVuc2VsZWN0IiwiX3Rhc2tJZCIsImNhcmQiLCJnZXRUYXNrSWRBdFBvcyIsIl9jbGllbnRYIiwiX2NsaWVudFkiLCJ1bmRlck1vdXNlIiwiZWxlbWVudHNGcm9tUG9pbnQiLCJ0YXNrRm91bmQiLCJfZWxlbSIsImNvbnRhaW5zIiwiaWRQb3MiLCJjbGFzc05hbWUiLCJpbmRleE9mIiwiaWRFbmQiLCJOdW1iZXIiLCJjcmVhdGVJbnB1dEJveCIsImJvZHkiLCJjYXJkSW5wdXQiLCJjcmVhdGVBcHBlbmQiLCJ0aXRsZUlucHV0IiwiY3JlYXRlSW5wdXQiLCJ0aXRsZSIsIndpbmRvdyIsInNldFRpbWVvdXQiLCJmb2N1cyIsInNldFNlbGVjdGlvblJhbmdlIiwidmFsdWUiLCJkdWVDb250YWluZXIiLCJkYXRlSW5wdXQiLCJkdWVEYXRlU3RyIiwidGltZUlucHV0IiwiZHVlVGltZVN0ciIsImRlc2NJbnB1dCIsImRlc2NyaXB0aW9uIiwicmFkaW9Db250YWluZXIiLCJwcmlvcml0eUZpZWxkQ29udGFpbmVyIiwicHJpb3JpdHlGaWVsZCIsImNyZWF0ZVJhZGlvRmllbGQiLCJwcmlvcml0eSIsInNldElucHV0QXR0cmlidXRlcyIsInByb2dyZXNzRmllbGRDb250YWluZXIiLCJwcm9ncmVzc0ZpZWxkIiwicHJvZ3Jlc3MiLCJwcm9ncmVzc0NoZWNrQ29udGFpbmVyIiwicHJvZ3Jlc3NDaGVjayIsInVzZVByb2dyZXNzRnJvbVN1YnRhc2tzIiwidXBkYXRlUHJvZ3Jlc3NGaWVsZCIsIm5vdGVzSW5wdXQiLCJub3RlcyIsImJ1dHRvbkRpdiIsImNvbmZpcm1CdXR0b24iLCJjcmVhdGVTdmciLCJjYW5jZWxCdXR0b24iLCJjb25maXJtIiwiY2FuY2VsIiwiX2VsZW1UeXBlIiwiX2NsYXNzZXMiLCJfcGFyZW50RWxlbSIsIl90ZXh0Q29udGVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwiX2NoZWNrIiwiX2ZpZWxkIiwiY2hlY2tlZCIsInJlbW92ZUF0dHJpYnV0ZSIsImdldFJhZGlvVmFsdWUiLCJfZmllbGRzZXQiLCJyYWRpb3MiLCJpIiwiX3R5cGUiLCJfbmFtZSIsIl92YWx1ZSIsIl9jb250YWluZXJQYXJlbnQiLCJfY29udGFpbmVyQ2xhc3NlcyIsIl9sYWJlbFRleHQiLCJfbGFiZWxDbGFzc2VzIiwiY29udGFpbmVyIiwiX25hbWVJZCIsIl9kaXYiLCJfZGVmYXVsdFZhbHVlIiwiX2xhYmVsQXJyIiwiZmllbGQiLCJsYWJlbHMiLCJwdXNoIiwiX3BhdGgiLCJfdGl0bGUiLCJfdXNlQmciLCJfcGF0aENsYXNzIiwic3ZnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmdQYXRoIiwicGF0aCIsIm5hbWVzcGFjZSIsImNsaWNrUmVsZWFzZVdpbmRvdyIsImdyb3VwIiwibWVudSIsImJvcmRlciIsIm1lbnVJdGVtcyIsImJ1dHRvbkRvd25UaW1lIiwiaXNWaXNpYmxlIiwidGlsZUdyb3VwIiwiZnVuY3Rpb25zIiwiaXRlbVRleHRzIiwiYm9yZGVyU2l6ZSIsInNjYWxlIiwiZm9udFNpemUiLCJtZW51TWFyZ2luIiwibWVudVBvc09mZnNldCIsIngiLCJtZW51V2lkdGgiLCJtZW51SGVpZ2h0IiwiaW5pdFRpbWUiLCJwb3N0SW5pdERlbGF5IiwiaHRtbCIsImNvbnN0cnVjdG9yIiwiX2l0ZW1UZXh0cyIsIl9mdW5jdGlvbnMiLCJfY3NzQ2xhc3NlcyIsInRoaXMiLCJhZGRFdmVudExpc3RlbmVyIiwiX2UiLCJ1cGRhdGVIaWdobGlnaHQiLCJjbGllbnRYIiwiY2xpZW50WSIsImVyYXNlIiwiZ2V0VGltZSIsIm1lbnVTZWxlY3Rpb24iLCJnZXRIaWdobGlnaHRlZCIsIm1lbnVNb3VzZU92ZXIiLCJpbmNsdWRlcyIsInJlY3QiLCJhY3RpdmF0ZVNlbGVjdGlvbiIsImluaXQiLCJjb21wdXRlZEZvbnRTaXplIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJudW0iLCJjaGFyIiwiY29kZSIsImNoYXJDb2RlQXQiLCJhZGRNZW51SXRlbSIsImhlaWdodCIsIndpZHRoIiwibmV3V2lkdGgiLCJzdmdUZXh0IiwidGV4dCIsImdldEJCb3giLCJ4TWFyZ2luIiwiZ2V0QXR0cmlidXRlIiwiYnV0dG9uRG93biIsImRvY1dpZHRoIiwiY2xpZW50V2lkdGgiLCJkb2NIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ4T2Zmc2V0IiwieU9mZnNldCIsInNjcm9sbFgiLCJzY3JvbGxZIiwicGVyZm9ybWFuY2UiLCJub3ciLCJidXR0b25VcCIsIml0ZW0iLCJfdGV4dCIsIl9mdW5jdGlvbiIsIl9pZHgiLCJzcGxpY2UiLCJNZW51SXRlbSIsInVuaGlnaGxpZ2h0IiwiaGlnaGxpZ2h0IiwiaXNIaWdobGlnaHRlZCIsImdldEhpZ2hsaWdodGVkVGV4dCIsImhpZ2hsaWdodGVkIiwiX3NlbGVjdGlvbiIsImFjdGl2ZSIsImZpbmQiLCJmdW5jdGlvbiIsIl9mb250U2l6ZSIsIl9wYXJlbnQiLCJTVkdUZXh0IiwiX2NvbnRlbnQiLCJfaWQiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJlIiwiRE9NRXhjZXB0aW9uIiwibmFtZSIsIlRhc2siLCJkdWVEYXRlIiwiZHVlVGltZSIsImRlcHRoIiwiY3VycmVudGx5RWRpdGluZyIsInN1cGVydGFza0xpc3QiLCJzZWxlY3RlZCIsImRvbURpdiIsInN0YXRpYyIsIl9kdWVEYXRlU3RyIiwiX2R1ZVRpbWVTdHIiLCJfZGVzY3JpcHRpb24iLCJfcHJpb3JpdHkiLCJfcHJvZ3Jlc3MiLCJfbm90ZXMiLCJfc3VwZXJ0YXNrTGlzdCIsIl9pc0Nsb25lIiwidXBkYXRlRHVlIiwiVGFza0xpc3QiLCJoYXNDb250ZW50IiwiYXNzaWduTmV3SWQiLCJ1cGRhdGVEZXB0aCIsImNsb25lIiwiY2xvbmVkIiwib2Zmc2V0Iiwib2Zmc2V0RGlyIiwic3RyIiwiZGF0ZVN0cmluZyIsInN1cGVydGFzayIsIm93bmVyIiwic3VidGFza3MiLCJyZW1vdmVJZCIsImxvZyIsImxvZ2dlciIsImxvZ1Rhc2siLCJnZW5lcmF0ZUlkIiwiYXNzaWduTmV3SWRSZWN1cnNpdmUiLCJyZWZyZXNoRG9tIiwiZ2V0UHJvZ3Jlc3NSZWN1cnNpdmUiLCJzdXBlcnRhc2tEaXYiLCJuZWlnaGJvcklkeCIsImdldFRhc2tJZHgiLCJuZWlnaGJvcklkIiwibmVpZ2hib3JEaXYiLCJpbmRlbnRTdHIiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJoRGl2IiwidGl0bGVDb250YWluZXIiLCJwcmlvcml0eVN2ZyIsImNyZWF0ZVByaW9yaXR5U3ZnIiwicHJvZ3Jlc3NTdmciLCJjcmVhdGVQcm9ncmVzc1N2ZyIsImVkaXRCdXR0b24iLCJleHBhbmRCdXR0b24iLCJ0YXNrRXhwYW5kU3ZnIiwidGFza0V4cGFuZFBhdGgiLCJpbmZvQ29udGFpbmVyIiwicHJpb3JpdHlDb250YWluZXIiLCJwcm9ncmVzc0NvbnRhaW5lciIsInByb2ciLCJkZXNjQ29udGFpbmVyIiwic3VidGFza3NCdXR0b24iLCJub3Rlc0NvbnRhaW5lciIsIm5lZWRTdWJ0YXNrc0xpc3RlbmVyIiwic3VidGFza3NFeHBhbmQiLCJ0YXNrRXhwYW5kIiwiaGVhZGVyIiwiZWRpdE9wZW4iLCJsaXN0ZW5lciIsImFkZEV4cGFuZFRhc2siLCJhZGRPcGVuRWRpdCIsImFkZFByb2dyZXNzIiwiYWRkRXhwYW5kU3VidGFza3MiLCJjaGFpbiIsImFkZFN1YnRhc2siLCJyZW1vdmVTdWJ0YXNrSWQiLCJyZW1vdmVTdWJ0YXNrSWR4IiwicmVtb3ZlSWR4IiwibGFzdElkIiwiTUFYX1NBRkVfSU5URUdFUiIsInJlc2V0SWRzIiwiX293bmVyIiwiX3Rhc2tzIiwiZm9yRWFjaCIsImNyZWF0ZVRhc2siLCJfc2hvd0lucHV0IiwibmV3VGFzayIsIndyaXRlUm9vdFRvTG9jYWxTdG9yYWdlIiwic3RhdGVNYW5hZ2VyIiwiaW5wdXRCb3giLCJhZGRJbnB1dENhcmQiLCJnZXRUYXNrQnlJZCIsImlkVGFzayIsImhhc1Rhc2tzIiwiZ2V0SWRPcmRlciIsIm9yZGVyIiwiY2xlYXIiLCJkZWxldGUiLCJjbG9uZUpzb24iLCJqc29uVGFza0xpc3QiLCJpbml0RnJvbUpzb24iLCJfanNvbk9iaiIsImxvYWRlZFRhc2siLCJ3cml0ZVRvTG9jYWxTdG9yYWdlIiwiX2tleSIsIkRFRkFVTFRfS0VZIiwianNvblN0ciIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2NhbFN0b3JhZ2UiLCJ3cml0ZUVycm9yU2hvd24iLCJhbGVydCIsInJvb3QiLCJyZXN0b3JlRnJvbUxvY2FsU3RvcmFnZSIsImpzb25PYmoiLCJnZXRJdGVtIiwicGFyc2UiLCJjbGVhckxvY2FsU3RvcmFnZSIsInNlbGVjdGlvbkFkZFRvIiwic2VsZWN0aW9uTWFzcyIsInNldFNlbGVjdGlvbkFkZFRvIiwiX3N0YXRlIiwia2V5Iiwic2V0U2VsZWN0aW9uTWFzcyIsInRvdWNoIiwidGltZSIsInBvcyIsInRvdWNoZWRJZCIsIl9wcmVwZW5kIiwiY29uc29sZSIsImNvcGllciIsImJ1ZmZlciIsInJlZHVjZVJlY3Vyc2l2ZUlucHV0IiwicmVkdWNlZCIsInRhc2tJc1N1YnRhc2siLCJwb3NzaWJsZVN1cGVyIiwiY2xlYXJCdWZmZXIiLCJfcmVmcmVzaCIsIkFycmF5IiwiaW5zZXJ0SWR4IiwiY29weSIsIl9nbG9iYWxUYXNrTGlzdCIsImlkT3JkZXIiLCJzb3J0IiwiX2EiLCJfYiIsImN1dCIsInBhc3RlIiwiX3Rhc2tMaXN0IiwiYnVmSXRlbSIsInNlbGVjdGlvbiIsInVwZGF0ZVNlbGVjdGlvbiIsInRhc2tMaXN0Iiwic3RhcnRJZHgiLCJlbmRJZHgiLCJhZGRFeGNsdXNpdmUiLCJzaG93SW5zdHJ1Y3Rpb25zIiwiaGlkZUluc3RydWN0aW9ucyIsImlkeCIsInRyaWdnZXJNZW51IiwiX3NlbGVjdGlvbkFkZFRvIiwiX2lzVG91Y2giLCJjbGFzc2VzIiwibWVudVRleHRzIiwibWVudUZ1bmN0aW9ucyIsImJ1aWxkVGFza01lbnUiLCJidWlsZEJnTWVudSIsIl9pbnB1dE9iaiIsImFkZExlZnRDbGljayIsInRhcmdldCIsIm5lZWRDbGVhciIsImJ1dHRvbiIsInRvdWNoZXMiLCJhZGRSaWdodENsaWNrIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJhZGRNb2RpZmllcktleXMiLCJiaW5kIiwiYWRkQ2xlYXJEYXRhIiwiX3N1YnRhc2tzRWxlbSIsIl90YXNrRWxlbSIsIl9zdmdQYXRoRWxlbSIsIl9oZWFkZXJFbGVtIiwiX2V2ZW50IiwiX3N2Z0VsZW0iLCJtYXgiLCJwb2ludGVyVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=