(()=>{"use strict";var t=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,e=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,s=/[^-+\dA-Z]/g;function i(e,s,i,c){if(1!==arguments.length||"string"!=typeof e||/\d/.test(e)||(s=e,e=void 0),(e=e||0===e?e:new Date)instanceof Date||(e=new Date(e)),isNaN(e))throw TypeError("Invalid date");var h=(s=String(n[s]||s||n.default)).slice(0,4);"UTC:"!==h&&"GMT:"!==h||(s=s.slice(4),i=!0,"GMT:"===h&&(c=!0));var m=function(){return i?"getUTC":"get"},g=function(){return e[m()+"Date"]()},p=function(){return e[m()+"Day"]()},f=function(){return e[m()+"Month"]()},k=function(){return e[m()+"FullYear"]()},b=function(){return e[m()+"Hours"]()},v=function(){return e[m()+"Minutes"]()},L=function(){return e[m()+"Seconds"]()},y=function(){return e[m()+"Milliseconds"]()},S=function(){return i?0:e.getTimezoneOffset()},w=function(){return d(e)},C={d:function(){return g()},dd:function(){return o(g())},ddd:function(){return r.dayNames[p()]},DDD:function(){return a({y:k(),m:f(),d:g(),_:m(),dayName:r.dayNames[p()],short:!0})},dddd:function(){return r.dayNames[p()+7]},DDDD:function(){return a({y:k(),m:f(),d:g(),_:m(),dayName:r.dayNames[p()+7]})},m:function(){return f()+1},mm:function(){return o(f()+1)},mmm:function(){return r.monthNames[f()]},mmmm:function(){return r.monthNames[f()+12]},yy:function(){return String(k()).slice(2)},yyyy:function(){return o(k(),4)},h:function(){return b()%12||12},hh:function(){return o(b()%12||12)},H:function(){return b()},HH:function(){return o(b())},M:function(){return v()},MM:function(){return o(v())},s:function(){return L()},ss:function(){return o(L())},l:function(){return o(y(),3)},L:function(){return o(Math.floor(y()/10))},t:function(){return b()<12?r.timeNames[0]:r.timeNames[1]},tt:function(){return b()<12?r.timeNames[2]:r.timeNames[3]},T:function(){return b()<12?r.timeNames[4]:r.timeNames[5]},TT:function(){return b()<12?r.timeNames[6]:r.timeNames[7]},Z:function(){return c?"GMT":i?"UTC":l(e)},o:function(){return(S()>0?"-":"+")+o(100*Math.floor(Math.abs(S())/60)+Math.abs(S())%60,4)},p:function(){return(S()>0?"-":"+")+o(Math.floor(Math.abs(S())/60),2)+":"+o(Math.floor(Math.abs(S())%60),2)},S:function(){return["th","st","nd","rd"][g()%10>3?0:(g()%100-g()%10!=10)*g()%10]},W:function(){return w()},WW:function(){return o(w())},N:function(){return u(e)}};return s.replace(t,(function(t){return t in C?C[t]():t.slice(1,t.length-1)}))}var n={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},r={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},o=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(t).padStart(e,"0")},a=function(t){var e=t.y,s=t.m,i=t.d,n=t._,r=t.dayName,o=t.short,a=void 0!==o&&o,d=new Date,u=new Date;u.setDate(u[n+"Date"]()-1);var l=new Date;return l.setDate(l[n+"Date"]()+1),d[n+"FullYear"]()===e&&d[n+"Month"]()===s&&d[n+"Date"]()===i?a?"Tdy":"Today":u[n+"FullYear"]()===e&&u[n+"Month"]()===s&&u[n+"Date"]()===i?a?"Ysd":"Yesterday":l[n+"FullYear"]()===e&&l[n+"Month"]()===s&&l[n+"Date"]()===i?a?"Tmw":"Tomorrow":r},d=function(t){var e=new Date(t.getFullYear(),t.getMonth(),t.getDate());e.setDate(e.getDate()-(e.getDay()+6)%7+3);var s=new Date(e.getFullYear(),0,4);s.setDate(s.getDate()-(s.getDay()+6)%7+3);var i=e.getTimezoneOffset()-s.getTimezoneOffset();e.setHours(e.getHours()-i);var n=(e-s)/6048e5;return 1+Math.floor(n)},u=function(t){var e=t.getDay();return 0===e&&(e=7),e},l=function(t){return(String(t).match(e)||[""]).pop().replace(s,"").replace(/GMT\+0000/g,"UTC")};const c=document.querySelector(".task-bin"),h=["N/A","Unimportant","Important","Urgent"],m=["N/A","Not started","In progress","Complete"];function g(t,e,s){D(s,e),s.expanded?t.setAttribute("d","M12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22M17,14L12,9L7,14H17Z"):t.setAttribute("d","M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M7,10L12,15L17,10H7Z")}function p(t,e,s,i){let n=e.querySelector(".subtasks-plus-img > path:not(.bg-img)");if(s.subtaskList.expanded=t,D(s.subtaskList,e),s.subtaskList.expanded?n.setAttribute("d","M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"):n.setAttribute("d","M17,13H13V17H11V13H7V11H11V7H13V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"),i)for(let n of s.subtaskList.tasks)p(t,e.querySelector(`.subtasks.id-${n.id}`),n,i)}function f(){c.classList.add("freeze")}function k(){c.classList.remove("freeze")}function b(t){let e=c.querySelector(`.task.id-${t}`);e&&e.classList.remove("selected")}function v(t,e){let s=document.elementsFromPoint(t,e),i=!1,n=-1;for(let t of s)if(t.classList.contains("task")){let e=t.className.indexOf("id-"),s=t.className.indexOf(" ",e);s<0&&(s=t.className.length),i=!0,n=Number(t.className.slice(e+3,s))}else if(t.classList.contains("task-expand-img"))return-1;return i?n:-1}function L(t){f();let e=document.querySelector("body"),s=e.querySelector(`.task.id-${t.id}`);s.classList.add("editing");let i=y("div","card-input",e),n=C("text",null,"input-title",t.title,i,"field-container","Task name");n.focus(),n.setSelectionRange(n.value.length,n.value.length);let r=y("div",["due-container","input-container"],i),o=C("date",null,"input-date",t.dueDateStr,r,"field-container","Due date"),a=C("time",null,"input-time",t.dueTimeStr,r,"field-container","Due time"),d=C("textarea",null,"input-desc",t.description,i,"field-container","Description"),u=y("div",["radio-container","input-container"],i),l=y("div","field-container",u),c=(y("div","pseudo-label",l,"Priority"),y(T("priority-radio",t.priority,h),null,l));A(c,null,"input-priority");let g=y("div","field-container",u),p=(y("div","pseudo-label",g,"Progress"),y(T("progress-radio",t.progress,m),null,g));A(p,null,"input-progress");let k=y("div","progress-check-container",g),b=y("input",null,k);A(b,"checkbox","progress-check"),t.useProgressFromSubtasks&&b.setAttribute("checked","checked"),y("label",null,k,"Set progress from subtasks").setAttribute("for","progress-check"),S(b,p);let v=C("textarea",null,"input-note",t.notes,i,"field-container","Notes"),L=y("div","input-buttons",i);return{card:s,cardInput:i,titleInput:n,dateInput:o,timeInput:a,descInput:d,priorityField:c,progressCheck:b,progressField:p,notesInput:v,confirm:y(x("M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z","Confirm",!0,"input-button"),["confirm-edit-img","input-button"],L),cancel:y(x("M9,7L11,12L9,17H11L12,14.5L13,17H15L13,12L15,7H13L12,9.5L11,7H9M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2Z","Cancel",!0,"input-button"),["confirm-edit-img","input-button"],L)}}function y(t,e,s,i){if("string"==typeof t)var n=document.createElement(t);else n=t;return e&&("string"==typeof e?n.classList.add(e):n.classList.add(...e)),i&&(n.textContent=i),s.appendChild(n),n}function S(t,e){t.checked?e.setAttribute("disabled","disabled"):e.removeAttribute("disabled")}function w(t){let e=t.querySelectorAll("input");for(let t=0;t<e.length;t++)if(e[t].checked)return t;return-1}function C(t,e,s,i,n,r,o,a){let d=y("div",r,n);var u;return y("label",a,d,o).setAttribute("for",s),"textarea"==t?A(u=y("textarea",e,d,i),null,s,null):A(u=y("input",e,d),t,s,i),u}function A(t,e,s,i){e&&t.setAttribute("type",e),s&&(t.setAttribute("name",s),t.setAttribute("id",s)),i&&t.setAttribute("value",i)}function D(t,e){if(t.expanded)return e.classList.remove("collapsed"),void e.classList.add("expanded");e.classList.remove("expanded"),e.classList.add("collapsed")}function T(t,e,s){let i=document.createElement("fieldset");i.classList.add(`${t}-fieldset`);let n=[],r=[];for(let e=0;e<s.length;e++)n.push(document.createElement("input")),n[e].setAttribute("type","radio"),n[e].setAttribute("id",`${t}-${e}`),n[e].setAttribute("name",t),n[e].setAttribute("value",s[e]),i.appendChild(n[e]),r.push(document.createElement("label")),r[e].setAttribute("for",`${t}-${e}`),r[e].textContent=s[e],i.appendChild(r[e]);return n[e].setAttribute("checked",""),i}function x(t,e,s,i){let n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("viewBox","0 0 24 24");let r=document.createElementNS("http://www.w3.org/2000/svg","title");if(r.textContent=e,n.appendChild(r),s){var o=document.createElementNS("http://www.w3.org/2000/svg","path");o.setAttribute("d","M12,4A10,10 0 0,0 4,12A10,10 0 0,0 12,20A10,10 0 0,0 20,12A10,10 0 0,0 12,4Z"),o.classList.add("bg-img"),n.appendChild(o)}let a=document.createElementNS("http://www.w3.org/2000/svg","path");return a.setAttribute("d",t),n.appendChild(a),null!=i&&(a.classList.add(i),s&&o.classList.add(i)),n}const M="http://www.w3.org/2000/svg",E=class{clickReleaseWindow;svg;group;menu;border;menuItems=[];buttonDownTime;isVisible=!1;tileGroup=null;functions;itemTexts;borderSize=1;scale=1;fontSize=20;menuMargin=2;menuPosOffset={x:-4,y:-1};menuWidth;menuHeight;initTime;postInitDelay=200;html;constructor(t,e,s){this.html=document.querySelector("html"),this.svg=document.createElementNS(M,"svg"),this.svg.classList.add("menu"),s&&this.svg.classList.add(...s),this.svg.setAttribute("display","none"),this.clickReleaseWindow=500,this.group=document.createElementNS(M,"g"),this.menu=document.createElementNS(M,"rect"),this.border=document.createElementNS(M,"rect"),this.group.appendChild(this.border),this.group.appendChild(this.menu),this.group.setAttribute("id","menuGroup"),this.border.classList.add("menu-border"),this.menu.classList.add("menu-rect"),this.functions=e,this.itemTexts=t,this.svg.addEventListener("mousemove",(t=>{this.updateHighlight(t.clientX,t.clientY)})),window.addEventListener("scroll",(t=>{this.isVisible&&this.erase()})),document.addEventListener("mousedown",(t=>{if(this.isVisible&&(new Date).getTime()-this.initTime>this.postInitDelay){let e=this.getHighlighted(),s=document.elementsFromPoint(t.clientX,t.clientY);e&&s.includes(e.rect)&&this.activateSelection(),this.erase(),this.svg.remove()}}))}init(){let t=window.getComputedStyle(this.svg).getPropertyValue("font-size");if(t){let e="";for(let s of t){let t=s.charCodeAt(0);t>=48&&t<=57&&(e+=s)}this.fontSize=Number(e)}this.svg.setAttribute("display","block"),this.svg.setAttribute("style","position: absolute;");for(let t=0;t<this.itemTexts.length;t++)this.addMenuItem(this.itemTexts[t],this.functions[t]);let e=0,s=0;for(let t of this.menuItems){let e=t.svgText.text.getBBox().width+2*t.svgText.xMargin;e>s&&(s=e)}for(let t=0;t<this.menuItems.length;t++)this.menuItems[t].rect.setAttribute("width",s),this.menuItems[t].group.setAttribute("transform",`translate(0, ${e})`),e+=Number(this.menuItems[t].rect.getAttribute("height"));this.menu.setAttribute("width",`${s}`),this.menu.setAttribute("height",`${e}`),this.border.setAttribute("width",`${s+2*this.borderSize}`),this.border.setAttribute("height",`${e+2*this.borderSize}`),this.border.setAttribute("x",""+-1*this.borderSize),this.border.setAttribute("y",""+-1*this.borderSize),this.svg.setAttribute("width",""+(s*this.scale+this.borderSize*this.scale)),this.svg.setAttribute("height",""+(e*this.scale+this.borderSize*this.scale)),this.svg.setAttribute("viewBox",`${-1*this.borderSize-this.menuMargin} ${-1*this.borderSize-this.menuMargin} ${s+2*this.borderSize+2*this.menuMargin} ${e+2*this.borderSize+2*this.menuMargin}`),this.menuWidth=s+2*this.borderSize-2*this.menuMargin,this.menuHeight=e+2*this.borderSize-2*this.menuMargin,this.initTime=(new Date).getTime()}buttonDown(t,e){this.isVisible&&this.erase(),this.isVisible=!0,this.svg.appendChild(this.group),this.init();const s=this.html.clientWidth,i=this.html.clientHeight;let n=0,r=0;t+this.menuPosOffset.x+this.menuWidth+1>s&&(n=s-(t+this.menuPosOffset.x+this.menuWidth+1)),e+this.menuPosOffset.y+this.menuHeight+1>i&&(r=i-(e+this.menuPosOffset.y+this.menuHeight+1)),this.svg.setAttribute("transform",`translate(${t-this.menuMargin+this.menuPosOffset.x+n+window.scrollX}, ${e-this.menuMargin+this.menuPosOffset.y+r+window.scrollY})`),this.updateHighlight(t,e),this.buttonDownTime=performance.now()}buttonUp(){performance.now()-this.buttonDownTime>clickReleaseWindow&&this.erase()}erase(){this.group.remove();for(let t of this.menuItems)t.group.remove();this.svg.setAttribute("display","none"),this.menuItems=[],this.isVisible=!1}addMenuItem(t,e,s){null==s&&(s=this.menuItems.length),this.menuItems.splice(s,0,new I(t,this.fontSize,this.group,s,e))}updateHighlight(t,e){if(this.isVisible){for(let t of this.menuItems)t.unhighlight();let s=document.elementsFromPoint(t,e);for(let t of this.menuItems)if(s.includes(t.rect)){t.highlight();break}}}getHighlighted(){if(this.isVisible)for(let t of this.menuItems)if(t.isHighlighted)return t}getHighlightedText(){let t=this.getHighlighted();return t?t.svgText.text.textContent:void 0}activateSelection(t="highlighted"){"highlighted"===t&&(t=this.getHighlightedText());let e=this.menuItems.find((e=>e.text==t));return e?e.function():null}};class I{rect;group;text;svgText;isHighlighted;functions;constructor(t,e,s,i,n){this.text=t,this.rect=document.createElementNS(M,"rect"),this.group=document.createElementNS(M,"g"),this.group.appendChild(this.rect),s.appendChild(this.group),this.svgText=new N(t,this.group,i,e),this.rect.setAttribute("fill","rgba(0, 0, 0, 0)"),this.rect.setAttribute("height",""+1.2*e),this.rect.classList.add("menu-item"),this.isHighlighted=!1,this.function=n}highlight(){this.rect.classList.add("menu-highlight"),this.isHighlighted=!0}unhighlight(){this.rect.classList.remove("menu-highlight"),this.isHighlighted=!1}}function N(t,e,s=-1,i=10){this.fontSize=i,this.xMargin=.2*this.fontSize,this.text=document.createElementNS(M,"text"),this.text.textContent=t,this.text.setAttribute("cursor","default"),this.text.classList.add(`menu-text-${s}`),this.text.classList.add("menu-text"),e.appendChild(this.text),this.text.setAttribute("x",`${this.xMargin}`),this.text.setAttribute("y",""+.9*this.fontSize),this.text.setAttribute("font-size",`${this.fontSize}px`)}function H(t){let e;try{e=window[t];const s="__storage_test__";return e.setItem(s,s),e.removeItem(s),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}class ${title;dueDate;dueDateStr;dueTime;dueTimeStr;description;priority;progress;notes;id;depth;currentlyEditing;useProgressFromSubtasks;subtaskList;supertaskList;expanded;selected;domDiv;static lastId=-1;constructor(t,e,s,i,n,r,o,a,d){this.title=t||"",this.dueDateStr=e,this.dueTimeStr=s,this.updateDue(),this.description=i||"",this.priority=n||0,this.progress=r||0,this.notes=o||"",this.selected=!1,a?a.add(this):this.supertaskList=null,this.currentlyEditing=!1,this.subtaskList=new P(this),this.expanded=this.hasContent(),this.useProgressFromSubtasks=!1,d?this.id=-1:(this.assignNewId(),this.updateDepth(!0))}clone(t,e,s){var i=new $(this.title,this.dueDateStr,this.dueTimeStr,this.description,this.priority,this.progress,this.notes,null,!0);if(i.expanded=this.expanded,i.selected=!1,i.useProgressFromSubtasks=this.useProgressFromSubtasks,e&&e.add(i,s),t){i.subtaskList.expanded=this.subtaskList.expanded;for(let e=0;e<this.subtaskList.tasks.length;e++)this.subtaskList.tasks[e].clone(t,i.subtaskList)}return i}updateDue(){let t=function(){let t=(new Date).getTimezoneOffset(),e=t<0?-1:1;t=Math.abs(t);let s=`${String(Math.floor(t/60)).padStart(2,"0")}:${String(t%60).padStart(2,"0")}`;return s=1==e?"-"+s:"+"+s,s}();if(this.dueDateStr&&this.dueDateStr.length){let e=`${this.dueDateStr}T00:00:00${t}`;this.dueDate=new Date(e)}if(this.dueTimeStr&&this.dueTimeStr.length){let e=`2000-01-01T${this.dueTimeStr}:00${t}`;this.dueTime=new Date(e)}}updateDepth(t){if(this.depth=0,null==this.supertaskList)return;let e=this.supertaskList.owner;for(;null!=e;)this.depth++,e=e.supertaskList?e.supertaskList.owner:null}delete(t){return!!this.supertaskList&&(this.domDiv&&(this.domDiv.task.remove(),t&&this.domDiv.subtasks.remove()),this.supertaskList.removeId(this.id))}hasContent(){return this.description&&""!=this.description||this.priority||this.progress||this.notes&&this.notes.length}log(){O.logTask(this)}assignNewId(){this.id=$.generateId()}assignNewIdRecursive(){this.assignNewId();for(let t=0;t<this.subtaskList.tasks.length;t++)this.subtaskList.tasks[t].assignNewIdRecursive()}refreshDom(t){this.domDiv&&(this.domDiv.task.remove(),t&&this.domDiv.subtasks.remove()),this.useProgressFromSubtasks&&(this.progress=this.getProgressRecursive()),this.domDiv=function(t){let e=null,s=t.supertask,n=-1;t.supertaskList&&(n=t.supertaskList.getTaskIdx(t)+1);let r=-1,o=null;n>0&&n<t.supertaskList.tasks.length&&(r=t.supertaskList.tasks[n].id,o=c.querySelector(`.task.id-${r}`)),e=s?c.querySelector(`.subtasks.id-${s.id}`):c;let a=`margin-left: calc(calc(var(--card-indent) * ${t.depth}) + calc(var(--card-margin) * 0.5))`,d=document.createElement("div");d.classList.add("task",`id-${t.id}`),d.setAttribute("style",a),t.selected&&d.classList.add("selected"),o?o.insertAdjacentElement("beforebegin",d):e.appendChild(d);let u=y("div","card-header-div",d),l=y("div","card-title-container",u);t.priority&&l.appendChild(function(t){let e=x(["M12 16C13.66 16 15 14.66 15 13C15 11.88 14.39 10.9 13.5 10.39L3.79 4.77L9.32 14.35C9.82 15.33 10.83 16 12 16M12 3C10.19 3 8.5 3.5 7.03 4.32L9.13 5.53C10 5.19 11 5 12 5C16.42 5 20 8.58 20 13C20 15.21 19.11 17.21 17.66 18.65H17.65C17.26 19.04 17.26 19.67 17.65 20.06C18.04 20.45 18.68 20.45 19.07 20.07C20.88 18.26 22 15.76 22 13C22 7.5 17.5 3 12 3M2 13C2 15.76 3.12 18.26 4.93 20.07C5.32 20.45 5.95 20.45 6.34 20.06C6.73 19.67 6.73 19.04 6.34 18.65C4.89 17.2 4 15.21 4 13C4 12 4.19 11 4.54 10.1L3.33 8C2.5 9.5 2 11.18 2 13Z","M12 1.38L9.14 12.06C8.8 13.1 9.04 14.29 9.86 15.12C11.04 16.29 12.94 16.29 14.11 15.12C14.9 14.33 15.16 13.2 14.89 12.21M14.6 3.35L15.22 5.68C18.04 6.92 20 9.73 20 13C20 15.21 19.11 17.21 17.66 18.65H17.65C17.26 19.04 17.26 19.67 17.65 20.06C18.04 20.45 18.68 20.45 19.07 20.07C20.88 18.26 22 15.76 22 13C22 8.38 18.86 4.5 14.6 3.35M9.4 3.36C5.15 4.5 2 8.4 2 13C2 15.76 3.12 18.26 4.93 20.07C5.32 20.45 5.95 20.45 6.34 20.06C6.73 19.67 6.73 19.04 6.34 18.65C4.89 17.2 4 15.21 4 13C4 9.65 5.94 6.86 8.79 5.65","M12,16A3,3 0 0,1 9,13C9,11.88 9.61,10.9 10.5,10.39L20.21,4.77L14.68,14.35C14.18,15.33 13.17,16 12,16M12,3C13.81,3 15.5,3.5 16.97,4.32L14.87,5.53C14,5.19 13,5 12,5A8,8 0 0,0 4,13C4,15.21 4.89,17.21 6.34,18.65H6.35C6.74,19.04 6.74,19.67 6.35,20.06C5.96,20.45 5.32,20.45 4.93,20.07V20.07C3.12,18.26 2,15.76 2,13A10,10 0 0,1 12,3M22,13C22,15.76 20.88,18.26 19.07,20.07V20.07C18.68,20.45 18.05,20.45 17.66,20.06C17.27,19.67 17.27,19.04 17.66,18.65V18.65C19.11,17.2 20,15.21 20,13C20,12 19.81,11 19.46,10.1L20.67,8C21.5,9.5 22,11.18 22,13Z"][t-1],h[t],!1);return e.classList.add("priority-img",["priority-low","priority-mid","priority-high"][t-1]),e}(t.priority)),t.progress&&l.appendChild(function(t){let e=x(["M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z","M8.46 8.46C9.4 7.53 10.67 7 12 7C13.33 7 14.6 7.53 15.54 8.46L8.46 15.54C7.53 14.6 7 13.33 7 12C7 10.67 7.53 9.4 8.46 8.46M8.17 2.76C9.39 2.26 10.69 2 12 2C13.31 2 14.61 2.26 15.83 2.76C17.04 3.26 18.14 4 19.07 4.93C20 5.86 20.74 6.96 21.24 8.17C21.74 9.39 22 10.69 22 12C22 14.65 20.95 17.2 19.07 19.07C17.2 20.95 14.65 22 12 22C10.69 22 9.39 21.74 8.17 21.24C6.96 20.74 5.86 20 4.93 19.07C3.05 17.2 2 14.65 2 12C2 9.35 3.05 6.8 4.93 4.93C5.86 4 6.96 3.26 8.17 2.76M6.34 17.66C7.84 19.16 9.88 20 12 20C14.12 20 16.16 19.16 17.66 17.66C19.16 16.16 20 14.12 20 12C20 9.88 19.16 7.84 17.66 6.34C16.16 4.84 14.12 4 12 4C9.88 4 7.84 4.84 6.34 6.34C4.84 7.84 4 9.88 4 12C4 14.12 4.84 16.16 6.34 17.66Z","M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z"][t-1],m[t],!1);return e.classList.add("progress-img",["progress-not-started","progress-in-progress","progress-completed"][t-1]),e}(t.progress)),y("h2",["card-title","card-editable"],l,t.title);let f=y(x("M12,2C6.47,2 2,6.47 2,12C2,17.53 6.47,22 12,22C17.53,22 22,17.53 22,12C22,6.47 17.53,2 12,2M15.1,7.07C15.24,7.07 15.38,7.12 15.5,7.23L16.77,8.5C17,8.72 17,9.07 16.77,9.28L15.77,10.28L13.72,8.23L14.72,7.23C14.82,7.12 14.96,7.07 15.1,7.07M13.13,8.81L15.19,10.87L9.13,16.93H7.07V14.87L13.13,8.81Z","Edit task",!0),"edit-task-img",u);t.dueDate&&y("div",["card-due-date","card-editable"],u,`${i(t.dueDate,"dddd, mmmm dS, yyyy")}`),t.dueTime&&y("div",["card-due-time","card-editable"],u,`${i(t.dueTime,"h:MM TT")}`);let k=y(x("","Expand",!0),"task-expand-img",u);t.hasContent()||k.classList.add("hidden");let b=k.querySelector("path:not(.bg-img)");if(g(b,d,t),t.priority>0||t.progress>0){let e=y("div","info-container",d);if(t.priority>0){let s=y("div","card-container",e);y("div","card-label",s,"Priority"),y("div",["card-priority","card-editable"],s,h[t.priority])}if(t.progress>0||t.useProgressFromSubtasks){let s=y("div","card-container",e),i=(y("div","card-label",s,"Progress"),y("div",["card-progress","card-editable"],s,m[t.progress]));t.useProgressFromSubtasks&&(i.textContent+=" (from subtasks)")}}if(t.description.length){let e=y("div","card-container",d);y("div",["card-description","card-content","card-editable"],e,t.description),y("div","card-label",e,"About")}if(t.notes.length){let e=y("div","card-container",d);y("div",["card-notes","card-content","card-editable"],e,t.notes),y("div","card-label",e,"Notes")}let v=c.querySelector(`.subtasks.id-${t.id}`),L=!1;var S;return v?(v.remove(),d.insertAdjacentElement("afterend",v),S=v.querySelector(".subtasks-header"),t.subtasks.length?S.classList.remove("hidden"):S.classList.add("hidden"),v.querySelector(".subtasks-text").textContent=`${t.subtasks.length} \n            ${1==t.subtasks.length?"subtask":"subtasks"}`):(L=!0,v=document.createElement("div"),d.insertAdjacentElement("afterend",v),v.classList.add("subtasks",`id-${t.id}`),(S=y("div",["subtasks-header",`id-${t.id}`],v)).setAttribute("style",a),t.subtasks.length?S.classList.remove("hidden"):S.classList.add("hidden"),y(x("","Subtasks",!0),"subtasks-plus-img",S).querySelector("path:not(.bg-img)"),p(t.subtaskList.expanded,v,t,!1),y("div",["subtasks-text",`id-${t.id}`],S,`${t.subtasks.length} \n            ${1==t.subtasks.length?"subtask":"subtasks"}`)),{task:d,subtasks:v,subtasksExpand:S,needSubtasksListener:L,taskExpand:k,taskExpandPath:b,header:u,editOpen:f}}(this),Y.addExpandTask(this.domDiv.taskExpand,this,this.domDiv.task,this.domDiv.taskExpandPath,this.domDiv.header),Y.addOpenEdit(this.domDiv.editOpen,this),this.domDiv.needSubtasksListener&&Y.addExpandSubtasks(this.domDiv.subtasksExpand,this,this.domDiv.subtasks),t&&this.subtaskList.refreshDom(t);for(let t of this.chain)t.useProgressFromSubtasks&&t.refreshDom(!1)}addSubtask(t,e){return this.subtaskList.add(t,e)}removeSubtaskId(t){return this.subtaskList.removeId(t)}removeSubtaskIdx(t){return this.subtaskList.removeIdx(t)}getProgressRecursive(t){null==t&&(t=0),!this.useProgressFromSubtasks&&this.progress>0&&(t=1!=this.progress||1!=t&&0!=t?3!=this.progress||3!=t&&0!=t?2:3:1);for(let e of this.subtaskList.tasks)t=e.getProgressRecursive(t);return t}get subtasks(){return this.subtaskList.tasks}get supertask(){return this.supertaskList?this.supertaskList.owner:null}get chain(){let t=this.supertaskList.owner,e=[];for(;t;)e.push(t),t=t.supertaskList.owner;return e}static generateId(){return $.lastId>=Number.MAX_SAFE_INTEGER&&($.lastId=-1),++$.lastId}static resetIds(){$.lastId=-1}}class P{tasks;owner;expanded=!1;static writeErrorShown=!1;static DEFAULT_KEY="taskList";constructor(t,e){this.owner=t,this.tasks=[],e&&e.forEach((t=>{this.add(t)}))}createTask(t,e){t||(t=this.tasks.length+1);let s=new $;if(this.add(s,t),this.owner?this.owner.refreshDom(!0):this.refreshDom(!1),this.writeRootToLocalStorage(),e&&!F.currentlyEditing){let t=L(s);Y.addInputCard(s,t)}}add(t,e){null==e&&(e=this.tasks.length),this.tasks.splice(e,0,t),t.supertaskList=this,t.updateDepth(!0)}getTaskIdx(t){for(let e=0;e<this.tasks.length;e++)if(this.tasks[e].id==t.id)return e;return-1}removeId(t){console.log(`Looking for id ${t} in tasks length ${this.tasks.length}`);for(let e=0;e<this.tasks.length;e++)if(this.tasks[e].id==t)return console.log(`Removing id ${t} at idx ${e}`),this.removeIdx(e);return!1}removeIdx(t){return this.tasks[t].supertaskList=null,this.tasks.splice(t,1),!0}getTaskById(t,e){let s=null;for(let i of this.tasks){if(i.id==t)return i;if(e&&i.subtaskList.hasTasks()&&(s=i.subtaskList.getTaskById(t,e),s))return s}return s}hasTasks(){return this.tasks.length>=1}getIdOrder(t){const e=[];for(let s of this.tasks)e.push(s.id),t&&e.push(...s.subtaskList.getIdOrder(t));return e}clear(){for(;this.tasks.length;)this.tasks[0].delete(!0)}refreshDom(t){this.tasks.forEach((e=>{e.domDiv&&(e.domDiv.task.remove(),t&&e.domDiv.subtasks.remove())})),this.tasks.forEach((e=>{e.refreshDom(t)}));for(let e=0;e<this.tasks.length;e++)this.tasks[e].refreshDom(t)}cloneJson(){let t=new P(null,null);t.expanded=this.expanded;for(let e of this.tasks){let s=e.clone(!1,null);t.add(s),s.id=e.id,s.depth=e.depth,s.dueDate=null,s.dueTime=null,s.subtaskList=e.subtaskList.cloneJson(),s.supertaskList=null}return t}initFromJson(t,e){this.owner=e,this.expanded=t.expanded,this.clear();for(let e of t.tasks){let t=new $(e.title,e.dueDateStr,e.dueTimeStr,e.description,e.priority,e.progress,e.notes,this,!1);t.expanded=e.expanded,t.useProgressFromSubtasks=e.useProgressFromSubtasks,t.subtaskList.initFromJson(e.subtaskList,t)}}writeToLocalStorage(t){if(H("localStorage")){t||(t=P.DEFAULT_KEY);let e=JSON.stringify(this.cloneJson());return localStorage.setItem(t,e),!0}return P.writeErrorShown||(P.writeErrorShown=!0,alert("Your browser either doesn't support local storage or has it disabled, so your tasks will not be saved after leaving this page.")),!1}writeRootToLocalStorage(t){this.owner?this.root.writeToLocalStorage(t):this.writeToLocalStorage(t)}restoreFromLocalStorage(t){if(H("localStorage")){t||(t=P.DEFAULT_KEY);let e=localStorage.getItem(t);if(e){$.resetIds();let t=JSON.parse(e);return this.initFromJson(t),this.refreshDom(!0),!0}}return!1}clearLocalStorage(t){H("localStorage")&&(t||(t=P.DEFAULT_KEY),localStorage.removeItem(t))}get root(){return this.owner?this.owner.chain.length?this.owner.chain[this.owner.chain.length-1].supertaskList:this.owner.supertaskList:this}}let F={currentlyEditing:!1,selectionAddTo:!1,selectionMass:!1,setSelectionAddTo:function(t,e){"Control"==e.key&&(F.selectionAddTo=t)},setSelectionMass:function(t,e){"Shift"==e.key&&(F.selectionMass=t)},touch:{time:[null,null],pos:[null,null],touchedId:[null,null]}},O=function(){let t=function(e,s){s||(s=""),console.log(s+"----------------"),console.log(s+"Title: "+e.title),console.log(s+"Due date: "+e.dueDate),console.log(s+"Due time: "+e.dueTime),console.log(s+"Description: "+e.description),console.log(s+"Progress: "+e.progress),console.log(s+"Notes:  "+e.notes),console.log(s+"ID: "+e.id),console.log(s+"Depth: "+e.depth),e.supertaskList&&e.supertaskList.owner?console.log(s+"Supertask: ("+e.supertaskList.owner.id+") "+e.supertaskList.owner.title):console.log(s+"No supertask"),e.subtaskList.hasTasks()&&(console.log(s+e.subtaskList.tasks.length+" subtask"+(1!=e.subtaskList.tasks.length?"s:":":")),e.subtaskList.tasks.forEach((e=>{t(e,s+"*   ")})))};return{logTask:t}}(),z=function(){const t=[];let e=function(t){const e=[];for(let s of t){let i=s.chain,n=!1;for(let e of t)if(i.includes(e)){n=!0;break}n||e.push(s)}return e},s=function(){t.splice(0,t.length)};return{buffer:t,remove:function(t,s,i){t instanceof Array||(t=[t]),s&&(t=e(t));let n=t[0].supertaskList.root;for(let e of t){let t=e.supertaskList.getTaskIdx(e),n=e.supertaskList,r=e.subtaskList;if(e.delete(!0),!s)for(let e=0;e<r.tasks.length;e++)n.add(r.tasks[e],t++);i&&(n.owner?n.owner.refreshDom(!0):n.refreshDom(!0))}n.writeToLocalStorage()},copy:function(i,n,r){i instanceof Array||(i=[i]),s(),n&&(i=e(i));let o=r.getIdOrder(!0);i.sort((function(t,e){return o.indexOf(t.id)<o.indexOf(e.id)?-1:1}));for(let e of i)t.push(e.clone(n))},cut:function(t,e,s,i){t instanceof Array||(t=[t]),this.copy(t,e,i),this.remove(t,e)},paste:function(e,s){if(e instanceof $&&(e=e.subtaskList),t.length){for(let i of t){let t=i.clone(!0,e,s++);t.assignNewIdRecursive(),t.updateDepth(!0)}return e.owner?e.owner.refreshDom(!0):e.refreshDom(!0),e.writeRootToLocalStorage(),!0}return!1},clearBuffer:s}}(),R=function(){const t=[];let e=function(e){i(e)||(e.selected=!0,t.push(e),function(t){let e=c.querySelector(`.task.id-${t}`);e&&e.classList.add("selected")}(e.id))},s=function(){for(let e of t)e.selected=!1,b(e.id);t.splice(0,t.length)},i=function(e){return t.indexOf(e)>=0},n=function(t){if(F.selectionMass)if(R.selected.length){let e=Z.getIdOrder(!0),s=e.indexOf(R.selected[0].id),i=e.indexOf(t.id);if(i<s){let t=s;s=i,i=t}R.addExclusive(R.selected[0]);for(let t=s;t<=i;t++)e[t]!=R.selected[0].id&&R.add(Z.getTaskById(e[t],!0))}else R.addExclusive(t);else F.selectionAddTo?R.contains(t)?R.remove(t):R.add(t):R.addExclusive(t)},r=function(t,e){f();let s=["New task (above)","New task (below)","New task (as subtask)","Copy (with subtasks)","Copy (without subtasks)","Cut (with subtasks)","Cut (without subtasks)"],i=[function(){t.supertaskList.createTask(t.supertaskList.getTaskIdx(t),!0)},function(){t.supertaskList.createTask(t.supertaskList.getTaskIdx(t)+1,!0)},function(){t.subtaskList.createTask(null,!0)},function(){z.copy(R.selected,!0,Z)},function(){z.copy(R.selected,!1,Z)},function(){z.cut(R.selected,!0,!0,Z)},function(){z.cut(R.selected,!1,!0,Z)}];return z.buffer.length&&(s.push("Paste (above)","Paste (below)","Paste (as subtask)"),i.push((function(){z.paste(t.supertaskList,t.supertaskList.getTaskIdx(t))}),(function(){z.paste(task.supertaskList,t.supertaskList.getTaskIdx(t)+1)}),(function(){z.paste(t.subtaskList)}))),s.push("Delete (with subtasks)","Delete (without subtasks)"),i.push((function(){z.remove(R.selected,!0,!0)}),(function(){z.remove(R.selected,!1,!0)})),new E(s,i,e)};return{selected:t,add:e,addExclusive:function(t){s(),t.selected=!0,e(t)},remove:function(e){let s=t.indexOf(e);return s>=0&&(t.splice(s,1),e.selected=!1,b(e.id),!0)},clear:s,contains:i,updateSelection:n,triggerMenu:function(e,s,i,o){let a=Z.getTaskById(v(e,s),!0);a&&!t.includes(a)&&n(a);let d=null;if(o&&(d=["touch-menu"]),a&&R.selected.length)var u=r(a,d);else u=function(t){f();let e=["New task"],s=[function(){Z.createTask(Z.tasks.length,!0)}];return z.buffer.length&&(e.push("Paste"),s.push((function(){z.paste(Z,Z.tasks.length)}))),new E(e,s,t)}(d);document.querySelector("body").appendChild(u.svg),u.buttonDown(e,s)}}}(),Y=function(){let t=function(t,e){e.progressCheck.addEventListener("change",(t=>{S(e.progressCheck,e.progressField)})),e.confirm.addEventListener("click",(s=>{t.currentlyEditing=!1,F.currentlyEditing=!1,t.title=e.titleInput.value,t.dueDateStr=e.dateInput.value,t.dueTimeStr=e.timeInput.value,t.updateDue(),t.description=e.descInput.value,t.priority=w(e.priorityField),t.useProgressFromSubtasks=e.progressCheck.checked,t.useProgressFromSubtasks?t.progress=t.getProgressRecursive():t.progress=w(e.progressField),t.notes=e.notesInput.value,e.cardInput.remove(),k(),e.card.classList.remove("editing"),t.supertaskList.writeRootToLocalStorage(),t.refreshDom(!1)})),e.cancel.addEventListener("click",(s=>{t.currentlyEditing=!1,F.currentlyEditing=!1,e.cardInput.remove(),e.card.classList.remove("editing"),k()}))};return{addLeftClick:function(){document.addEventListener("click",(t=>{let e=Z.getTaskById(v(t.clientX,t.clientY),!0),s=document.elementsFromPoint(t.clientX,t.clientY);if(!F.currentlyEditing&&!t.target.classList.contains("input-button"))if(e)R.updateSelection(e);else{let t=!0;for(let e of s)if(e.classList.contains("task-expand-img")||e.classList.contains("subtasks-plus-img")){t=!1;break}t&&R.clear()}})),document.addEventListener("mouseup",(t=>{0!=t.button||F.currentlyEditing||k()})),document.addEventListener("touchstart",(t=>{F.touch.time.splice(0,1),F.touch.time.push((new Date).getTime()),F.touch.pos.splice(0,1),F.touch.pos.push({x:t.touches[0].clientX,y:t.touches[0].clientY}),F.touch.time[0]&&F.touch.time[1]-F.touch.time[0]<300&&Math.abs(F.touch.pos[1].x-F.touch.pos[0].x)<40&&Math.abs(F.touch.pos[1].y-F.touch.pos[0].y)<40&&R.triggerMenu(F.touch.pos[1].x,F.touch.pos[1].y,F.selectionAddTo,!0),F.touch.touchedId.splice(0,1),F.touch.touchedId.push(v(t.touches[0].clientX,t.touches[0].clientY)),console.log("Set last touched to "+F.touch.touchedId)}))},addRightClick:function(){document.addEventListener("contextmenu",(t=>{t.preventDefault()})),document.addEventListener("mousedown",(t=>{2!=t.button||F.currentlyEditing||R.triggerMenu(t.clientX,t.clientY,F.selectionAddTo)}))},addModifierKeys:function(){document.addEventListener("keydown",(t=>{F.setSelectionAddTo.bind(F,!0,t)(),F.setSelectionMass.bind(F,!0,t)()})),document.addEventListener("keyup",(t=>{F.setSelectionAddTo.bind(F,!1,t)(),F.setSelectionMass.bind(F,!1,t)()}))},addClearData:function(){document.querySelector(".clear-data").addEventListener("click",(t=>{F.currentlyEditing||confirm("This will delete all saved data. Continue?")&&(Z.clear(),Z.clearLocalStorage())}))},addExpandSubtasks:function(t,e,s){t.addEventListener("click",(t=>{F.currentlyEditing||(e.subtaskList.expanded=!e.subtaskList.expanded,p(e.subtaskList.expanded,s,e,F.selectionAddTo))}))},addExpandTask:function(t,e,s,i,n){t.addEventListener("click",(t=>{F.currentlyEditing||(e.expanded=!e.expanded,g(i,s,e))})),n.addEventListener("mouseover",(t=>{let e=document.elementsFromPoint(t.clientX,t.clientY);for(let t of e)if(t.classList.contains("task-expand-img"))return n.classList.remove("hover-possible"),!1;return n.classList.add("hover-possible"),!0}))},addOpenEdit:function(e,s){e.addEventListener("click",(e=>{if(!F.currentlyEditing)if("touch"==e.pointerType){if(s.selected&&F.touch.touchedId[0]==s.id){s.currentlyEditing=!0,F.currentlyEditing=!0;let e=L(s);t(s,e)}}else{s.currentlyEditing=!0,F.currentlyEditing=!0;let e=L(s);t(s,e)}}))},addInputCard:t}}(),Z=new P;Z.restoreFromLocalStorage(),Y.addLeftClick(),Y.addRightClick(),Y.addModifierKeys(),Y.addClearData()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,