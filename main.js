(()=>{"use strict";var t=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,e=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,s=/[^-+\dA-Z]/g;function i(e,s,i,c){if(1!==arguments.length||"string"!=typeof e||/\d/.test(e)||(s=e,e=void 0),(e=e||0===e?e:new Date)instanceof Date||(e=new Date(e)),isNaN(e))throw TypeError("Invalid date");var h=(s=String(n[s]||s||n.default)).slice(0,4);"UTC:"!==h&&"GMT:"!==h||(s=s.slice(4),i=!0,"GMT:"===h&&(c=!0));var m=function(){return i?"getUTC":"get"},p=function(){return e[m()+"Date"]()},g=function(){return e[m()+"Day"]()},f=function(){return e[m()+"Month"]()},b=function(){return e[m()+"FullYear"]()},k=function(){return e[m()+"Hours"]()},L=function(){return e[m()+"Minutes"]()},C=function(){return e[m()+"Seconds"]()},y=function(){return e[m()+"Milliseconds"]()},v=function(){return i?0:e.getTimezoneOffset()},A=function(){return o(e)},x={d:function(){return p()},dd:function(){return d(p())},ddd:function(){return r.dayNames[g()]},DDD:function(){return a({y:b(),m:f(),d:p(),_:m(),dayName:r.dayNames[g()],short:!0})},dddd:function(){return r.dayNames[g()+7]},DDDD:function(){return a({y:b(),m:f(),d:p(),_:m(),dayName:r.dayNames[g()+7]})},m:function(){return f()+1},mm:function(){return d(f()+1)},mmm:function(){return r.monthNames[f()]},mmmm:function(){return r.monthNames[f()+12]},yy:function(){return String(b()).slice(2)},yyyy:function(){return d(b(),4)},h:function(){return k()%12||12},hh:function(){return d(k()%12||12)},H:function(){return k()},HH:function(){return d(k())},M:function(){return L()},MM:function(){return d(L())},s:function(){return C()},ss:function(){return d(C())},l:function(){return d(y(),3)},L:function(){return d(Math.floor(y()/10))},t:function(){return k()<12?r.timeNames[0]:r.timeNames[1]},tt:function(){return k()<12?r.timeNames[2]:r.timeNames[3]},T:function(){return k()<12?r.timeNames[4]:r.timeNames[5]},TT:function(){return k()<12?r.timeNames[6]:r.timeNames[7]},Z:function(){return c?"GMT":i?"UTC":l(e)},o:function(){return(v()>0?"-":"+")+d(100*Math.floor(Math.abs(v())/60)+Math.abs(v())%60,4)},p:function(){return(v()>0?"-":"+")+d(Math.floor(Math.abs(v())/60),2)+":"+d(Math.floor(Math.abs(v())%60),2)},S:function(){return["th","st","nd","rd"][p()%10>3?0:(p()%100-p()%10!=10)*p()%10]},W:function(){return A()},WW:function(){return d(A())},N:function(){return u(e)}};return s.replace(t,(function(t){return t in x?x[t]():t.slice(1,t.length-1)}))}var n={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},r={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},d=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(t).padStart(e,"0")},a=function(t){var e=t.y,s=t.m,i=t.d,n=t._,r=t.dayName,d=t.short,a=void 0!==d&&d,o=new Date,u=new Date;u.setDate(u[n+"Date"]()-1);var l=new Date;return l.setDate(l[n+"Date"]()+1),o[n+"FullYear"]()===e&&o[n+"Month"]()===s&&o[n+"Date"]()===i?a?"Tdy":"Today":u[n+"FullYear"]()===e&&u[n+"Month"]()===s&&u[n+"Date"]()===i?a?"Ysd":"Yesterday":l[n+"FullYear"]()===e&&l[n+"Month"]()===s&&l[n+"Date"]()===i?a?"Tmw":"Tomorrow":r},o=function(t){var e=new Date(t.getFullYear(),t.getMonth(),t.getDate());e.setDate(e.getDate()-(e.getDay()+6)%7+3);var s=new Date(e.getFullYear(),0,4);s.setDate(s.getDate()-(s.getDay()+6)%7+3);var i=e.getTimezoneOffset()-s.getTimezoneOffset();e.setHours(e.getHours()-i);var n=(e-s)/6048e5;return 1+Math.floor(n)},u=function(t){var e=t.getDay();return 0===e&&(e=7),e},l=function(t){return(String(t).match(e)||[""]).pop().replace(s,"").replace(/GMT\+0000/g,"UTC")};const c=document.querySelector(".task-bin"),h=["N/A","Unimportant","Important","Urgent"],m=["N/A","Not started","In progress","Complete"];let p=!1;function g(t,e,s){A(s,e),s.expanded?t.setAttribute("d","M12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22M17,14L12,9L7,14H17Z"):t.setAttribute("d","M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M7,10L12,15L17,10H7Z")}function f(t,e,s,i){let n=e.querySelector(".subtasks-plus-img > path:not(.bg-img)");if(s.subtaskList.expanded=t,A(s.subtaskList,e),s.subtaskList.expanded?n.setAttribute("d","M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"):n.setAttribute("d","M17,13H13V17H11V13H7V11H11V7H13V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"),i)for(let n of s.subtaskList.tasks)f(t,e.querySelector(`.subtasks.id-${n.id}`),n,i)}function b(){p=!0,c.classList.add("freeze")}function k(){p=!1,c.classList.remove("freeze")}function L(t){let e=c.querySelector(`.task.id-${t}`);e&&e.classList.remove("selected")}function C(t,e){let s=document.elementsFromPoint(t,e),i=!1,n=-1;for(let t of s)if(t.classList.contains("task")){let e=t.className.indexOf("id-"),s=t.className.indexOf(" ",e);s<0&&(s=t.className.length),i=!0,n=Number(t.className.slice(e+3,s))}else if(t.classList.contains("task-expand-img"))return-1;return i?n:-1}function y(t){let e=document.createElement("div");return e.classList.add(...t),e}function v(t,e){let s=document.createElement("div");return s.textContent=t,s.classList.add(...e),s}function A(t,e){if(t.expanded)return e.classList.remove("collapsed"),void e.classList.add("expanded");e.classList.remove("expanded"),e.classList.add("collapsed")}function x(t,e){if(e.currentlyEditing)return;b();let s=document.querySelector("body"),i=s.querySelector(`.task.id-${t.id}`);i.classList.add("editing"),t.currentlyEditing=!0,e.currentlyEditing=!0;let n=document.createElement("div");n.classList.add("card-input"),s.appendChild(n);let r=document.createElement("div");r.classList.add("field-container"),n.appendChild(r);let d=document.createElement("label");d.setAttribute("for","input-title"),d.textContent="Task name",r.appendChild(d);let a=document.createElement("input");a.setAttribute("type","text"),a.setAttribute("name","input-title"),a.setAttribute("id","input-title"),a.setAttribute("value",t.title),r.appendChild(a),a.focus(),a.setSelectionRange(a.value.length,a.value.length);let o=document.createElement("div");o.classList.add("due-container","input-container"),n.appendChild(o);let u=document.createElement("div");u.classList.add("field-container"),o.appendChild(u);let l=document.createElement("label");l.setAttribute("for","input-date"),l.textContent="Due date",u.appendChild(l);let c=document.createElement("input");c.setAttribute("type","date"),c.setAttribute("name","input-date"),c.setAttribute("id","input-date"),c.setAttribute("value",t.dueDateStr),u.appendChild(c);let p=document.createElement("div");p.classList.add("field-container"),o.appendChild(p);let g=document.createElement("label");g.setAttribute("for","input-time"),g.textContent="Due time",p.appendChild(g);let f=document.createElement("input");f.setAttribute("type","time"),f.setAttribute("name","input-time"),f.setAttribute("id","input-time"),f.setAttribute("value",t.dueTimeStr),p.appendChild(f);let L=document.createElement("div");L.classList.add("field-container"),n.appendChild(L);let C=document.createElement("label");C.setAttribute("for","input-desc"),C.textContent="Description",L.appendChild(C);let y=document.createElement("textarea");y.setAttribute("name","input-desc"),y.setAttribute("id","input-desc"),y.textContent=t.description,L.appendChild(y);let v=document.createElement("div");v.classList.add("radio-container","input-container"),n.appendChild(v);let A=document.createElement("div");A.classList.add("field-container"),v.appendChild(A);let x=document.createElement("div");x.classList.add("pseudo-label"),x.textContent="Priority",A.appendChild(x);let E=D("priority-radio",t.priority,h);E.setAttribute("name","input-priority"),E.setAttribute("id","input-priority"),A.appendChild(E);let M=document.createElement("div");M.classList.add("field-container"),v.appendChild(M);let I=document.createElement("div");I.classList.add("pseudo-label"),I.textContent="Progress",M.appendChild(I);let N=D("progress-radio",t.progress,m);N.setAttribute("name","input-progress"),N.setAttribute("id","input-progress"),M.appendChild(N);let H=document.createElement("div");H.classList.add("progress-check-container"),M.appendChild(H);let $=document.createElement("input");$.setAttribute("type","checkbox"),t.useProgressFromSubtasks&&$.setAttribute("checked","checked"),$.setAttribute("id","progress-check"),$.setAttribute("name","progress-check"),$.setAttribute("id","progress-check");let P=document.createElement("label");P.setAttribute("for","progress-check"),P.textContent="Set progress from subtasks",H.appendChild($),H.appendChild(P),S($,N);let F=document.createElement("div");F.classList.add("field-container"),n.appendChild(F);let z=document.createElement("label");z.setAttribute("for","input-notes"),z.textContent="Notes",F.appendChild(z);let O=document.createElement("textarea");O.setAttribute("name","input-notes"),O.setAttribute("id","input-notes"),O.textContent=t.notes,F.appendChild(O);let Z=document.createElement("div");Z.classList.add("input-buttons"),n.appendChild(Z);let q=w("M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z","Confirm",!0,"input-button");q.classList.add("confirm-edit-img","input-button"),Z.appendChild(q);let V=w("M9,7L11,12L9,17H11L12,14.5L13,17H15L13,12L15,7H13L12,9.5L11,7H9M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2Z","Cancel",!0,"input-button");V.classList.add("confirm-edit-img","input-button"),Z.appendChild(V),$.addEventListener("change",(t=>{S($,N)})),q.addEventListener("click",(s=>{t.currentlyEditing=!1,e.currentlyEditing=!1,t.title=a.value,t.dueDateStr=c.value,t.dueTimeStr=f.value,t.updateDue(),t.description=y.value,t.priority=T(E),t.useProgressFromSubtasks=$.checked,t.useProgressFromSubtasks?t.progress=t.getProgressRecursive():t.progress=T(N),t.notes=O.value,t.expanded=t.hasContent(),n.remove(),k(),i.classList.remove("editing"),t.refreshDom(!1)})),V.addEventListener("click",(s=>{t.currentlyEditing=!1,e.currentlyEditing=!1,n.remove(),i.classList.remove("editing"),k()}))}function S(t,e){t.checked?e.setAttribute("disabled","disabled"):e.removeAttribute("disabled")}function D(t,e,s){let i=document.createElement("fieldset");i.classList.add(`${t}-fieldset`);let n=[],r=[];for(let e=0;e<s.length;e++)n.push(document.createElement("input")),n[e].setAttribute("type","radio"),n[e].setAttribute("id",`${t}-${e}`),n[e].setAttribute("name",t),n[e].setAttribute("value",s[e]),i.appendChild(n[e]),r.push(document.createElement("label")),r[e].setAttribute("for",`${t}-${e}`),r[e].textContent=s[e],i.appendChild(r[e]);return n[e].setAttribute("checked",""),i}function T(t){let e=t.querySelectorAll("input");for(let t=0;t<e.length;t++)if(e[t].checked)return t;return-1}function w(t,e,s,i){let n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("viewBox","0 0 24 24");let r=document.createElementNS("http://www.w3.org/2000/svg","title");if(r.textContent=e,n.appendChild(r),s){var d=document.createElementNS("http://www.w3.org/2000/svg","path");d.setAttribute("d","M12,4A10,10 0 0,0 4,12A10,10 0 0,0 12,20A10,10 0 0,0 20,12A10,10 0 0,0 12,4Z"),d.classList.add("bg-img"),n.appendChild(d)}let a=document.createElementNS("http://www.w3.org/2000/svg","path");return a.setAttribute("d",t),n.appendChild(a),null!=i&&(a.classList.add(i),s&&d.classList.add(i)),n}const E="http://www.w3.org/2000/svg",M=class{clickReleaseWindow;svg;group;menu;border;menuItems=[];buttonDownTime;isVisible=!1;tileGroup=null;functions;itemTexts;borderSize=1;scale=1;fontSize=20;menuMargin=2;menuPosOffset={x:-4,y:-1};menuWidth;menuHeight;initTime;postInitDelay=200;html;constructor(t,e){this.html=document.querySelector("html"),this.svg=document.createElementNS(E,"svg"),this.svg.classList.add("menu"),this.svg.setAttribute("display","none"),this.clickReleaseWindow=500,this.group=document.createElementNS(E,"g"),this.menu=document.createElementNS(E,"rect"),this.border=document.createElementNS(E,"rect"),this.group.appendChild(this.border),this.group.appendChild(this.menu),this.group.setAttribute("id","menuGroup"),this.border.classList.add("menu-border"),this.menu.classList.add("menu-rect"),this.functions=e,this.itemTexts=t,this.svg.addEventListener("mousemove",(t=>{this.updateHighlight(t.clientX,t.clientY)})),window.addEventListener("scroll",(t=>{this.isVisible&&this.erase()})),document.addEventListener("mousedown",(t=>{if(this.isVisible&&(new Date).getTime()-this.initTime>this.postInitDelay){let e=this.getHighlighted(),s=document.elementsFromPoint(t.clientX,t.clientY);e&&s.includes(e.rect)&&this.activateSelection(),this.erase(),this.svg.remove()}}))}init(){this.svg.setAttribute("display","block"),this.svg.setAttribute("style","position: absolute;");for(let t=0;t<this.itemTexts.length;t++)this.addMenuItem(this.itemTexts[t],this.functions[t]);let t=0,e=0;for(let t of this.menuItems){let s=t.svgText.text.getBBox().width+2*t.svgText.xMargin;s>e&&(e=s)}for(let s=0;s<this.menuItems.length;s++)this.menuItems[s].rect.setAttribute("width",e),this.menuItems[s].group.setAttribute("transform",`translate(0, ${t})`),t+=Number(this.menuItems[s].rect.getAttribute("height"));this.menu.setAttribute("width",`${e}`),this.menu.setAttribute("height",`${t}`),this.border.setAttribute("width",`${e+2*this.borderSize}`),this.border.setAttribute("height",`${t+2*this.borderSize}`),this.border.setAttribute("x",""+-1*this.borderSize),this.border.setAttribute("y",""+-1*this.borderSize),this.svg.setAttribute("width",""+(e*this.scale+this.borderSize*this.scale)),this.svg.setAttribute("height",""+(t*this.scale+this.borderSize*this.scale)),this.svg.setAttribute("viewBox",`${-1*this.borderSize-this.menuMargin} ${-1*this.borderSize-this.menuMargin} ${e+2*this.borderSize+2*this.menuMargin} ${t+2*this.borderSize+2*this.menuMargin}`),this.menuWidth=e+2*this.borderSize-2*this.menuMargin,this.menuHeight=t+2*this.borderSize-2*this.menuMargin,this.initTime=(new Date).getTime()}buttonDown(t,e){this.isVisible&&this.erase(),this.isVisible=!0,this.svg.appendChild(this.group),this.init();const s=this.html.clientWidth,i=this.html.clientHeight;let n=0,r=0;t+this.menuPosOffset.x+this.menuWidth+1>s&&(n=s-(t+this.menuPosOffset.x+this.menuWidth+1)),e+this.menuPosOffset.y+this.menuHeight+1>i&&(r=i-(e+this.menuPosOffset.y+this.menuHeight+1)),this.svg.setAttribute("transform",`translate(${t-this.menuMargin+this.menuPosOffset.x+n+window.scrollX}, ${e-this.menuMargin+this.menuPosOffset.y+r+window.scrollY})`),this.updateHighlight(t,e),this.buttonDownTime=performance.now()}buttonUp(){performance.now()-this.buttonDownTime>clickReleaseWindow&&this.erase()}erase(){this.group.remove();for(let t of this.menuItems)t.group.remove();this.svg.setAttribute("display","none"),this.menuItems=[],this.isVisible=!1}addMenuItem(t,e,s){null==s&&(s=this.menuItems.length),this.menuItems.splice(s,0,new I(t,this.fontSize,this.group,s,e))}updateHighlight(t,e){if(this.isVisible){for(let t of this.menuItems)t.unhighlight();let s=document.elementsFromPoint(t,e);for(let t of this.menuItems)if(s.includes(t.rect)){t.highlight();break}}}getHighlighted(){if(this.isVisible)for(let t of this.menuItems)if(t.isHighlighted)return t}getHighlightedText(){let t=this.getHighlighted();return t?t.svgText.text.textContent:void 0}activateSelection(t="highlighted"){"highlighted"===t&&(t=this.getHighlightedText());let e=this.menuItems.find((e=>e.text==t));return e?e.function():null}};class I{rect;group;text;svgText;isHighlighted;functions;constructor(t,e,s,i,n){this.text=t,this.rect=document.createElementNS(E,"rect"),this.group=document.createElementNS(E,"g"),this.group.appendChild(this.rect),s.appendChild(this.group),this.svgText=new N(t,this.group,i,e),this.rect.setAttribute("fill","rgba(0, 0, 0, 0)"),this.rect.setAttribute("height",""+1.2*e),this.rect.classList.add("menu-item"),this.isHighlighted=!1,this.function=n}highlight(){this.rect.classList.add("menu-highlight"),this.isHighlighted=!0}unhighlight(){this.rect.classList.remove("menu-highlight"),this.isHighlighted=!1}}function N(t,e,s=-1,i=10){this.fontSize=i,this.xMargin=.2*this.fontSize,this.text=document.createElementNS(E,"text"),this.text.textContent=t,this.text.setAttribute("cursor","default"),this.text.classList.add(`menu-text-${s}`),this.text.classList.add("menu-text"),e.appendChild(this.text),this.text.setAttribute("x",`${this.xMargin}`),this.text.setAttribute("y",""+.9*this.fontSize),this.text.setAttribute("font-size",`${this.fontSize}px`)}class H{title;dueDate;dueDateStr;dueTime;dueTimeStr;description;priority;progress;notes;id;depth;currentlyEditing;useProgressFromSubtasks;subtaskList;supertaskList;expanded;selected;domDiv;static lastId=-1;constructor(t,e,s,i,n,r,d,a,o){this.title=t||"",this.dueDateStr=e,this.dueTimeStr=s,this.updateDue(),this.description=i||"",this.priority=n||0,this.progress=r||0,this.notes=d||"",this.selected=!1,a?a.add(this):this.supertaskList=null,this.currentlyEditing=!1,this.subtaskList=new $(this),this.expanded=this.hasContent(),this.useProgressFromSubtasks=!1,o?this.id=-1:(this.assignNewId(),this.updateDepth(!0))}clone(t,e,s){var i=new H(this.title,this.dueDateStr,this.dueTimeStr,this.description,this.priority,this.progress,this.notes,null,!0);if(i.expanded=this.expanded,i.selected=!1,i.useProgressFromSubtasks=this.useProgressFromSubtasks,e&&e.add(i,s),t){i.subtaskList.expanded=this.subtaskList.expanded;for(let e=0;e<this.subtaskList.tasks.length;e++)this.subtaskList.tasks[e].clone(t,i.subtaskList)}return i}updateDue(){let t=function(){let t=(new Date).getTimezoneOffset(),e=t<0?-1:1;t=Math.abs(t);let s=`${String(Math.floor(t/60)).padStart(2,"0")}:${String(t%60).padStart(2,"0")}`;return s=1==e?"-"+s:"+"+s,s}();if(this.dueDateStr&&this.dueDateStr.length){let e=`${this.dueDateStr}T00:00:00${t}`;this.dueDate=new Date(e)}if(this.dueTimeStr&&this.dueTimeStr.length){let e=`2000-01-01T${this.dueTimeStr}:00${t}`;this.dueTime=new Date(e)}}updateDepth(t){if(this.depth=0,null==this.supertaskList)return;let e=this.supertaskList.owner;for(;null!=e;)this.depth++,e=e.supertaskList?e.supertaskList.owner:null}editTitle(){}editDue(){}editDescription(){}editProgress(){}editNotes(){}delete(t){return!!this.supertaskList&&(this.domDiv&&(this.domDiv.task.remove(),t&&this.domDiv.subtasks.remove()),this.supertaskList.removeId(this.id))}hasContent(){return this.description&&this.description.length||this.priority||this.progress||this.notes&&this.notes.length}log(){F.logTask(this)}assignNewId(){this.id=H.generateId()}assignNewIdRecursive(){this.assignNewId();for(let t=0;t<this.subtaskList.tasks.length;t++)this.subtaskList.tasks[t].assignNewIdRecursive()}refreshDom(t){this.domDiv&&(this.domDiv.task.remove(),t&&this.domDiv.subtasks.remove()),this.useProgressFromSubtasks&&(this.progress=this.getProgressRecursive()),this.domDiv=function(t,e){let s=null,n=t.supertask,r=-1;t.supertaskList&&(r=t.supertaskList.getTaskIdx(t)+1);let d=-1,a=null;r>0&&r<t.supertaskList.tasks.length&&(d=t.supertaskList.tasks[r].id,a=c.querySelector(`.task.id-${d}`)),s=n?c.querySelector(`.subtasks.id-${n.id}`):c;let o=`margin-left: calc(calc(var(--card-indent) * ${t.depth}) + calc(var(--card-margin) * 0.5))`,u=document.createElement("div");u.classList.add("task",`id-${t.id}`),u.setAttribute("style",o),t.selected&&u.classList.add("selected"),a?a.insertAdjacentElement("beforebegin",u):s.appendChild(u);let l=document.createElement("div");l.classList.add("card-header-div"),u.appendChild(l);let p=document.createElement("div");p.classList.add("card-title-container"),l.appendChild(p),t.priority&&p.appendChild(function(t){let e=w(["M12 16C13.66 16 15 14.66 15 13C15 11.88 14.39 10.9 13.5 10.39L3.79 4.77L9.32 14.35C9.82 15.33 10.83 16 12 16M12 3C10.19 3 8.5 3.5 7.03 4.32L9.13 5.53C10 5.19 11 5 12 5C16.42 5 20 8.58 20 13C20 15.21 19.11 17.21 17.66 18.65H17.65C17.26 19.04 17.26 19.67 17.65 20.06C18.04 20.45 18.68 20.45 19.07 20.07C20.88 18.26 22 15.76 22 13C22 7.5 17.5 3 12 3M2 13C2 15.76 3.12 18.26 4.93 20.07C5.32 20.45 5.95 20.45 6.34 20.06C6.73 19.67 6.73 19.04 6.34 18.65C4.89 17.2 4 15.21 4 13C4 12 4.19 11 4.54 10.1L3.33 8C2.5 9.5 2 11.18 2 13Z","M12 1.38L9.14 12.06C8.8 13.1 9.04 14.29 9.86 15.12C11.04 16.29 12.94 16.29 14.11 15.12C14.9 14.33 15.16 13.2 14.89 12.21M14.6 3.35L15.22 5.68C18.04 6.92 20 9.73 20 13C20 15.21 19.11 17.21 17.66 18.65H17.65C17.26 19.04 17.26 19.67 17.65 20.06C18.04 20.45 18.68 20.45 19.07 20.07C20.88 18.26 22 15.76 22 13C22 8.38 18.86 4.5 14.6 3.35M9.4 3.36C5.15 4.5 2 8.4 2 13C2 15.76 3.12 18.26 4.93 20.07C5.32 20.45 5.95 20.45 6.34 20.06C6.73 19.67 6.73 19.04 6.34 18.65C4.89 17.2 4 15.21 4 13C4 9.65 5.94 6.86 8.79 5.65","M12,16A3,3 0 0,1 9,13C9,11.88 9.61,10.9 10.5,10.39L20.21,4.77L14.68,14.35C14.18,15.33 13.17,16 12,16M12,3C13.81,3 15.5,3.5 16.97,4.32L14.87,5.53C14,5.19 13,5 12,5A8,8 0 0,0 4,13C4,15.21 4.89,17.21 6.34,18.65H6.35C6.74,19.04 6.74,19.67 6.35,20.06C5.96,20.45 5.32,20.45 4.93,20.07V20.07C3.12,18.26 2,15.76 2,13A10,10 0 0,1 12,3M22,13C22,15.76 20.88,18.26 19.07,20.07V20.07C18.68,20.45 18.05,20.45 17.66,20.06C17.27,19.67 17.27,19.04 17.66,18.65V18.65C19.11,17.2 20,15.21 20,13C20,12 19.81,11 19.46,10.1L20.67,8C21.5,9.5 22,11.18 22,13Z"][t-1],h[t],!1);return e.classList.add("priority-img",["priority-low","priority-mid","priority-high"][t-1]),e}(t.priority)),t.progress&&p.appendChild(function(t){let e=w(["M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z","M8.46 8.46C9.4 7.53 10.67 7 12 7C13.33 7 14.6 7.53 15.54 8.46L8.46 15.54C7.53 14.6 7 13.33 7 12C7 10.67 7.53 9.4 8.46 8.46M8.17 2.76C9.39 2.26 10.69 2 12 2C13.31 2 14.61 2.26 15.83 2.76C17.04 3.26 18.14 4 19.07 4.93C20 5.86 20.74 6.96 21.24 8.17C21.74 9.39 22 10.69 22 12C22 14.65 20.95 17.2 19.07 19.07C17.2 20.95 14.65 22 12 22C10.69 22 9.39 21.74 8.17 21.24C6.96 20.74 5.86 20 4.93 19.07C3.05 17.2 2 14.65 2 12C2 9.35 3.05 6.8 4.93 4.93C5.86 4 6.96 3.26 8.17 2.76M6.34 17.66C7.84 19.16 9.88 20 12 20C14.12 20 16.16 19.16 17.66 17.66C19.16 16.16 20 14.12 20 12C20 9.88 19.16 7.84 17.66 6.34C16.16 4.84 14.12 4 12 4C9.88 4 7.84 4.84 6.34 6.34C4.84 7.84 4 9.88 4 12C4 14.12 4.84 16.16 6.34 17.66Z","M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z"][t-1],m[t],!1);return e.classList.add("progress-img",["progress-not-started","progress-in-progress","progress-completed"][t-1]),e}(t.progress));let b=document.createElement("h2");b.textContent=t.title,b.classList.add("card-title","card-editable"),p.appendChild(b);let k=w("M12,2C6.47,2 2,6.47 2,12C2,17.53 6.47,22 12,22C17.53,22 22,17.53 22,12C22,6.47 17.53,2 12,2M15.1,7.07C15.24,7.07 15.38,7.12 15.5,7.23L16.77,8.5C17,8.72 17,9.07 16.77,9.28L15.77,10.28L13.72,8.23L14.72,7.23C14.82,7.12 14.96,7.07 15.1,7.07M13.13,8.81L15.19,10.87L9.13,16.93H7.07V14.87L13.13,8.81Z","Edit task",!0);if(k.classList.add("edit-task-img"),l.appendChild(k),t.dueDate){let e=document.createElement("div");e.textContent=`${i(t.dueDate,"dddd, mmmm dS, yyyy")}`,e.classList.add("card-due-date","card-editable"),l.appendChild(e)}if(t.dueTime){let e=document.createElement("div");e.textContent=`${i(t.dueTime,"h:MM TT")}`,e.classList.add("card-due-time","card-editable"),l.appendChild(e)}let L=w("","Expand",!0);L.classList.add("task-expand-img"),l.appendChild(L),t.hasContent()||L.classList.add("hidden");let C=L.querySelector("path:not(.bg-img)");if(g(C,u,t),t.priority>0||t.progress>0){let e=document.createElement("div");if(e.classList.add("info-container"),u.appendChild(e),t.priority>0){let s=y(["card-container"]);e.appendChild(s);let i=v("Priority",["card-label"]);s.appendChild(i);let n=document.createElement("div");n.textContent=h[t.priority],n.classList.add("card-priority","card-editable"),s.appendChild(n)}if(t.progress>0||t.useProgressFromSubtasks){let s=y(["card-container"]);e.appendChild(s);let i=v("Progress",["card-label"]);s.appendChild(i);let n=document.createElement("div");n.textContent=m[t.progress],t.useProgressFromSubtasks&&(n.textContent+=" (from subtasks)"),n.classList.add("card-progress","card-editable"),s.appendChild(n)}}if(t.description.length){let e=y(["card-container"]);u.appendChild(e);let s=document.createElement("div");s.textContent=t.description,s.classList.add("card-description","card-content","card-editable"),e.appendChild(s);let i=v("About",["card-label"]);e.appendChild(i)}if(t.notes.length){let e=y(["card-container"]);u.appendChild(e);let s=document.createElement("div");s.textContent=t.notes,s.classList.add("card-notes","card-content","card-editable"),e.appendChild(s);let i=v("Notes",["card-label"]);e.appendChild(i)}let A=c.querySelector(`.subtasks.id-${t.id}`);if(A){A.remove(),u.insertAdjacentElement("afterend",A);let e=A.querySelector(".subtasks-header");A.querySelector(".subtasks-text").textContent=`${t.subtasks.length} \n            ${1==t.subtasks.length?"subtask":"subtasks"}`,t.subtasks.length?e.classList.remove("hidden"):e.classList.add("hidden")}else{A=document.createElement("div"),u.insertAdjacentElement("afterend",A),A.classList.add("subtasks",`id-${t.id}`);let s=document.createElement("div");s.classList.add("subtasks-header",`id-${t.id}`),s.setAttribute("style",o),A.appendChild(s);let i=w("","Subtasks",!0);i.classList.add("subtasks-plus-img"),s.appendChild(i),i.querySelector("path:not(.bg-img)"),f(t.subtaskList.expanded,A,t,!1);let n=document.createElement("div");n.classList.add("subtasks-text",`id-${t.id}`),s.appendChild(n),n.textContent=`${t.subtasks.length} \n            ${1==t.subtasks.length?"subtask":"subtasks"}`,t.subtasks.length?s.classList.remove("hidden"):s.classList.add("hidden"),s.addEventListener("click",(s=>{e.currentlyEditing||(t.subtaskList.expanded=!t.subtaskList.expanded,f(t.subtaskList.expanded,A,t,e.selectionAddTo))}))}return L.addEventListener("click",(s=>{e.currentlyEditing||(t.expanded=!t.expanded,g(C,u,t))})),l.addEventListener("mouseover",(t=>{let e=document.elementsFromPoint(t.clientX,t.clientY);for(let t of e)if(t.classList.contains("task-expand-img"))return l.classList.remove("hover-possible"),!1;return l.classList.add("hover-possible"),!0})),k.addEventListener("click",(s=>{"touch"==s.pointerType?t.selected&&e.touch.touchedId[0]==t.id&&x(t,e):x(t,e)})),{task:u,subtasks:A}}(this,P),t&&this.subtaskList.refreshDom(t);for(let t of this.chain)t.useProgressFromSubtasks&&t.refreshDom(!1)}addSubtask(t,e){return this.subtaskList.add(t,e)}removeSubtaskId(t){return this.subtaskList.removeId(t)}removeSubtaskIdx(t){return this.subtaskList.removeIdx(t)}getProgressRecursive(t){null==t&&(t=0),!this.useProgressFromSubtasks&&this.progress>0&&(t=1!=this.progress||1!=t&&0!=t?3!=this.progress||3!=t&&0!=t?2:3:1);for(let e of this.subtaskList.tasks)t=e.getProgressRecursive(t);return t}get subtasks(){return this.subtaskList.tasks}get supertask(){return this.supertaskList?this.supertaskList.owner:null}get chain(){let t=this.supertaskList.owner,e=[];for(;t;)e.push(t),t=t.supertaskList.owner;return e}static generateId(){return H.lastId>=Number.MAX_SAFE_INTEGER&&(H.lastId=-1),++H.lastId}}class ${tasks;owner;expanded=!1;constructor(t,e){this.owner=t,this.tasks=[],e&&e.forEach((t=>{this.add(t)}))}sort(){}createTask(t,e){t||(t=this.tasks.length+1);let s=new H;this.add(s,t),this.owner?this.owner.refreshDom(!0):this.refreshDom(!1),e&&x(s,P)}add(t,e){null==e&&(e=this.tasks.length),this.tasks.splice(e,0,t),t.supertaskList=this,t.updateDepth(!0)}getTaskIdx(t){for(let e=0;e<this.tasks.length;e++)if(this.tasks[e].id==t.id)return e;return-1}removeId(t){for(let e=0;e<this.tasks.length;e++)if(this.tasks[e].id==t)return this.removeIdx(e);return!1}removeIdx(t){return this.tasks[t].supertaskList=null,this.tasks.splice(t,1),!0}getTaskById(t,e){let s=null;for(let i of this.tasks){if(i.id==t)return i;if(e&&i.subtaskList.hasTasks()&&(s=i.subtaskList.getTaskById(t,e),s))return s}return s}hasTasks(){return this.tasks.length>=1}getIdOrder(t){const e=[];for(let s of this.tasks)e.push(s.id),t&&e.push(...s.subtaskList.getIdOrder(t));return e}refreshDom(t){this.tasks.forEach((e=>{e.domDiv&&(e.domDiv.task.remove(),t&&e.domDiv.subtasks.remove())})),this.tasks.forEach((e=>{e.refreshDom(t)}));for(let e=0;e<this.tasks.length;e++)this.tasks[e].refreshDom(t)}}let P=function(){let t=function(t,e){"Control"==e.key&&(P.selectionAddTo=t)},e=function(t,e){"Shift"==e.key&&(P.selectionMass=t)};return document.addEventListener("keydown",(s=>{t.bind(this,!0,s)(),e.bind(this,!0,s)()})),document.addEventListener("keyup",(s=>{t.bind(this,!1,s)(),e.bind(this,!1,s)()})),{currentlyEditing:!1,selectionAddTo:!1,touch:{time:[null,null],pos:[null,null],touchedId:[null,null]}}}(),F=function(){let t=function(e,s){s||(s=""),console.log(s+"----------------"),console.log(s+"Title: "+e.title),console.log(s+"Due date: "+e.dueDate),console.log(s+"Due time: "+e.dueTime),console.log(s+"Description: "+e.description),console.log(s+"Progress: "+e.progress),console.log(s+"Notes:  "+e.notes),console.log(s+"ID: "+e.id),console.log(s+"Depth: "+e.depth),e.supertaskList&&e.supertaskList.owner?console.log(s+"Supertask: ("+e.supertaskList.owner.id+") "+e.supertaskList.owner.title):console.log(s+"No supertask"),e.subtaskList.hasTasks()&&(console.log(s+e.subtaskList.tasks.length+" subtask"+(1!=e.subtaskList.tasks.length?"s:":":")),e.subtaskList.tasks.forEach((e=>{t(e,s+"*   ")})))};return{logTask:t}}(),z=function(){const t=[];let e=function(t){const e=[];for(let s of t){let i=s.chain,n=!1;for(let e of t)if(i.includes(e)){n=!0;break}n||e.push(s)}return e},s=function(){t.splice(0,t.length)};return{buffer:t,remove:function(t,s,i){t instanceof Array||(t=[t]),s&&(t=e(t));for(let e of t){let t=e.supertaskList.getTaskIdx(e),n=e.supertaskList,r=e.subtaskList;if(e.delete(!0),!s)for(let e=0;e<r.tasks.length;e++)n.add(r.tasks[e],t++);i&&(n.owner?n.owner.refreshDom(!0):n.refreshDom(!0))}},copy:function(i,n,r){i instanceof Array||(i=[i]),s(),n&&(i=e(i));let d=r.getIdOrder(!0);i.sort((function(t,e){return d.indexOf(t.id)<d.indexOf(e.id)?-1:1}));for(let e of i)t.push(e.clone(n))},cut:function(t,e,s,i){t instanceof Array||(t=[t]),this.copy(t,e,i),this.remove(t,e)},paste:function(e,s){if(e instanceof H&&(e=e.subtaskList),t.length){for(let i of t){let t=i.clone(!0,e,s++);t.assignNewIdRecursive(),t.updateDepth(!0)}return e.owner?e.owner.refreshDom(!0):e.refreshDom(!0),!0}return!1},clearBuffer:s}}(),O=function(){const t=[];let e=function(e){i(e)||(e.selected=!0,t.push(e),function(t){let e=c.querySelector(`.task.id-${t}`);e&&e.classList.add("selected")}(e.id))},s=function(){for(let e of t)e.selected=!1,L(e.id);t.splice(0,t.length)},i=function(e){return t.indexOf(e)>=0},n=function(t){if(P.selectionMass)if(O.selected.length){let e=Z.getIdOrder(!0),s=e.indexOf(O.selected[0].id),i=e.indexOf(t.id);if(i<s){let t=s;s=i,i=t}O.addExclusive(O.selected[0]);for(let t=s;t<=i;t++)e[t]!=O.selected[0].id&&O.add(Z.getTaskById(e[t],!0))}else O.addExclusive(t);else P.selectionAddTo?O.contains(t)?O.remove(t):O.add(t):O.addExclusive(t)};return{selected:t,add:e,addExclusive:function(t){s(),t.selected=!0,e(t)},remove:function(e){let s=t.indexOf(e);return s>=0&&(t.splice(s,1),e.selected=!1,L(e.id),!0)},clear:s,contains:i,updateSelection:n,triggerMenu:function(e,s,i){let r=Z.getTaskById(C(e,s),!0);if(r&&!t.includes(r)&&n(r),r&&O.selected.length){b();let t=["New task (above)","New task (below)","New task (as subtask)","Copy (with subtasks)","Copy (without subtasks)","Cut (with subtasks)","Cut (without subtasks)"],i=[function(){r.supertaskList.createTask(r.supertaskList.getTaskIdx(r),!0)},function(){r.supertaskList.createTask(r.supertaskList.getTaskIdx(r)+1,!0)},function(){r.subtaskList.createTask(null,!0)},function(){z.copy(O.selected,!0,Z)},function(){z.copy(O.selected,!1,Z)},function(){z.cut(O.selected,!0,!0,Z)},function(){z.cut(O.selected,!1,!0,Z)}];z.buffer.length&&(t.push("Paste (above)","Paste (below)","Paste (as subtask)"),i.push((function(){z.paste(r.supertaskList,r.supertaskList.getTaskIdx(r))}),(function(){z.paste(r.supertaskList,r.supertaskList.getTaskIdx(r)+1)}),(function(){z.paste(r.subtaskList)}))),t.push("Delete (including subtasks)","Delete (not including subtasks)"),i.push((function(){z.remove(O.selected,!0,!0)}),(function(){z.remove(O.selected,!1,!0)}));let n=new M(t,i);document.querySelector("body").appendChild(n.svg),n.buttonDown(e,s)}else{b();let t=["New task"],i=[function(){Z.createTask(Z.tasks.length,!0)}];z.buffer.length&&(t.push("Paste"),i.push((function(){z.paste(Z,Z.tasks.length)})));let n=new M(t,i);document.querySelector("body").appendChild(n.svg),n.buttonDown(e,s)}}}}(),Z=new $(null,[new H("Test Task")]);Z.tasks[0].addSubtask(new H("Another task","2024-02-01","17:00","This is a test task.",2,3,"No notes for this task.")),Z.tasks[0].subtasks[0].addSubtask(new H("Fourth task")),Z.tasks[0].subtasks[0].subtasks[0].addSubtask(new H("Fifth task")),Z.tasks[0].subtasks[0].subtasks[0].addSubtask(new H("Sixth task")),Z.tasks[0].addSubtask(new H("A third task")),Z.tasks.forEach((t=>{t.log()})),Z.refreshDom(!0),document.addEventListener("contextmenu",(t=>{t.preventDefault()})),document.addEventListener("click",(t=>{let e=Z.getTaskById(C(t.clientX,t.clientY),!0),s=document.elementsFromPoint(t.clientX,t.clientY);if(!P.currentlyEditing&&!t.target.classList.contains("input-button"))if(e)O.updateSelection(e);else{let t=!0;for(let e of s)if(e.classList.contains("task-expand-img")||e.classList.contains("subtasks-plus-img")){t=!1;break}t&&O.clear()}})),document.addEventListener("mouseup",(t=>{0!=t.button||P.currentlyEditing||k()})),document.addEventListener("mousedown",(t=>{2!=t.button||P.currentlyEditing||O.triggerMenu(t.clientX,t.clientY,P.selectionAddTo)})),document.addEventListener("touchstart",(t=>{P.touch.time.splice(0,1),P.touch.time.push((new Date).getTime()),P.touch.pos.splice(0,1),P.touch.pos.push({x:t.touches[0].clientX,y:t.touches[0].clientY}),P.touch.time[0]&&P.touch.time[1]-P.touch.time[0]<300&&Math.abs(P.touch.pos[1].x-P.touch.pos[0].x)<40&&Math.abs(P.touch.pos[1].y-P.touch.pos[0].y)<40&&O.triggerMenu(P.touch.pos[1].x,P.touch.pos[1].y,P.selectionAddTo),P.touch.touchedId.splice(0,1),P.touch.touchedId.push(C(t.touches[0].clientX,t.touches[0].clientY)),console.log("Set last touched to "+P.touch.touchedId)})),document.addEventListener("touchend",(t=>{})),document.addEventListener("keydown",(t=>{"e"==t.key&&console.log(O.selected)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,